// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: spider/sse.proto

package spider

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SSEStockOption 上证交易所ETF期权
type SSEStockOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 行权价
	ExercisePrice       string `protobuf:"bytes,1,opt,name=exercise_price,json=exercisePrice,proto3" json:"exercise_price,omitempty"`
	UpdateVersion       string `protobuf:"bytes,2,opt,name=update_version,json=updateVersion,proto3" json:"update_version,omitempty"`
	OptionType          string `protobuf:"bytes,3,opt,name=option_type,json=optionType,proto3" json:"option_type,omitempty"`
	DailyPriceUpLimit   string `protobuf:"bytes,4,opt,name=daily_price_up_limit,json=dailyPriceUpLimit,proto3" json:"daily_price_up_limit,omitempty"`
	TimeSave            string `protobuf:"bytes,5,opt,name=time_save,json=timeSave,proto3" json:"time_save,omitempty"`
	DELIST_Flag         string `protobuf:"bytes,6,opt,name=DELIST_Flag,json=DELISTFlag,proto3" json:"DELIST_Flag,omitempty"`
	StartDate           string `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	ExpireDate          string `protobuf:"bytes,8,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	ContractUnit        string `protobuf:"bytes,9,opt,name=contract_unit,json=contractUnit,proto3" json:"contract_unit,omitempty"`
	CallOrPut           string `protobuf:"bytes,10,opt,name=call_or_put,json=callOrPut,proto3" json:"call_or_put,omitempty"`
	LmtOrdMaxFloor      string `protobuf:"bytes,11,opt,name=lmt_ord_max_floor,json=lmtOrdMaxFloor,proto3" json:"lmt_ord_max_floor,omitempty"`
	DeliveryDate        string `protobuf:"bytes,12,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`
	ChangeFlag          string `protobuf:"bytes,13,opt,name=change_flag,json=changeFlag,proto3" json:"change_flag,omitempty"`
	MktOrdMaxFloor      string `protobuf:"bytes,14,opt,name=mkt_ord_max_floor,json=mktOrdMaxFloor,proto3" json:"mkt_ord_max_floor,omitempty"`
	UnderlyingType      string `protobuf:"bytes,15,opt,name=underlying_type,json=underlyingType,proto3" json:"underlying_type,omitempty"`
	DailyPriceDownLimit string `protobuf:"bytes,16,opt,name=daily_price_down_limit,json=dailyPriceDownLimit,proto3" json:"daily_price_down_limit,omitempty"`
	RoundLot            string `protobuf:"bytes,17,opt,name=round_lot,json=roundLot,proto3" json:"round_lot,omitempty"`
	SecurityClosePX     string `protobuf:"bytes,18,opt,name=security_closePX,json=securityClosePX,proto3" json:"security_closePX,omitempty"`
	SettlPrice          string `protobuf:"bytes,19,opt,name=settl_price,json=settlPrice,proto3" json:"settl_price,omitempty"`
	ContractSymbol      string `protobuf:"bytes,20,opt,name=contract_symbol,json=contractSymbol,proto3" json:"contract_symbol,omitempty"`
	Num                 string `protobuf:"bytes,21,opt,name=num,proto3" json:"num,omitempty"`
	ContractID          string `protobuf:"bytes,22,opt,name=contractID,proto3" json:"contractID,omitempty"`
	MarginRatioParam1   string `protobuf:"bytes,23,opt,name=margin_ratio_param1,json=marginRatioParam1,proto3" json:"margin_ratio_param1,omitempty"`
	MarginRatioParam2   string `protobuf:"bytes,24,opt,name=margin_ratio_param2,json=marginRatioParam2,proto3" json:"margin_ratio_param2,omitempty"`
	LmtOrdMinFloor      string `protobuf:"bytes,25,opt,name=lmt_ord_min_floor,json=lmtOrdMinFloor,proto3" json:"lmt_ord_min_floor,omitempty"`
	MktOrdMinFloor      string `protobuf:"bytes,26,opt,name=mkt_ord_min_floor,json=mktOrdMinFloor,proto3" json:"mkt_ord_min_floor,omitempty"`
	EndDate             string `protobuf:"bytes,27,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	PriceLimitType      string `protobuf:"bytes,28,opt,name=price_limit_type,json=priceLimitType,proto3" json:"price_limit_type,omitempty"`
	ExerciseDate        string `protobuf:"bytes,29,opt,name=exercise_date,json=exerciseDate,proto3" json:"exercise_date,omitempty"`
	MarginUnit          string `protobuf:"bytes,30,opt,name=margin_unit,json=marginUnit,proto3" json:"margin_unit,omitempty"`
	SecurityID          string `protobuf:"bytes,31,opt,name=securityID,proto3" json:"securityID,omitempty"`
	SecurityNameByID    string `protobuf:"bytes,32,opt,name=security_name_byID,json=securityNameByID,proto3" json:"security_name_byID,omitempty"`
	ContractFlag        string `protobuf:"bytes,33,opt,name=contract_flag,json=contractFlag,proto3" json:"contract_flag,omitempty"`
	UnderlyingClosePX   string `protobuf:"bytes,34,opt,name=underlying_closePX,json=underlyingClosePX,proto3" json:"underlying_closePX,omitempty"`
}

func (x *SSEStockOption) Reset() {
	*x = SSEStockOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spider_sse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSEStockOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSEStockOption) ProtoMessage() {}

func (x *SSEStockOption) ProtoReflect() protoreflect.Message {
	mi := &file_spider_sse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSEStockOption.ProtoReflect.Descriptor instead.
func (*SSEStockOption) Descriptor() ([]byte, []int) {
	return file_spider_sse_proto_rawDescGZIP(), []int{0}
}

func (x *SSEStockOption) GetExercisePrice() string {
	if x != nil {
		return x.ExercisePrice
	}
	return ""
}

func (x *SSEStockOption) GetUpdateVersion() string {
	if x != nil {
		return x.UpdateVersion
	}
	return ""
}

func (x *SSEStockOption) GetOptionType() string {
	if x != nil {
		return x.OptionType
	}
	return ""
}

func (x *SSEStockOption) GetDailyPriceUpLimit() string {
	if x != nil {
		return x.DailyPriceUpLimit
	}
	return ""
}

func (x *SSEStockOption) GetTimeSave() string {
	if x != nil {
		return x.TimeSave
	}
	return ""
}

func (x *SSEStockOption) GetDELIST_Flag() string {
	if x != nil {
		return x.DELIST_Flag
	}
	return ""
}

func (x *SSEStockOption) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SSEStockOption) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *SSEStockOption) GetContractUnit() string {
	if x != nil {
		return x.ContractUnit
	}
	return ""
}

func (x *SSEStockOption) GetCallOrPut() string {
	if x != nil {
		return x.CallOrPut
	}
	return ""
}

func (x *SSEStockOption) GetLmtOrdMaxFloor() string {
	if x != nil {
		return x.LmtOrdMaxFloor
	}
	return ""
}

func (x *SSEStockOption) GetDeliveryDate() string {
	if x != nil {
		return x.DeliveryDate
	}
	return ""
}

func (x *SSEStockOption) GetChangeFlag() string {
	if x != nil {
		return x.ChangeFlag
	}
	return ""
}

func (x *SSEStockOption) GetMktOrdMaxFloor() string {
	if x != nil {
		return x.MktOrdMaxFloor
	}
	return ""
}

func (x *SSEStockOption) GetUnderlyingType() string {
	if x != nil {
		return x.UnderlyingType
	}
	return ""
}

func (x *SSEStockOption) GetDailyPriceDownLimit() string {
	if x != nil {
		return x.DailyPriceDownLimit
	}
	return ""
}

func (x *SSEStockOption) GetRoundLot() string {
	if x != nil {
		return x.RoundLot
	}
	return ""
}

func (x *SSEStockOption) GetSecurityClosePX() string {
	if x != nil {
		return x.SecurityClosePX
	}
	return ""
}

func (x *SSEStockOption) GetSettlPrice() string {
	if x != nil {
		return x.SettlPrice
	}
	return ""
}

func (x *SSEStockOption) GetContractSymbol() string {
	if x != nil {
		return x.ContractSymbol
	}
	return ""
}

func (x *SSEStockOption) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *SSEStockOption) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *SSEStockOption) GetMarginRatioParam1() string {
	if x != nil {
		return x.MarginRatioParam1
	}
	return ""
}

func (x *SSEStockOption) GetMarginRatioParam2() string {
	if x != nil {
		return x.MarginRatioParam2
	}
	return ""
}

func (x *SSEStockOption) GetLmtOrdMinFloor() string {
	if x != nil {
		return x.LmtOrdMinFloor
	}
	return ""
}

func (x *SSEStockOption) GetMktOrdMinFloor() string {
	if x != nil {
		return x.MktOrdMinFloor
	}
	return ""
}

func (x *SSEStockOption) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SSEStockOption) GetPriceLimitType() string {
	if x != nil {
		return x.PriceLimitType
	}
	return ""
}

func (x *SSEStockOption) GetExerciseDate() string {
	if x != nil {
		return x.ExerciseDate
	}
	return ""
}

func (x *SSEStockOption) GetMarginUnit() string {
	if x != nil {
		return x.MarginUnit
	}
	return ""
}

func (x *SSEStockOption) GetSecurityID() string {
	if x != nil {
		return x.SecurityID
	}
	return ""
}

func (x *SSEStockOption) GetSecurityNameByID() string {
	if x != nil {
		return x.SecurityNameByID
	}
	return ""
}

func (x *SSEStockOption) GetContractFlag() string {
	if x != nil {
		return x.ContractFlag
	}
	return ""
}

func (x *SSEStockOption) GetUnderlyingClosePX() string {
	if x != nil {
		return x.UnderlyingClosePX
	}
	return ""
}

var File_spider_sse_proto protoreflect.FileDescriptor

var file_spider_sse_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x70, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x73, 0x70, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x94, 0x0a, 0x0a, 0x0e, 0x53, 0x53, 0x45, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x61,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x61,
	0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x44, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x6d, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6d, 0x74, 0x4f, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x6b, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6b, 0x74, 0x4f, 0x72, 0x64, 0x4d, 0x61, 0x78, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x58, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x58, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x31, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x32, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x6d, 0x74, 0x5f, 0x6f, 0x72,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x6d, 0x74, 0x4f, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x6b, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6b,
	0x74, 0x4f, 0x72, 0x64, 0x4d, 0x69, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x79, 0x49, 0x44, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x58,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x58, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x65,
	0x6e, 0x6a, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x70, 0x69, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_spider_sse_proto_rawDescOnce sync.Once
	file_spider_sse_proto_rawDescData = file_spider_sse_proto_rawDesc
)

func file_spider_sse_proto_rawDescGZIP() []byte {
	file_spider_sse_proto_rawDescOnce.Do(func() {
		file_spider_sse_proto_rawDescData = protoimpl.X.CompressGZIP(file_spider_sse_proto_rawDescData)
	})
	return file_spider_sse_proto_rawDescData
}

var file_spider_sse_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_spider_sse_proto_goTypes = []interface{}{
	(*SSEStockOption)(nil), // 0: goshare.spider.SSEStockOption
}
var file_spider_sse_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_spider_sse_proto_init() }
func file_spider_sse_proto_init() {
	if File_spider_sse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spider_sse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSEStockOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spider_sse_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spider_sse_proto_goTypes,
		DependencyIndexes: file_spider_sse_proto_depIdxs,
		MessageInfos:      file_spider_sse_proto_msgTypes,
	}.Build()
	File_spider_sse_proto = out.File
	file_spider_sse_proto_rawDesc = nil
	file_spider_sse_proto_goTypes = nil
	file_spider_sse_proto_depIdxs = nil
}
