// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: goshare/trading.proto

package goshare

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 接口类型
type RouteType int32

const (
	// CTP 期货
	RouteType_RT_CTP_FUTURE RouteType = 0
	// CTP 股票
	RouteType_RT_CTP_STOCK RouteType = 1
	// IB
	RouteType_RT_INTERACTIVE_BROKER RouteType = 2
	// LTS
	RouteType_RT_LTS RouteType = 3
	// CATS
	RouteType_RT_CATS RouteType = 4
	// CTP 个股期权
	RouteType_RT_CTP_STOCK_OPTION RouteType = 5
	// 金仕达个股
	RouteType_RT_KSOP RouteType = 7
)

// Enum value maps for RouteType.
var (
	RouteType_name = map[int32]string{
		0: "RT_CTP_FUTURE",
		1: "RT_CTP_STOCK",
		2: "RT_INTERACTIVE_BROKER",
		3: "RT_LTS",
		4: "RT_CATS",
		5: "RT_CTP_STOCK_OPTION",
		7: "RT_KSOP",
	}
	RouteType_value = map[string]int32{
		"RT_CTP_FUTURE":         0,
		"RT_CTP_STOCK":          1,
		"RT_INTERACTIVE_BROKER": 2,
		"RT_LTS":                3,
		"RT_CATS":               4,
		"RT_CTP_STOCK_OPTION":   5,
		"RT_KSOP":               7,
	}
)

func (x RouteType) Enum() *RouteType {
	p := new(RouteType)
	*p = x
	return p
}

func (x RouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_trading_proto_enumTypes[0].Descriptor()
}

func (RouteType) Type() protoreflect.EnumType {
	return &file_goshare_trading_proto_enumTypes[0]
}

func (x RouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteType.Descriptor instead.
func (RouteType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{0}
}

// TradingRoute 交易通道
type TradingRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment             string    `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	BrokerId            string    `protobuf:"bytes,4,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	RouteType           RouteType `protobuf:"varint,5,opt,name=route_type,json=routeType,proto3,enum=goshare.RouteType" json:"route_type,omitempty"`
	TradingFrontList    []string  `protobuf:"bytes,6,rep,name=trading_front_list,json=tradingFrontList,proto3" json:"trading_front_list,omitempty"`
	MarketDataFrontList []string  `protobuf:"bytes,7,rep,name=market_data_front_list,json=marketDataFrontList,proto3" json:"market_data_front_list,omitempty"`
	UserProductInfo     string    `protobuf:"bytes,8,opt,name=user_product_info,json=userProductInfo,proto3" json:"user_product_info,omitempty"`
	AuthCode            string    `protobuf:"bytes,9,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	User                string    `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *TradingRoute) Reset() {
	*x = TradingRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trading_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingRoute) ProtoMessage() {}

func (x *TradingRoute) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trading_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingRoute.ProtoReflect.Descriptor instead.
func (*TradingRoute) Descriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{0}
}

func (x *TradingRoute) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TradingRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TradingRoute) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TradingRoute) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *TradingRoute) GetRouteType() RouteType {
	if x != nil {
		return x.RouteType
	}
	return RouteType_RT_CTP_FUTURE
}

func (x *TradingRoute) GetTradingFrontList() []string {
	if x != nil {
		return x.TradingFrontList
	}
	return nil
}

func (x *TradingRoute) GetMarketDataFrontList() []string {
	if x != nil {
		return x.MarketDataFrontList
	}
	return nil
}

func (x *TradingRoute) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *TradingRoute) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *TradingRoute) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type TradingRouteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TradingRoute `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TradingRouteList) Reset() {
	*x = TradingRouteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trading_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingRouteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingRouteList) ProtoMessage() {}

func (x *TradingRouteList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trading_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingRouteList.ProtoReflect.Descriptor instead.
func (*TradingRouteList) Descriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{1}
}

func (x *TradingRouteList) GetList() []*TradingRoute {
	if x != nil {
		return x.List
	}
	return nil
}

// TradingAccount 交易账号
type TradingAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// 通道
	TradingRoute *TradingRoute `protobuf:"bytes,4,opt,name=trading_route,json=tradingRoute,proto3" json:"trading_route,omitempty"`
	// 账号
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// 密码
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// 密码2
	Password2 string `protobuf:"bytes,7,opt,name=password2,proto3" json:"password2,omitempty"`
	// 密码3
	Password3 string `protobuf:"bytes,8,opt,name=password3,proto3" json:"password3,omitempty"`
	// 防止自成交
	PreventSelfMatching bool `protobuf:"varint,9,opt,name=prevent_self_matching,json=preventSelfMatching,proto3" json:"prevent_self_matching,omitempty"`
	// 期权限仓数量
	StockOptionPositionLimit int32 `protobuf:"varint,10,opt,name=stock_option_position_limit,json=stockOptionPositionLimit,proto3" json:"stock_option_position_limit,omitempty"`
	// 撤单次数限制
	CancelLimit int32 `protobuf:"varint,11,opt,name=cancel_limit,json=cancelLimit,proto3" json:"cancel_limit,omitempty"`
	// 用户
	User string `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *TradingAccount) Reset() {
	*x = TradingAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trading_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingAccount) ProtoMessage() {}

func (x *TradingAccount) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trading_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingAccount.ProtoReflect.Descriptor instead.
func (*TradingAccount) Descriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{2}
}

func (x *TradingAccount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TradingAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TradingAccount) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TradingAccount) GetTradingRoute() *TradingRoute {
	if x != nil {
		return x.TradingRoute
	}
	return nil
}

func (x *TradingAccount) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TradingAccount) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TradingAccount) GetPassword2() string {
	if x != nil {
		return x.Password2
	}
	return ""
}

func (x *TradingAccount) GetPassword3() string {
	if x != nil {
		return x.Password3
	}
	return ""
}

func (x *TradingAccount) GetPreventSelfMatching() bool {
	if x != nil {
		return x.PreventSelfMatching
	}
	return false
}

func (x *TradingAccount) GetStockOptionPositionLimit() int32 {
	if x != nil {
		return x.StockOptionPositionLimit
	}
	return 0
}

func (x *TradingAccount) GetCancelLimit() int32 {
	if x != nil {
		return x.CancelLimit
	}
	return 0
}

func (x *TradingAccount) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type TradingAccountList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TradingAccount `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TradingAccountList) Reset() {
	*x = TradingAccountList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trading_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingAccountList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingAccountList) ProtoMessage() {}

func (x *TradingAccountList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trading_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingAccountList.ProtoReflect.Descriptor instead.
func (*TradingAccountList) Descriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{3}
}

func (x *TradingAccountList) GetList() []*TradingAccount {
	if x != nil {
		return x.List
	}
	return nil
}

// TradingAccountSummary 资金信息
type TradingAccountSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账号
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// 结算组（可能单个结算组给个摘要)
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// 币种
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// / 余额
	Balance float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	// / 手续费
	Commission float64 `protobuf:"fixed64,5,opt,name=commission,proto3" json:"commission,omitempty"`
	// / 占用保证金
	CurMargin float64 `protobuf:"fixed64,6,opt,name=cur_margin,json=curMargin,proto3" json:"cur_margin,omitempty"`
	// / 持仓市值
	NetPositionAmount float64 `protobuf:"fixed64,7,opt,name=net_position_amount,json=netPositionAmount,proto3" json:"net_position_amount,omitempty"`
	// / 上次余额
	PreBalance float64 `protobuf:"fixed64,8,opt,name=pre_balance,json=preBalance,proto3" json:"pre_balance,omitempty"`
	// / 利息收入
	InterestIn float64 `protobuf:"fixed64,9,opt,name=interest_in,json=interestIn,proto3" json:"interest_in,omitempty"`
	// / 存款
	Deposit float64 `protobuf:"fixed64,10,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// / 取款
	Withdraw float64 `protobuf:"fixed64,11,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	// / 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`
	// / 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,13,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`
	// / 可用资金
	Available float64 `protobuf:"fixed64,14,opt,name=available,proto3" json:"available,omitempty"`
	// / 平仓盈亏
	CloseProfit float64 `protobuf:"fixed64,15,opt,name=close_profit,json=closeProfit,proto3" json:"close_profit,omitempty"`
	// / 持仓盈亏
	PositionProfit float64 `protobuf:"fixed64,16,opt,name=position_profit,json=positionProfit,proto3" json:"position_profit,omitempty"`
	// 上次质押金额
	PreMortgate float64 `protobuf:"fixed64,17,opt,name=pre_mortgate,json=preMortgate,proto3" json:"pre_mortgate,omitempty"`
	// 上次信用额度
	PreCredit float64 `protobuf:"fixed64,18,opt,name=pre_credit,json=preCredit,proto3" json:"pre_credit,omitempty"`
	// 利息基数
	InterestBase float64 `protobuf:"fixed64,19,opt,name=interest_base,json=interestBase,proto3" json:"interest_base,omitempty"`
	// 可取资金
	WithdrawAvailable float64 `protobuf:"fixed64,20,opt,name=withdraw_available,json=withdrawAvailable,proto3" json:"withdraw_available,omitempty"`
	// 基本准备金
	Reserve float64 `protobuf:"fixed64,21,opt,name=reserve,proto3" json:"reserve,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,22,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	// 信用额度
	Credit float64 `protobuf:"fixed64,23,opt,name=credit,proto3" json:"credit,omitempty"`
	// 质押金额
	Mortgate float64 `protobuf:"fixed64,24,opt,name=mortgate,proto3" json:"mortgate,omitempty"`
	// 交易所保证金
	ExchangeMargin float64 `protobuf:"fixed64,25,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchange_margin,omitempty"`
	// 交割保证金
	DeliveryMargin float64 `protobuf:"fixed64,26,opt,name=delivery_margin,json=deliveryMargin,proto3" json:"delivery_margin,omitempty"`
	// 交易所交割保证金
	ExchangeDeliveryMargin float64 `protobuf:"fixed64,27,opt,name=exchange_delivery_margin,json=exchangeDeliveryMargin,proto3" json:"exchange_delivery_margin,omitempty"`
	// 保底期货结算准备金
	ReserveBalance float64 `protobuf:"fixed64,28,opt,name=reserve_balance,json=reserveBalance,proto3" json:"reserve_balance,omitempty"`
	// 交割手续费
	DeliveryCommission float64 `protobuf:"fixed64,29,opt,name=delivery_commission,json=deliveryCommission,proto3" json:"delivery_commission,omitempty"`
	// 冻结过户费
	FrozenTransferFee float64 `protobuf:"fixed64,30,opt,name=frozen_transfer_fee,json=frozenTransferFee,proto3" json:"frozen_transfer_fee,omitempty"`
	// 冻结的印花税
	FrozenStampTax float64 `protobuf:"fixed64,31,opt,name=frozen_stamp_tax,json=frozenStampTax,proto3" json:"frozen_stamp_tax,omitempty"`
	// 过户费
	TransferFee float64 `protobuf:"fixed64,32,opt,name=transfer_fee,json=transferFee,proto3" json:"transfer_fee,omitempty"`
	// 印花税
	StampTax float64 `protobuf:"fixed64,33,opt,name=stamp_tax,json=stampTax,proto3" json:"stamp_tax,omitempty"`
	// / 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,34,opt,name=mtm_profit,json=mtmProfit,proto3" json:"mtm_profit,omitempty"`
	// / 盯市权益
	MtmBalance float64 `protobuf:"fixed64,35,opt,name=mtm_balance,json=mtmBalance,proto3" json:"mtm_balance,omitempty"`
	// /证券总价值
	StockValue float64 `protobuf:"fixed64,36,opt,name=stock_value,json=stockValue,proto3" json:"stock_value,omitempty"`
	// /国债回购占用资金
	BondRepurchaseAmount float64 `protobuf:"fixed64,37,opt,name=bond_repurchase_amount,json=bondRepurchaseAmount,proto3" json:"bond_repurchase_amount,omitempty"`
	// /国债逆回购占用资金
	ReverseRepurchaseAmount float64 `protobuf:"fixed64,38,opt,name=reverse_repurchase_amount,json=reverseRepurchaseAmount,proto3" json:"reverse_repurchase_amount,omitempty"`
	// /融资买入金额
	MarginTradeAmount float64 `protobuf:"fixed64,39,opt,name=margin_trade_amount,json=marginTradeAmount,proto3" json:"margin_trade_amount,omitempty"`
	// /融券卖出金额
	ShortSellAmount float64 `protobuf:"fixed64,40,opt,name=short_sell_amount,json=shortSellAmount,proto3" json:"short_sell_amount,omitempty"`
	// /融资持仓盈亏
	MarginTradeProfit float64 `protobuf:"fixed64,41,opt,name=margin_trade_profit,json=marginTradeProfit,proto3" json:"margin_trade_profit,omitempty"`
	// /融券持仓盈亏
	PrePreferedBalance float64 `protobuf:"fixed64,42,opt,name=pre_prefered_balance,json=prePreferedBalance,proto3" json:"pre_prefered_balance,omitempty"`
	// 冻结平仓所需要费用
	FrozenCloseCommission float64 `protobuf:"fixed64,43,opt,name=frozen_close_commission,json=frozenCloseCommission,proto3" json:"frozen_close_commission,omitempty"`
	// 劣后
	CommonBalance float64 `protobuf:"fixed64,44,opt,name=common_balance,json=commonBalance,proto3" json:"common_balance,omitempty"`
	// 优先资金
	PreferedBalance float64 `protobuf:"fixed64,45,opt,name=prefered_balance,json=preferedBalance,proto3" json:"prefered_balance,omitempty"`
	// 兑换基础货币汇率
	BaseExchangeRate float64 `protobuf:"fixed64,46,opt,name=base_exchange_rate,json=baseExchangeRate,proto3" json:"base_exchange_rate,omitempty"`
	// 报警
	WarningLevel float64 `protobuf:"fixed64,47,opt,name=warning_level,json=warningLevel,proto3" json:"warning_level,omitempty"`
	// 强平
	ForceCloseLevel float64 `protobuf:"fixed64,48,opt,name=force_close_level,json=forceCloseLevel,proto3" json:"force_close_level,omitempty"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,49,opt,name=cleared_closed_profit,json=clearedClosedProfit,proto3" json:"cleared_closed_profit,omitempty"`
	// 名称
	AccountName string `protobuf:"bytes,50,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// 利息
	Interest float64 `protobuf:"fixed64,51,opt,name=interest,proto3" json:"interest,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,52,opt,name=frozen_interest,json=frozenInterest,proto3" json:"frozen_interest,omitempty"`
	// 风控方案
	OptionsId int64 `protobuf:"varint,53,opt,name=options_id,json=optionsId,proto3" json:"options_id,omitempty"`
	// 方案名称
	OptionsName string `protobuf:"bytes,54,opt,name=options_name,json=optionsName,proto3" json:"options_name,omitempty"`
	// 是否激活
	Activated bool `protobuf:"varint,55,opt,name=activated,proto3" json:"activated,omitempty"`
	// 隔夜费
	OvernightFee float64 `protobuf:"fixed64,56,opt,name=overnight_fee,json=overnightFee,proto3" json:"overnight_fee,omitempty"`
	// 运营手续费
	CommissionL0 float64 `protobuf:"fixed64,57,opt,name=commission_l0,json=commissionL0,proto3" json:"commission_l0,omitempty"`
	// 多头持仓市值
	LongPositionMarketValue float64 `protobuf:"fixed64,58,opt,name=long_position_market_value,json=longPositionMarketValue,proto3" json:"long_position_market_value,omitempty"`
	// 空头持仓市值
	ShortPositionMarketValue float64 `protobuf:"fixed64,59,opt,name=short_position_market_value,json=shortPositionMarketValue,proto3" json:"short_position_market_value,omitempty"`
	// 优先入金
	PreferedDeposit float64 `protobuf:"fixed64,60,opt,name=prefered_deposit,json=preferedDeposit,proto3" json:"prefered_deposit,omitempty"`
	// 劣后入金
	CommonDeposit float64 `protobuf:"fixed64,61,opt,name=common_deposit,json=commonDeposit,proto3" json:"common_deposit,omitempty"`
	// 优先出金
	PreferedWithdraw float64 `protobuf:"fixed64,62,opt,name=prefered_withdraw,json=preferedWithdraw,proto3" json:"prefered_withdraw,omitempty"`
	// 劣后出金
	CommonWithdraw float64 `protobuf:"fixed64,63,opt,name=common_withdraw,json=commonWithdraw,proto3" json:"common_withdraw,omitempty"`
	// 部门
	Branch string `protobuf:"bytes,64,opt,name=branch,proto3" json:"branch,omitempty"`
	// 部门名称
	BranchName string `protobuf:"bytes,65,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
}

func (x *TradingAccountSummary) Reset() {
	*x = TradingAccountSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trading_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingAccountSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingAccountSummary) ProtoMessage() {}

func (x *TradingAccountSummary) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trading_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingAccountSummary.ProtoReflect.Descriptor instead.
func (*TradingAccountSummary) Descriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{4}
}

func (x *TradingAccountSummary) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TradingAccountSummary) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TradingAccountSummary) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TradingAccountSummary) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *TradingAccountSummary) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *TradingAccountSummary) GetCurMargin() float64 {
	if x != nil {
		return x.CurMargin
	}
	return 0
}

func (x *TradingAccountSummary) GetNetPositionAmount() float64 {
	if x != nil {
		return x.NetPositionAmount
	}
	return 0
}

func (x *TradingAccountSummary) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *TradingAccountSummary) GetInterestIn() float64 {
	if x != nil {
		return x.InterestIn
	}
	return 0
}

func (x *TradingAccountSummary) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *TradingAccountSummary) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *TradingAccountSummary) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *TradingAccountSummary) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *TradingAccountSummary) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *TradingAccountSummary) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *TradingAccountSummary) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *TradingAccountSummary) GetPreMortgate() float64 {
	if x != nil {
		return x.PreMortgate
	}
	return 0
}

func (x *TradingAccountSummary) GetPreCredit() float64 {
	if x != nil {
		return x.PreCredit
	}
	return 0
}

func (x *TradingAccountSummary) GetInterestBase() float64 {
	if x != nil {
		return x.InterestBase
	}
	return 0
}

func (x *TradingAccountSummary) GetWithdrawAvailable() float64 {
	if x != nil {
		return x.WithdrawAvailable
	}
	return 0
}

func (x *TradingAccountSummary) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *TradingAccountSummary) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *TradingAccountSummary) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *TradingAccountSummary) GetMortgate() float64 {
	if x != nil {
		return x.Mortgate
	}
	return 0
}

func (x *TradingAccountSummary) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *TradingAccountSummary) GetDeliveryMargin() float64 {
	if x != nil {
		return x.DeliveryMargin
	}
	return 0
}

func (x *TradingAccountSummary) GetExchangeDeliveryMargin() float64 {
	if x != nil {
		return x.ExchangeDeliveryMargin
	}
	return 0
}

func (x *TradingAccountSummary) GetReserveBalance() float64 {
	if x != nil {
		return x.ReserveBalance
	}
	return 0
}

func (x *TradingAccountSummary) GetDeliveryCommission() float64 {
	if x != nil {
		return x.DeliveryCommission
	}
	return 0
}

func (x *TradingAccountSummary) GetFrozenTransferFee() float64 {
	if x != nil {
		return x.FrozenTransferFee
	}
	return 0
}

func (x *TradingAccountSummary) GetFrozenStampTax() float64 {
	if x != nil {
		return x.FrozenStampTax
	}
	return 0
}

func (x *TradingAccountSummary) GetTransferFee() float64 {
	if x != nil {
		return x.TransferFee
	}
	return 0
}

func (x *TradingAccountSummary) GetStampTax() float64 {
	if x != nil {
		return x.StampTax
	}
	return 0
}

func (x *TradingAccountSummary) GetMtmProfit() float64 {
	if x != nil {
		return x.MtmProfit
	}
	return 0
}

func (x *TradingAccountSummary) GetMtmBalance() float64 {
	if x != nil {
		return x.MtmBalance
	}
	return 0
}

func (x *TradingAccountSummary) GetStockValue() float64 {
	if x != nil {
		return x.StockValue
	}
	return 0
}

func (x *TradingAccountSummary) GetBondRepurchaseAmount() float64 {
	if x != nil {
		return x.BondRepurchaseAmount
	}
	return 0
}

func (x *TradingAccountSummary) GetReverseRepurchaseAmount() float64 {
	if x != nil {
		return x.ReverseRepurchaseAmount
	}
	return 0
}

func (x *TradingAccountSummary) GetMarginTradeAmount() float64 {
	if x != nil {
		return x.MarginTradeAmount
	}
	return 0
}

func (x *TradingAccountSummary) GetShortSellAmount() float64 {
	if x != nil {
		return x.ShortSellAmount
	}
	return 0
}

func (x *TradingAccountSummary) GetMarginTradeProfit() float64 {
	if x != nil {
		return x.MarginTradeProfit
	}
	return 0
}

func (x *TradingAccountSummary) GetPrePreferedBalance() float64 {
	if x != nil {
		return x.PrePreferedBalance
	}
	return 0
}

func (x *TradingAccountSummary) GetFrozenCloseCommission() float64 {
	if x != nil {
		return x.FrozenCloseCommission
	}
	return 0
}

func (x *TradingAccountSummary) GetCommonBalance() float64 {
	if x != nil {
		return x.CommonBalance
	}
	return 0
}

func (x *TradingAccountSummary) GetPreferedBalance() float64 {
	if x != nil {
		return x.PreferedBalance
	}
	return 0
}

func (x *TradingAccountSummary) GetBaseExchangeRate() float64 {
	if x != nil {
		return x.BaseExchangeRate
	}
	return 0
}

func (x *TradingAccountSummary) GetWarningLevel() float64 {
	if x != nil {
		return x.WarningLevel
	}
	return 0
}

func (x *TradingAccountSummary) GetForceCloseLevel() float64 {
	if x != nil {
		return x.ForceCloseLevel
	}
	return 0
}

func (x *TradingAccountSummary) GetClearedClosedProfit() float64 {
	if x != nil {
		return x.ClearedClosedProfit
	}
	return 0
}

func (x *TradingAccountSummary) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *TradingAccountSummary) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *TradingAccountSummary) GetFrozenInterest() float64 {
	if x != nil {
		return x.FrozenInterest
	}
	return 0
}

func (x *TradingAccountSummary) GetOptionsId() int64 {
	if x != nil {
		return x.OptionsId
	}
	return 0
}

func (x *TradingAccountSummary) GetOptionsName() string {
	if x != nil {
		return x.OptionsName
	}
	return ""
}

func (x *TradingAccountSummary) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *TradingAccountSummary) GetOvernightFee() float64 {
	if x != nil {
		return x.OvernightFee
	}
	return 0
}

func (x *TradingAccountSummary) GetCommissionL0() float64 {
	if x != nil {
		return x.CommissionL0
	}
	return 0
}

func (x *TradingAccountSummary) GetLongPositionMarketValue() float64 {
	if x != nil {
		return x.LongPositionMarketValue
	}
	return 0
}

func (x *TradingAccountSummary) GetShortPositionMarketValue() float64 {
	if x != nil {
		return x.ShortPositionMarketValue
	}
	return 0
}

func (x *TradingAccountSummary) GetPreferedDeposit() float64 {
	if x != nil {
		return x.PreferedDeposit
	}
	return 0
}

func (x *TradingAccountSummary) GetCommonDeposit() float64 {
	if x != nil {
		return x.CommonDeposit
	}
	return 0
}

func (x *TradingAccountSummary) GetPreferedWithdraw() float64 {
	if x != nil {
		return x.PreferedWithdraw
	}
	return 0
}

func (x *TradingAccountSummary) GetCommonWithdraw() float64 {
	if x != nil {
		return x.CommonWithdraw
	}
	return 0
}

func (x *TradingAccountSummary) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *TradingAccountSummary) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type RspTradingAccountLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId     int32  `protobuf:"varint,1,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	ErrorMsg    []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	RequestId   int32  `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	IsLast      bool   `protobuf:"varint,4,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
	TradingDay  int32  `protobuf:"varint,5,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	LoginTime   string `protobuf:"bytes,6,opt,name=login_time,json=loginTime,proto3" json:"login_time,omitempty"`
	BrokerId    string `protobuf:"bytes,7,opt,name=broker_id,json=brokerId,proto3" json:"broker_id,omitempty"`
	UserId      string `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SystemName  string `protobuf:"bytes,9,opt,name=system_name,json=systemName,proto3" json:"system_name,omitempty"`
	FrontId     int32  `protobuf:"varint,10,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`
	SessionId   int32  `protobuf:"varint,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	MaxOrderRef string `protobuf:"bytes,12,opt,name=max_order_ref,json=maxOrderRef,proto3" json:"max_order_ref,omitempty"`
	SHFETime    string `protobuf:"bytes,13,opt,name=SHFE_time,json=SHFETime,proto3" json:"SHFE_time,omitempty"`
	DCETime     string `protobuf:"bytes,14,opt,name=DCE_time,json=DCETime,proto3" json:"DCE_time,omitempty"`
	CZCETime    string `protobuf:"bytes,15,opt,name=CZCE_time,json=CZCETime,proto3" json:"CZCE_time,omitempty"`
	FFEXTime    string `protobuf:"bytes,16,opt,name=FFEX_time,json=FFEXTime,proto3" json:"FFEX_time,omitempty"`
	INETime     string `protobuf:"bytes,17,opt,name=INE_time,json=INETime,proto3" json:"INE_time,omitempty"`
}

func (x *RspTradingAccountLogin) Reset() {
	*x = RspTradingAccountLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trading_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspTradingAccountLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspTradingAccountLogin) ProtoMessage() {}

func (x *RspTradingAccountLogin) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trading_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspTradingAccountLogin.ProtoReflect.Descriptor instead.
func (*RspTradingAccountLogin) Descriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{5}
}

func (x *RspTradingAccountLogin) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspTradingAccountLogin) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *RspTradingAccountLogin) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *RspTradingAccountLogin) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

func (x *RspTradingAccountLogin) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *RspTradingAccountLogin) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

func (x *RspTradingAccountLogin) GetBrokerId() string {
	if x != nil {
		return x.BrokerId
	}
	return ""
}

func (x *RspTradingAccountLogin) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RspTradingAccountLogin) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *RspTradingAccountLogin) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *RspTradingAccountLogin) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *RspTradingAccountLogin) GetMaxOrderRef() string {
	if x != nil {
		return x.MaxOrderRef
	}
	return ""
}

func (x *RspTradingAccountLogin) GetSHFETime() string {
	if x != nil {
		return x.SHFETime
	}
	return ""
}

func (x *RspTradingAccountLogin) GetDCETime() string {
	if x != nil {
		return x.DCETime
	}
	return ""
}

func (x *RspTradingAccountLogin) GetCZCETime() string {
	if x != nil {
		return x.CZCETime
	}
	return ""
}

func (x *RspTradingAccountLogin) GetFFEXTime() string {
	if x != nil {
		return x.FFEXTime
	}
	return ""
}

func (x *RspTradingAccountLogin) GetINETime() string {
	if x != nil {
		return x.INETime
	}
	return ""
}

type RspOrderInsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorId  int32  `protobuf:"varint,1,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	ErrorMsg []byte `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	OrderRef string `protobuf:"bytes,3,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`
}

func (x *RspOrderInsert) Reset() {
	*x = RspOrderInsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trading_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspOrderInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspOrderInsert) ProtoMessage() {}

func (x *RspOrderInsert) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trading_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspOrderInsert.ProtoReflect.Descriptor instead.
func (*RspOrderInsert) Descriptor() ([]byte, []int) {
	return file_goshare_trading_proto_rawDescGZIP(), []int{6}
}

func (x *RspOrderInsert) GetErrorId() int32 {
	if x != nil {
		return x.ErrorId
	}
	return 0
}

func (x *RspOrderInsert) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *RspOrderInsert) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

var File_goshare_trading_proto protoreflect.FileDescriptor

var file_goshare_trading_proto_rawDesc = []byte{
	0x0a, 0x15, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x22, 0xdc, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x16, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22,
	0x3d, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa6,
	0x03, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x33, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x33, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe0, 0x13, 0x0a, 0x15, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x5f,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x75,
	0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x78,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x78,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x74, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x74, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x74, 0x6d, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x74, 0x6d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x62, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x46, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x30, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x30,
	0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a,
	0x1b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x04,
	0x0a, 0x16, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a,
	0x09, 0x53, 0x48, 0x46, 0x45, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x48, 0x46, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x44, 0x43,
	0x45, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x43,
	0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x43, 0x5a, 0x43, 0x45, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x5a, 0x43, 0x45, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x46, 0x46, 0x45, 0x58, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x46, 0x45, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x49, 0x4e, 0x45, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x49, 0x4e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0e, 0x52, 0x73,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x2a, 0x8a, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x54, 0x5f, 0x43, 0x54, 0x50, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x5f, 0x43, 0x54, 0x50, 0x5f, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x54, 0x5f, 0x4c, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x54, 0x5f, 0x43, 0x41, 0x54, 0x53, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x54, 0x5f, 0x43,
	0x54, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x5f, 0x4b, 0x53, 0x4f, 0x50, 0x10, 0x07, 0x42, 0x30,
	0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d,
	0x65, 0x73, 0x73, 0x68, 0x65, 0x6e, 0x6a, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goshare_trading_proto_rawDescOnce sync.Once
	file_goshare_trading_proto_rawDescData = file_goshare_trading_proto_rawDesc
)

func file_goshare_trading_proto_rawDescGZIP() []byte {
	file_goshare_trading_proto_rawDescOnce.Do(func() {
		file_goshare_trading_proto_rawDescData = protoimpl.X.CompressGZIP(file_goshare_trading_proto_rawDescData)
	})
	return file_goshare_trading_proto_rawDescData
}

var file_goshare_trading_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_goshare_trading_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_goshare_trading_proto_goTypes = []interface{}{
	(RouteType)(0),                 // 0: goshare.RouteType
	(*TradingRoute)(nil),           // 1: goshare.TradingRoute
	(*TradingRouteList)(nil),       // 2: goshare.TradingRouteList
	(*TradingAccount)(nil),         // 3: goshare.TradingAccount
	(*TradingAccountList)(nil),     // 4: goshare.TradingAccountList
	(*TradingAccountSummary)(nil),  // 5: goshare.TradingAccountSummary
	(*RspTradingAccountLogin)(nil), // 6: goshare.RspTradingAccountLogin
	(*RspOrderInsert)(nil),         // 7: goshare.RspOrderInsert
}
var file_goshare_trading_proto_depIdxs = []int32{
	0, // 0: goshare.TradingRoute.route_type:type_name -> goshare.RouteType
	1, // 1: goshare.TradingRouteList.list:type_name -> goshare.TradingRoute
	1, // 2: goshare.TradingAccount.trading_route:type_name -> goshare.TradingRoute
	3, // 3: goshare.TradingAccountList.list:type_name -> goshare.TradingAccount
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_goshare_trading_proto_init() }
func file_goshare_trading_proto_init() {
	if File_goshare_trading_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goshare_trading_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_trading_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingRouteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_trading_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_trading_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingAccountList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_trading_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingAccountSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_trading_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspTradingAccountLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_trading_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspOrderInsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goshare_trading_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goshare_trading_proto_goTypes,
		DependencyIndexes: file_goshare_trading_proto_depIdxs,
		EnumInfos:         file_goshare_trading_proto_enumTypes,
		MessageInfos:      file_goshare_trading_proto_msgTypes,
	}.Build()
	File_goshare_trading_proto = out.File
	file_goshare_trading_proto_rawDesc = nil
	file_goshare_trading_proto_goTypes = nil
	file_goshare_trading_proto_depIdxs = nil
}
