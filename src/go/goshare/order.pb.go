// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: goshare/order.proto

package goshare

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 投机套保标志
type HedgeType int32

const (
	// 投机
	HedgeType_SPECULATION HedgeType = 0
	// 套利
	HedgeType_ARBITRAGE HedgeType = 1
	// 套保
	HedgeType_HEDGE HedgeType = 2
	// 投机2(特别标志)
	HedgeType_SPECULATION2 HedgeType = 3
)

// Enum value maps for HedgeType.
var (
	HedgeType_name = map[int32]string{
		0: "SPECULATION",
		1: "ARBITRAGE",
		2: "HEDGE",
		3: "SPECULATION2",
	}
	HedgeType_value = map[string]int32{
		"SPECULATION":  0,
		"ARBITRAGE":    1,
		"HEDGE":        2,
		"SPECULATION2": 3,
	}
)

func (x HedgeType) Enum() *HedgeType {
	p := new(HedgeType)
	*p = x
	return p
}

func (x HedgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HedgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[0].Descriptor()
}

func (HedgeType) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[0]
}

func (x HedgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HedgeType.Descriptor instead.
func (HedgeType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{0}
}

type OrderStatus int32

const (
	// 完全成交
	OrderStatus_DONE OrderStatus = 0
	// 部分成交还在队列中
	OrderStatus_PENDING_WITH_PARTIAL_DONE OrderStatus = 1
	// 部分成交且已撤单
	OrderStatus_CANCELED_WITH_PARTIAL_DONE OrderStatus = 2
	// 队列中
	OrderStatus_PENDING OrderStatus = 3
	// 已经撤单
	OrderStatus_CANCELED OrderStatus = 4
	// 未知
	OrderStatus_UNKOWN OrderStatus = 5
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "DONE",
		1: "PENDING_WITH_PARTIAL_DONE",
		2: "CANCELED_WITH_PARTIAL_DONE",
		3: "PENDING",
		4: "CANCELED",
		5: "UNKOWN",
	}
	OrderStatus_value = map[string]int32{
		"DONE":                       0,
		"PENDING_WITH_PARTIAL_DONE":  1,
		"CANCELED_WITH_PARTIAL_DONE": 2,
		"PENDING":                    3,
		"CANCELED":                   4,
		"UNKOWN":                     5,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[1].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[1]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{1}
}

type OrderPriceType int32

const (
	// 限价
	OrderPriceType_LIMIT_PRICE OrderPriceType = 0
	// 市价
	OrderPriceType_MARKET_PRICE OrderPriceType = 1
	// 最优价
	OrderPriceType_BEST_PRICE OrderPriceType = 2
	// 最新价
	OrderPriceType_LAST_PRICE OrderPriceType = 3
)

// Enum value maps for OrderPriceType.
var (
	OrderPriceType_name = map[int32]string{
		0: "LIMIT_PRICE",
		1: "MARKET_PRICE",
		2: "BEST_PRICE",
		3: "LAST_PRICE",
	}
	OrderPriceType_value = map[string]int32{
		"LIMIT_PRICE":  0,
		"MARKET_PRICE": 1,
		"BEST_PRICE":   2,
		"LAST_PRICE":   3,
	}
)

func (x OrderPriceType) Enum() *OrderPriceType {
	p := new(OrderPriceType)
	*p = x
	return p
}

func (x OrderPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[2].Descriptor()
}

func (OrderPriceType) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[2]
}

func (x OrderPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderPriceType.Descriptor instead.
func (OrderPriceType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{2}
}

type OffsetFlag int32

const (
	// 开仓
	OffsetFlag_OPEN OffsetFlag = 0
	// 平仓
	OffsetFlag_CLOSE OffsetFlag = 1
	// 强平
	OffsetFlag_FORCE_CLOSE OffsetFlag = 2
	// 平今
	OffsetFlag_CLOSE_TODAY OffsetFlag = 3
	// 平昨
	OffsetFlag_CLOSE_YESTERDAY OffsetFlag = 4
)

// Enum value maps for OffsetFlag.
var (
	OffsetFlag_name = map[int32]string{
		0: "OPEN",
		1: "CLOSE",
		2: "FORCE_CLOSE",
		3: "CLOSE_TODAY",
		4: "CLOSE_YESTERDAY",
	}
	OffsetFlag_value = map[string]int32{
		"OPEN":            0,
		"CLOSE":           1,
		"FORCE_CLOSE":     2,
		"CLOSE_TODAY":     3,
		"CLOSE_YESTERDAY": 4,
	}
)

func (x OffsetFlag) Enum() *OffsetFlag {
	p := new(OffsetFlag)
	*p = x
	return p
}

func (x OffsetFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OffsetFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[3].Descriptor()
}

func (OffsetFlag) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[3]
}

func (x OffsetFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OffsetFlag.Descriptor instead.
func (OffsetFlag) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{3}
}

// 报单方向
type DirectionType int32

const (
	DirectionType_LONG  DirectionType = 0
	DirectionType_SHORT DirectionType = 1
	DirectionType_NET   DirectionType = 2
)

// Enum value maps for DirectionType.
var (
	DirectionType_name = map[int32]string{
		0: "LONG",
		1: "SHORT",
		2: "NET",
	}
	DirectionType_value = map[string]int32{
		"LONG":  0,
		"SHORT": 1,
		"NET":   2,
	}
)

func (x DirectionType) Enum() *DirectionType {
	p := new(DirectionType)
	*p = x
	return p
}

func (x DirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[4].Descriptor()
}

func (DirectionType) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[4]
}

func (x DirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DirectionType.Descriptor instead.
func (DirectionType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{4}
}

// 组合方向
type CombDirectionType int32

const (
	CombDirectionType_COMB   CombDirectionType = 0
	CombDirectionType_UNCOMB CombDirectionType = 1
)

// Enum value maps for CombDirectionType.
var (
	CombDirectionType_name = map[int32]string{
		0: "COMB",
		1: "UNCOMB",
	}
	CombDirectionType_value = map[string]int32{
		"COMB":   0,
		"UNCOMB": 1,
	}
)

func (x CombDirectionType) Enum() *CombDirectionType {
	p := new(CombDirectionType)
	*p = x
	return p
}

func (x CombDirectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CombDirectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[5].Descriptor()
}

func (CombDirectionType) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[5]
}

func (x CombDirectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CombDirectionType.Descriptor instead.
func (CombDirectionType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{5}
}

// 强平类型
type ForceCloseReason int32

const (
	// 资金不足
	ForceCloseReason_NOT_ENOUGH_MARGIN ForceCloseReason = 0
	// 客户超仓
	ForceCloseReason_client_over_position_limit ForceCloseReason = 1
	// 会员超仓
	ForceCloseReason_broker_over_poisition_limit ForceCloseReason = 2
	// 违规
	ForceCloseReason_violation ForceCloseReason = 3
	// 其它
	ForceCloseReason_other ForceCloseReason = 4
	// 自然人临近交割
	ForceCloseReason_person_deliver ForceCloseReason = 5
)

// Enum value maps for ForceCloseReason.
var (
	ForceCloseReason_name = map[int32]string{
		0: "NOT_ENOUGH_MARGIN",
		1: "client_over_position_limit",
		2: "broker_over_poisition_limit",
		3: "violation",
		4: "other",
		5: "person_deliver",
	}
	ForceCloseReason_value = map[string]int32{
		"NOT_ENOUGH_MARGIN":           0,
		"client_over_position_limit":  1,
		"broker_over_poisition_limit": 2,
		"violation":                   3,
		"other":                       4,
		"person_deliver":              5,
	}
)

func (x ForceCloseReason) Enum() *ForceCloseReason {
	p := new(ForceCloseReason)
	*p = x
	return p
}

func (x ForceCloseReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceCloseReason) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[6].Descriptor()
}

func (ForceCloseReason) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[6]
}

func (x ForceCloseReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForceCloseReason.Descriptor instead.
func (ForceCloseReason) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{6}
}

// 报单来源
type OrderSourceType int32

const (
	// 客户
	OrderSourceType_CLIENT OrderSourceType = 0
	// 管理员
	OrderSourceType_ADMINISTRATOR OrderSourceType = 1
	// 风控
	OrderSourceType_RISK_SRV OrderSourceType = 2
	// 手机端
	OrderSourceType_MOBILE OrderSourceType = 3
	// PC端
	OrderSourceType_PC OrderSourceType = 4
	// 结算衍生
	OrderSourceType_SETTLEMENT_DERIVED OrderSourceType = 5
	// 套利单衍生
	OrderSourceType_COMBINATION_DERIVED OrderSourceType = 6
	// 多路径平仓衍生
	OrderSourceType_MULTI_ROUTE_CLOSE_DERIVED OrderSourceType = 7
	// 分红送股
	OrderSourceType_PLACEMENT_SHARE OrderSourceType = 8
	// 回购操作
	OrderSourceType_REPURCHASE OrderSourceType = 9
	// CTP上传
	OrderSourceType_CTP_UPLOAD OrderSourceType = 10
)

// Enum value maps for OrderSourceType.
var (
	OrderSourceType_name = map[int32]string{
		0:  "CLIENT",
		1:  "ADMINISTRATOR",
		2:  "RISK_SRV",
		3:  "MOBILE",
		4:  "PC",
		5:  "SETTLEMENT_DERIVED",
		6:  "COMBINATION_DERIVED",
		7:  "MULTI_ROUTE_CLOSE_DERIVED",
		8:  "PLACEMENT_SHARE",
		9:  "REPURCHASE",
		10: "CTP_UPLOAD",
	}
	OrderSourceType_value = map[string]int32{
		"CLIENT":                    0,
		"ADMINISTRATOR":             1,
		"RISK_SRV":                  2,
		"MOBILE":                    3,
		"PC":                        4,
		"SETTLEMENT_DERIVED":        5,
		"COMBINATION_DERIVED":       6,
		"MULTI_ROUTE_CLOSE_DERIVED": 7,
		"PLACEMENT_SHARE":           8,
		"REPURCHASE":                9,
		"CTP_UPLOAD":                10,
	}
)

func (x OrderSourceType) Enum() *OrderSourceType {
	p := new(OrderSourceType)
	*p = x
	return p
}

func (x OrderSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_order_proto_enumTypes[7].Descriptor()
}

func (OrderSourceType) Type() protoreflect.EnumType {
	return &file_goshare_order_proto_enumTypes[7]
}

func (x OrderSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSourceType.Descriptor instead.
func (OrderSourceType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{7}
}

// 委托
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户
	TaId                string        `protobuf:"bytes,2,opt,name=ta_id,json=taId,proto3" json:"ta_id,omitempty"`                                                    // taid
	BuId                string        `protobuf:"bytes,3,opt,name=bu_id,json=buId,proto3" json:"bu_id,omitempty"`                                                    // buid
	Exchange            string        `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                        // 交易所
	Symbol              string        `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                            // 合约
	Product             string        `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`                                                          // 品种
	OrderRef            string        `protobuf:"bytes,7,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`                                        // ID
	Direction           DirectionType `protobuf:"varint,8,opt,name=direction,proto3,enum=goshare.DirectionType" json:"direction,omitempty"`                          // 方向
	Offset              int32         `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`                                                           // 开平
	Price               float64       `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`                                                           // 限价
	Volume              int32         `protobuf:"varint,11,opt,name=volume,proto3" json:"volume,omitempty"`                                                          // 数量
	VolumeTraded        int32         `protobuf:"varint,12,opt,name=volume_traded,json=volumeTraded,proto3" json:"volume_traded,omitempty"`                          // 成交数量
	VolumeCanceled      int32         `protobuf:"varint,13,opt,name=volume_canceled,json=volumeCanceled,proto3" json:"volume_canceled,omitempty"`                    // 撤单数量
	Status              int32         `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`                                                          // 状态
	PriceType           int32         `protobuf:"varint,15,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`                                   // 价格类型
	FrozenCommission    float64       `protobuf:"fixed64,16,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`             // 冻结手续费
	SendOrderTime       int64         `protobuf:"varint,17,opt,name=send_order_time,json=sendOrderTime,proto3" json:"send_order_time,omitempty"`                     // 发送时间（成交时间)
	SendOrderTradingDay int32         `protobuf:"varint,18,opt,name=send_order_trading_day,json=sendOrderTradingDay,proto3" json:"send_order_trading_day,omitempty"` // 交易日
	StatusMsg           string        `protobuf:"bytes,19,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`                                    // 备注
	ForceCloseType      int32         `protobuf:"varint,20,opt,name=force_close_type,json=forceCloseType,proto3" json:"force_close_type,omitempty"`                  // 强平类型
	OrderSourceType     int32         `protobuf:"varint,21,opt,name=order_source_type,json=orderSourceType,proto3" json:"order_source_type,omitempty"`               // 来源
	HedgeType           int32         `protobuf:"varint,22,opt,name=hedge_type,json=hedgeType,proto3" json:"hedge_type,omitempty"`                                   // 投机套保类型
	UserProductInfo     string        `protobuf:"bytes,23,opt,name=user_product_info,json=userProductInfo,proto3" json:"user_product_info,omitempty"`                // 产品标识
	ExchangeOrderId     string        `protobuf:"bytes,24,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`                // 交易所ID
	TimeConditionType   int32         `protobuf:"varint,25,opt,name=time_condition_type,json=timeConditionType,proto3" json:"time_condition_type,omitempty"`         // 有效期类型
	IsPending           bool          `protobuf:"varint,26,opt,name=is_pending,json=isPending,proto3" json:"is_pending,omitempty"`                                   // 是否继续变化,优化手续费计算
	Commission          float64       `protobuf:"fixed64,27,opt,name=commission,proto3" json:"commission,omitempty"`                                                 // 委托收费
	ProductType         string        `protobuf:"bytes,28,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`                              // 交易品种类型
	TradedAmount        float64       `protobuf:"fixed64,29,opt,name=traded_amount,json=tradedAmount,proto3" json:"traded_amount,omitempty"`                         // 成交金额
	Multiple            int32         `protobuf:"varint,30,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                      // 合约乘数
	PriceTick           float64       `protobuf:"fixed64,31,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`                                  // 最小变动价位
	LastPrice           float64       `protobuf:"fixed64,32,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`                                  // 最新价
	FrozenMargin        float64       `protobuf:"fixed64,33,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`                         // 冻结合计
	SymbolName          string        `protobuf:"bytes,34,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`                                 // 合约名称
	Reason              string        `protobuf:"bytes,35,opt,name=reason,proto3" json:"reason,omitempty"`                                                           // 发送原因
	StampTax            float64       `protobuf:"fixed64,36,opt,name=stamp_tax,json=stampTax,proto3" json:"stamp_tax,omitempty"`                                     // 印花税
	TransferFee         float64       `protobuf:"fixed64,37,opt,name=transfer_fee,json=transferFee,proto3" json:"transfer_fee,omitempty"`                            // 过户费
	UserName            string        `protobuf:"bytes,38,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                       // 用户名
	Ip                  string        `protobuf:"bytes,39,opt,name=ip,proto3" json:"ip,omitempty"`                                                                   // 客户端ip
	Mac                 string        `protobuf:"bytes,40,opt,name=mac,proto3" json:"mac,omitempty"`                                                                 // 客户端mac
	Branch              string        `protobuf:"bytes,41,opt,name=branch,proto3" json:"branch,omitempty"`                                                           // 部门
	BranchName          string        `protobuf:"bytes,42,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`                                 // 部门名称
	BuType              int32         `protobuf:"varint,43,opt,name=bu_type,json=buType,proto3" json:"bu_type,omitempty"`                                            // 单元类型
	Debug               string        `protobuf:"bytes,44,opt,name=debug,proto3" json:"debug,omitempty"`                                                             // 调试信息
	SessionId           int32         `protobuf:"varint,45,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                   // sessionid
	ClientTag           int64         `protobuf:"varint,46,opt,name=client_tag,json=clientTag,proto3" json:"client_tag,omitempty"`                                   // client tag
	FrontId             int32         `protobuf:"varint,47,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`                                         // front id
	RequestId           int32         `protobuf:"varint,48,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                                   // request id
	LocalOrderSeq       int32         `protobuf:"varint,49,opt,name=local_order_seq,json=localOrderSeq,proto3" json:"local_order_seq,omitempty"`                     // local order seq
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Order) GetTaId() string {
	if x != nil {
		return x.TaId
	}
	return ""
}

func (x *Order) GetBuId() string {
	if x != nil {
		return x.BuId
	}
	return ""
}

func (x *Order) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Order) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Order) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Order) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *Order) GetDirection() DirectionType {
	if x != nil {
		return x.Direction
	}
	return DirectionType_LONG
}

func (x *Order) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Order) GetVolumeTraded() int32 {
	if x != nil {
		return x.VolumeTraded
	}
	return 0
}

func (x *Order) GetVolumeCanceled() int32 {
	if x != nil {
		return x.VolumeCanceled
	}
	return 0
}

func (x *Order) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Order) GetPriceType() int32 {
	if x != nil {
		return x.PriceType
	}
	return 0
}

func (x *Order) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *Order) GetSendOrderTime() int64 {
	if x != nil {
		return x.SendOrderTime
	}
	return 0
}

func (x *Order) GetSendOrderTradingDay() int32 {
	if x != nil {
		return x.SendOrderTradingDay
	}
	return 0
}

func (x *Order) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *Order) GetForceCloseType() int32 {
	if x != nil {
		return x.ForceCloseType
	}
	return 0
}

func (x *Order) GetOrderSourceType() int32 {
	if x != nil {
		return x.OrderSourceType
	}
	return 0
}

func (x *Order) GetHedgeType() int32 {
	if x != nil {
		return x.HedgeType
	}
	return 0
}

func (x *Order) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *Order) GetExchangeOrderId() string {
	if x != nil {
		return x.ExchangeOrderId
	}
	return ""
}

func (x *Order) GetTimeConditionType() int32 {
	if x != nil {
		return x.TimeConditionType
	}
	return 0
}

func (x *Order) GetIsPending() bool {
	if x != nil {
		return x.IsPending
	}
	return false
}

func (x *Order) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *Order) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *Order) GetTradedAmount() float64 {
	if x != nil {
		return x.TradedAmount
	}
	return 0
}

func (x *Order) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *Order) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *Order) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *Order) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *Order) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *Order) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Order) GetStampTax() float64 {
	if x != nil {
		return x.StampTax
	}
	return 0
}

func (x *Order) GetTransferFee() float64 {
	if x != nil {
		return x.TransferFee
	}
	return 0
}

func (x *Order) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Order) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Order) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Order) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Order) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Order) GetBuType() int32 {
	if x != nil {
		return x.BuType
	}
	return 0
}

func (x *Order) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

func (x *Order) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Order) GetClientTag() int64 {
	if x != nil {
		return x.ClientTag
	}
	return 0
}

func (x *Order) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *Order) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *Order) GetLocalOrderSeq() int32 {
	if x != nil {
		return x.LocalOrderSeq
	}
	return 0
}

type OrderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Order `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OrderList) Reset() {
	*x = OrderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderList) ProtoMessage() {}

func (x *OrderList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderList.ProtoReflect.Descriptor instead.
func (*OrderList) Descriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderList) GetList() []*Order {
	if x != nil {
		return x.List
	}
	return nil
}

type JointOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalOrder    *Order `protobuf:"bytes,1,opt,name=local_order,json=localOrder,proto3" json:"local_order,omitempty"`
	ExchangeOrder *Order `protobuf:"bytes,2,opt,name=exchange_order,json=exchangeOrder,proto3" json:"exchange_order,omitempty"`
}

func (x *JointOrder) Reset() {
	*x = JointOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JointOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JointOrder) ProtoMessage() {}

func (x *JointOrder) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JointOrder.ProtoReflect.Descriptor instead.
func (*JointOrder) Descriptor() ([]byte, []int) {
	return file_goshare_order_proto_rawDescGZIP(), []int{2}
}

func (x *JointOrder) GetLocalOrder() *Order {
	if x != nil {
		return x.LocalOrder
	}
	return nil
}

func (x *JointOrder) GetExchangeOrder() *Order {
	if x != nil {
		return x.ExchangeOrder
	}
	return nil
}

var File_goshare_order_proto protoreflect.FileDescriptor

var file_goshare_order_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22, 0xa2,
	0x0c, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x64, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x61,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x71, 0x22, 0x2f, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2a, 0x48, 0x0a, 0x09, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x45, 0x43, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x52, 0x42, 0x49,
	0x54, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x44, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x32, 0x10, 0x03, 0x2a, 0x7d, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4b, 0x4f, 0x57,
	0x4e, 0x10, 0x05, 0x2a, 0x53, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x58, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59,
	0x10, 0x04, 0x2a, 0x2d, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x54, 0x10,
	0x02, 0x2a, 0x29, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4d, 0x42, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x42, 0x10, 0x01, 0x2a, 0x98, 0x01, 0x0a,
	0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x10, 0x05, 0x2a, 0xd7, 0x01, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x49,
	0x53, 0x4b, 0x5f, 0x53, 0x52, 0x56, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49,
	0x4c, 0x45, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10,
	0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x50, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x0a, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6a, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x65, 0x6e, 0x6a, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goshare_order_proto_rawDescOnce sync.Once
	file_goshare_order_proto_rawDescData = file_goshare_order_proto_rawDesc
)

func file_goshare_order_proto_rawDescGZIP() []byte {
	file_goshare_order_proto_rawDescOnce.Do(func() {
		file_goshare_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_goshare_order_proto_rawDescData)
	})
	return file_goshare_order_proto_rawDescData
}

var file_goshare_order_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_goshare_order_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_goshare_order_proto_goTypes = []interface{}{
	(HedgeType)(0),         // 0: goshare.HedgeType
	(OrderStatus)(0),       // 1: goshare.OrderStatus
	(OrderPriceType)(0),    // 2: goshare.OrderPriceType
	(OffsetFlag)(0),        // 3: goshare.OffsetFlag
	(DirectionType)(0),     // 4: goshare.DirectionType
	(CombDirectionType)(0), // 5: goshare.CombDirectionType
	(ForceCloseReason)(0),  // 6: goshare.ForceCloseReason
	(OrderSourceType)(0),   // 7: goshare.OrderSourceType
	(*Order)(nil),          // 8: goshare.Order
	(*OrderList)(nil),      // 9: goshare.OrderList
	(*JointOrder)(nil),     // 10: goshare.JointOrder
}
var file_goshare_order_proto_depIdxs = []int32{
	4, // 0: goshare.Order.direction:type_name -> goshare.DirectionType
	8, // 1: goshare.OrderList.list:type_name -> goshare.Order
	8, // 2: goshare.JointOrder.local_order:type_name -> goshare.Order
	8, // 3: goshare.JointOrder.exchange_order:type_name -> goshare.Order
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_goshare_order_proto_init() }
func file_goshare_order_proto_init() {
	if File_goshare_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goshare_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JointOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goshare_order_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goshare_order_proto_goTypes,
		DependencyIndexes: file_goshare_order_proto_depIdxs,
		EnumInfos:         file_goshare_order_proto_enumTypes,
		MessageInfos:      file_goshare_order_proto_msgTypes,
	}.Build()
	File_goshare_order_proto = out.File
	file_goshare_order_proto_rawDesc = nil
	file_goshare_order_proto_goTypes = nil
	file_goshare_order_proto_depIdxs = nil
}
