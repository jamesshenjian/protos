// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: goshare/instrument.proto

package goshare

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 品种类型
type ProductType int32

const (
	ProductType_UNKOWN_PRODUCT ProductType = 0 // 未知
	ProductType_FUTURE         ProductType = 1 // 期货
	ProductType_STOCK          ProductType = 2 // 股票
	ProductType_BOND           ProductType = 3 // 债券
	ProductType_COMBINATION    ProductType = 4 // 组合
	ProductType_OPTION         ProductType = 5 // 期权
	ProductType_FUTURE_OPTION  ProductType = 6 // 期货期权
	ProductType_SPOT_OPTION    ProductType = 7 // 现货期权
	ProductType_SSE_ETF_OPTION ProductType = 8 // 上证50ETF期权
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "UNKOWN_PRODUCT",
		1: "FUTURE",
		2: "STOCK",
		3: "BOND",
		4: "COMBINATION",
		5: "OPTION",
		6: "FUTURE_OPTION",
		7: "SPOT_OPTION",
		8: "SSE_ETF_OPTION",
	}
	ProductType_value = map[string]int32{
		"UNKOWN_PRODUCT": 0,
		"FUTURE":         1,
		"STOCK":          2,
		"BOND":           3,
		"COMBINATION":    4,
		"OPTION":         5,
		"FUTURE_OPTION":  6,
		"SPOT_OPTION":    7,
		"SSE_ETF_OPTION": 8,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_instrument_proto_enumTypes[0].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_goshare_instrument_proto_enumTypes[0]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{0}
}

type CallPutType int32

const (
	CallPutType_CALL CallPutType = 0
	CallPutType_PUT  CallPutType = 1
)

// Enum value maps for CallPutType.
var (
	CallPutType_name = map[int32]string{
		0: "CALL",
		1: "PUT",
	}
	CallPutType_value = map[string]int32{
		"CALL": 0,
		"PUT":  1,
	}
)

func (x CallPutType) Enum() *CallPutType {
	p := new(CallPutType)
	*p = x
	return p
}

func (x CallPutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallPutType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_instrument_proto_enumTypes[1].Descriptor()
}

func (CallPutType) Type() protoreflect.EnumType {
	return &file_goshare_instrument_proto_enumTypes[1]
}

func (x CallPutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallPutType.Descriptor instead.
func (CallPutType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{1}
}

// 合约组
type SymbolGroupType int32

const (
	SymbolGroupType_CTP_FUTURE_ALL      SymbolGroupType = 0
	SymbolGroupType_CTP_FUTURE_FUTURE   SymbolGroupType = 1
	SymbolGroupType_CTP_FUTURE_OPTION   SymbolGroupType = 2
	SymbolGroupType_CTP_FUTURE_COMBINE  SymbolGroupType = 3
	SymbolGroupType_CTP_SOPT_ALL        SymbolGroupType = 4
	SymbolGroupType_CTP_SOPT_ETF_OPTION SymbolGroupType = 5
	SymbolGroupType_CTP_SOPT_SSE_STOCK  SymbolGroupType = 6
	SymbolGroupType_CTP_SOPT_SZE_STOCK  SymbolGroupType = 7
)

// Enum value maps for SymbolGroupType.
var (
	SymbolGroupType_name = map[int32]string{
		0: "CTP_FUTURE_ALL",
		1: "CTP_FUTURE_FUTURE",
		2: "CTP_FUTURE_OPTION",
		3: "CTP_FUTURE_COMBINE",
		4: "CTP_SOPT_ALL",
		5: "CTP_SOPT_ETF_OPTION",
		6: "CTP_SOPT_SSE_STOCK",
		7: "CTP_SOPT_SZE_STOCK",
	}
	SymbolGroupType_value = map[string]int32{
		"CTP_FUTURE_ALL":      0,
		"CTP_FUTURE_FUTURE":   1,
		"CTP_FUTURE_OPTION":   2,
		"CTP_FUTURE_COMBINE":  3,
		"CTP_SOPT_ALL":        4,
		"CTP_SOPT_ETF_OPTION": 5,
		"CTP_SOPT_SSE_STOCK":  6,
		"CTP_SOPT_SZE_STOCK":  7,
	}
)

func (x SymbolGroupType) Enum() *SymbolGroupType {
	p := new(SymbolGroupType)
	*p = x
	return p
}

func (x SymbolGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SymbolGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_instrument_proto_enumTypes[2].Descriptor()
}

func (SymbolGroupType) Type() protoreflect.EnumType {
	return &file_goshare_instrument_proto_enumTypes[2]
}

func (x SymbolGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SymbolGroupType.Descriptor instead.
func (SymbolGroupType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{2}
}

// 市场状态
type MarketStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`         // 时点 time.Unix()%86400
	Send     bool  `protobuf:"varint,2,opt,name=send,proto3" json:"send,omitempty"`         // 允许发单
	Cancel   bool  `protobuf:"varint,3,opt,name=cancel,proto3" json:"cancel,omitempty"`     // 可以撤单
	Matching bool  `protobuf:"varint,4,opt,name=matching,proto3" json:"matching,omitempty"` // 撮合时段
}

func (x *MarketStatus) Reset() {
	*x = MarketStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_instrument_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketStatus) ProtoMessage() {}

func (x *MarketStatus) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_instrument_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketStatus.ProtoReflect.Descriptor instead.
func (*MarketStatus) Descriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{0}
}

func (x *MarketStatus) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MarketStatus) GetSend() bool {
	if x != nil {
		return x.Send
	}
	return false
}

func (x *MarketStatus) GetCancel() bool {
	if x != nil {
		return x.Cancel
	}
	return false
}

func (x *MarketStatus) GetMatching() bool {
	if x != nil {
		return x.Matching
	}
	return false
}

// 合约属性
type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange                    string          `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                                                // 交易所
	Symbol                      string          `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                                                    // 合约代码
	Product                     string          `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`                                                                                  // 品种
	Multiple                    int32           `protobuf:"varint,4,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                                               // 合约乘数
	PriceTick                   float64         `protobuf:"fixed64,5,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`                                                           // 最小变动价位
	Name                        string          `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                                                        // 合约名称
	PositionRank                int32           `protobuf:"varint,7,opt,name=position_rank,json=positionRank,proto3" json:"position_rank,omitempty"`                                                   // 品种持仓排名
	UpdateTime                  int64           `protobuf:"varint,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                                         // 更新时间
	TradingDay                  int32           `protobuf:"varint,9,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                                         // 当前交易日
	UpperLimit                  float64         `protobuf:"fixed64,10,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`                                                       // 涨停
	LowerLimit                  float64         `protobuf:"fixed64,11,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`                                                       // 跌停
	PreClose                    float64         `protobuf:"fixed64,12,opt,name=pre_close,json=preClose,proto3" json:"pre_close,omitempty"`                                                             // 昨收
	PreSettlement               float64         `protobuf:"fixed64,13,opt,name=pre_settlement,json=preSettlement,proto3" json:"pre_settlement,omitempty"`                                              // 昨结
	PreVolume                   int32           `protobuf:"varint,14,opt,name=pre_volume,json=preVolume,proto3" json:"pre_volume,omitempty"`                                                           // 昨成交
	PrePosition                 int32           `protobuf:"varint,15,opt,name=pre_position,json=prePosition,proto3" json:"pre_position,omitempty"`                                                     // 昨持仓
	SettlementPrice             float64         `protobuf:"fixed64,16,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`                                        // 结算价
	CreateDate                  int32           `protobuf:"varint,17,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`                                                        // 创设日期
	OpenDate                    int32           `protobuf:"varint,18,opt,name=open_date,json=openDate,proto3" json:"open_date,omitempty"`                                                              // 开盘日期
	ExpireDate                  int32           `protobuf:"varint,19,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                                        // 到期日
	StartDeliverDate            int32           `protobuf:"varint,20,opt,name=start_deliver_date,json=startDeliverDate,proto3" json:"start_deliver_date,omitempty"`                                    // 开始交割日
	EndDeliverDate              int32           `protobuf:"varint,21,opt,name=end_deliver_date,json=endDeliverDate,proto3" json:"end_deliver_date,omitempty"`                                          // 结束交割日
	IsCloseTodayAllowed         bool            `protobuf:"varint,22,opt,name=is_close_today_allowed,json=isCloseTodayAllowed,proto3" json:"is_close_today_allowed,omitempty"`                         // 允许当日平仓
	MaxMarketOrderVolume        int32           `protobuf:"varint,23,opt,name=max_market_order_volume,json=maxMarketOrderVolume,proto3" json:"max_market_order_volume,omitempty"`                      // 市价单单笔最大单量
	MinMarketOrderVolume        int32           `protobuf:"varint,24,opt,name=min_market_order_volume,json=minMarketOrderVolume,proto3" json:"min_market_order_volume,omitempty"`                      // 市价单单笔最小单量
	MaxLimitOrderVolume         int32           `protobuf:"varint,25,opt,name=max_limit_order_volume,json=maxLimitOrderVolume,proto3" json:"max_limit_order_volume,omitempty"`                         // 限价单单笔最大单量
	MinLimitOrderVolume         int32           `protobuf:"varint,26,opt,name=min_limit_order_volume,json=minLimitOrderVolume,proto3" json:"min_limit_order_volume,omitempty"`                         // 限价单单笔最小单量
	UnderlyingSymbol            string          `protobuf:"bytes,27,opt,name=underlying_symbol,json=underlyingSymbol,proto3" json:"underlying_symbol,omitempty"`                                       // 基础合约
	StrikePrice                 float64         `protobuf:"fixed64,28,opt,name=strike_price,json=strikePrice,proto3" json:"strike_price,omitempty"`                                                    // 履约价
	CallOrPut                   string          `protobuf:"bytes,29,opt,name=call_or_put,json=callOrPut,proto3" json:"call_or_put,omitempty"`                                                          // 看涨看跌
	UnderlyingMultiple          float64         `protobuf:"fixed64,30,opt,name=underlying_multiple,json=underlyingMultiple,proto3" json:"underlying_multiple,omitempty"`                               // 基础合约乘数
	MinBuyVolume                int32           `protobuf:"varint,31,opt,name=min_buy_volume,json=minBuyVolume,proto3" json:"min_buy_volume,omitempty"`                                                // 最小买入数量
	MinSellVolume               int32           `protobuf:"varint,32,opt,name=min_sell_volume,json=minSellVolume,proto3" json:"min_sell_volume,omitempty"`                                             // 最小卖出数量
	IsTrading                   bool            `protobuf:"varint,33,opt,name=is_trading,json=isTrading,proto3" json:"is_trading,omitempty"`                                                           // 是否还在交易
	ExerciseDateType            string          `protobuf:"bytes,34,opt,name=exercise_date_type,json=exerciseDateType,proto3" json:"exercise_date_type,omitempty"`                                     // 行权日类型. 美式， 欧式...
	ProductName                 string          `protobuf:"bytes,35,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                                                      // 品种名称
	ProductType                 int32           `protobuf:"varint,36,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`                                                     // 品种类型
	ProductClass                string          `protobuf:"bytes,37,opt,name=product_class,json=productClass,proto3" json:"product_class,omitempty"`                                                   // 品种板块
	DistinguishPositionTimeType bool            `protobuf:"varint,38,opt,name=distinguish_position_time_type,json=distinguishPositionTimeType,proto3" json:"distinguish_position_time_type,omitempty"` // 是否区别昨仓和今仓
	TimeRule                    []*MarketStatus `protobuf:"bytes,39,rep,name=time_rule,json=timeRule,proto3" json:"time_rule,omitempty"`                                                               // 各时段交易状态
	LeftDays                    int32           `protobuf:"varint,40,opt,name=left_days,json=leftDays,proto3" json:"left_days,omitempty"`                                                              // 剩余交易天数
	MonthGroup                  string          `protobuf:"bytes,41,opt,name=month_group,json=monthGroup,proto3" json:"month_group,omitempty"`                                                         // 期权月份
	CallPutType                 CallPutType     `protobuf:"varint,42,opt,name=call_put_type,json=callPutType,proto3,enum=goshare.CallPutType" json:"call_put_type,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_instrument_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_instrument_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{1}
}

func (x *Instrument) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Instrument) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Instrument) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Instrument) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *Instrument) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *Instrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Instrument) GetPositionRank() int32 {
	if x != nil {
		return x.PositionRank
	}
	return 0
}

func (x *Instrument) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Instrument) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *Instrument) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *Instrument) GetLowerLimit() float64 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *Instrument) GetPreClose() float64 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *Instrument) GetPreSettlement() float64 {
	if x != nil {
		return x.PreSettlement
	}
	return 0
}

func (x *Instrument) GetPreVolume() int32 {
	if x != nil {
		return x.PreVolume
	}
	return 0
}

func (x *Instrument) GetPrePosition() int32 {
	if x != nil {
		return x.PrePosition
	}
	return 0
}

func (x *Instrument) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *Instrument) GetCreateDate() int32 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *Instrument) GetOpenDate() int32 {
	if x != nil {
		return x.OpenDate
	}
	return 0
}

func (x *Instrument) GetExpireDate() int32 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *Instrument) GetStartDeliverDate() int32 {
	if x != nil {
		return x.StartDeliverDate
	}
	return 0
}

func (x *Instrument) GetEndDeliverDate() int32 {
	if x != nil {
		return x.EndDeliverDate
	}
	return 0
}

func (x *Instrument) GetIsCloseTodayAllowed() bool {
	if x != nil {
		return x.IsCloseTodayAllowed
	}
	return false
}

func (x *Instrument) GetMaxMarketOrderVolume() int32 {
	if x != nil {
		return x.MaxMarketOrderVolume
	}
	return 0
}

func (x *Instrument) GetMinMarketOrderVolume() int32 {
	if x != nil {
		return x.MinMarketOrderVolume
	}
	return 0
}

func (x *Instrument) GetMaxLimitOrderVolume() int32 {
	if x != nil {
		return x.MaxLimitOrderVolume
	}
	return 0
}

func (x *Instrument) GetMinLimitOrderVolume() int32 {
	if x != nil {
		return x.MinLimitOrderVolume
	}
	return 0
}

func (x *Instrument) GetUnderlyingSymbol() string {
	if x != nil {
		return x.UnderlyingSymbol
	}
	return ""
}

func (x *Instrument) GetStrikePrice() float64 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *Instrument) GetCallOrPut() string {
	if x != nil {
		return x.CallOrPut
	}
	return ""
}

func (x *Instrument) GetUnderlyingMultiple() float64 {
	if x != nil {
		return x.UnderlyingMultiple
	}
	return 0
}

func (x *Instrument) GetMinBuyVolume() int32 {
	if x != nil {
		return x.MinBuyVolume
	}
	return 0
}

func (x *Instrument) GetMinSellVolume() int32 {
	if x != nil {
		return x.MinSellVolume
	}
	return 0
}

func (x *Instrument) GetIsTrading() bool {
	if x != nil {
		return x.IsTrading
	}
	return false
}

func (x *Instrument) GetExerciseDateType() string {
	if x != nil {
		return x.ExerciseDateType
	}
	return ""
}

func (x *Instrument) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Instrument) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *Instrument) GetProductClass() string {
	if x != nil {
		return x.ProductClass
	}
	return ""
}

func (x *Instrument) GetDistinguishPositionTimeType() bool {
	if x != nil {
		return x.DistinguishPositionTimeType
	}
	return false
}

func (x *Instrument) GetTimeRule() []*MarketStatus {
	if x != nil {
		return x.TimeRule
	}
	return nil
}

func (x *Instrument) GetLeftDays() int32 {
	if x != nil {
		return x.LeftDays
	}
	return 0
}

func (x *Instrument) GetMonthGroup() string {
	if x != nil {
		return x.MonthGroup
	}
	return ""
}

func (x *Instrument) GetCallPutType() CallPutType {
	if x != nil {
		return x.CallPutType
	}
	return CallPutType_CALL
}

// 合约列表
type InstrumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Instrument `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *InstrumentList) Reset() {
	*x = InstrumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_instrument_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentList) ProtoMessage() {}

func (x *InstrumentList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_instrument_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentList.ProtoReflect.Descriptor instead.
func (*InstrumentList) Descriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{2}
}

func (x *InstrumentList) GetList() []*Instrument {
	if x != nil {
		return x.List
	}
	return nil
}

// 期权按月分组
type OptionMonthGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange    string   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Product     string   `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	Strike      string   `protobuf:"bytes,3,opt,name=strike,proto3" json:"strike,omitempty"`
	MonthGroup  string   `protobuf:"bytes,4,opt,name=month_group,json=monthGroup,proto3" json:"month_group,omitempty"`
	LeftDays    int32    `protobuf:"varint,5,opt,name=left_days,json=leftDays,proto3" json:"left_days,omitempty"`
	ProductName string   `protobuf:"bytes,6,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Instruments []string `protobuf:"bytes,7,rep,name=instruments,proto3" json:"instruments,omitempty"`
}

func (x *OptionMonthGroup) Reset() {
	*x = OptionMonthGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_instrument_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionMonthGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMonthGroup) ProtoMessage() {}

func (x *OptionMonthGroup) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_instrument_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMonthGroup.ProtoReflect.Descriptor instead.
func (*OptionMonthGroup) Descriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{3}
}

func (x *OptionMonthGroup) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OptionMonthGroup) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *OptionMonthGroup) GetStrike() string {
	if x != nil {
		return x.Strike
	}
	return ""
}

func (x *OptionMonthGroup) GetMonthGroup() string {
	if x != nil {
		return x.MonthGroup
	}
	return ""
}

func (x *OptionMonthGroup) GetLeftDays() int32 {
	if x != nil {
		return x.LeftDays
	}
	return 0
}

func (x *OptionMonthGroup) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OptionMonthGroup) GetInstruments() []string {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// 期权组列表
type OptionMonthGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string              `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Product  string              `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	List     []*OptionMonthGroup `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OptionMonthGroupList) Reset() {
	*x = OptionMonthGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_instrument_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionMonthGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMonthGroupList) ProtoMessage() {}

func (x *OptionMonthGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_instrument_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMonthGroupList.ProtoReflect.Descriptor instead.
func (*OptionMonthGroupList) Descriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{4}
}

func (x *OptionMonthGroupList) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OptionMonthGroupList) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *OptionMonthGroupList) GetList() []*OptionMonthGroup {
	if x != nil {
		return x.List
	}
	return nil
}

// 合约
type UniqueSymbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *UniqueSymbol) Reset() {
	*x = UniqueSymbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_instrument_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueSymbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueSymbol) ProtoMessage() {}

func (x *UniqueSymbol) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_instrument_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueSymbol.ProtoReflect.Descriptor instead.
func (*UniqueSymbol) Descriptor() ([]byte, []int) {
	return file_goshare_instrument_proto_rawDescGZIP(), []int{5}
}

func (x *UniqueSymbol) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *UniqueSymbol) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

var File_goshare_instrument_proto protoreflect.FileDescriptor

var file_goshare_instrument_proto_rawDesc = []byte{
	0x0a, 0x18, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x22, 0x6a, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x22,
	0xdf, 0x0c, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x6e,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x72, 0x50, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x72, 0x63,
	0x69, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x1e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66,
	0x74, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x39, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a,
	0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x61, 0x79, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x7b, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x42, 0x0a, 0x0c, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x2a, 0x97, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x55, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x42,
	0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x4f, 0x54,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x53, 0x45,
	0x5f, 0x45, 0x54, 0x46, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x2a, 0x20, 0x0a,
	0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x01, 0x2a,
	0xc6, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x54, 0x50, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x54, 0x50, 0x5f, 0x46,
	0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x54, 0x50, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x54, 0x50, 0x5f, 0x46, 0x55, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x50, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x50, 0x54, 0x5f, 0x45, 0x54, 0x46, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x54, 0x50, 0x5f,
	0x53, 0x4f, 0x50, 0x54, 0x5f, 0x53, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x06,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x54, 0x50, 0x5f, 0x53, 0x4f, 0x50, 0x54, 0x5f, 0x53, 0x5a, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x07, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x65, 0x6e,
	0x6a, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f,
	0x67, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_goshare_instrument_proto_rawDescOnce sync.Once
	file_goshare_instrument_proto_rawDescData = file_goshare_instrument_proto_rawDesc
)

func file_goshare_instrument_proto_rawDescGZIP() []byte {
	file_goshare_instrument_proto_rawDescOnce.Do(func() {
		file_goshare_instrument_proto_rawDescData = protoimpl.X.CompressGZIP(file_goshare_instrument_proto_rawDescData)
	})
	return file_goshare_instrument_proto_rawDescData
}

var file_goshare_instrument_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_goshare_instrument_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_goshare_instrument_proto_goTypes = []interface{}{
	(ProductType)(0),             // 0: goshare.ProductType
	(CallPutType)(0),             // 1: goshare.CallPutType
	(SymbolGroupType)(0),         // 2: goshare.SymbolGroupType
	(*MarketStatus)(nil),         // 3: goshare.MarketStatus
	(*Instrument)(nil),           // 4: goshare.Instrument
	(*InstrumentList)(nil),       // 5: goshare.InstrumentList
	(*OptionMonthGroup)(nil),     // 6: goshare.OptionMonthGroup
	(*OptionMonthGroupList)(nil), // 7: goshare.OptionMonthGroupList
	(*UniqueSymbol)(nil),         // 8: goshare.UniqueSymbol
}
var file_goshare_instrument_proto_depIdxs = []int32{
	3, // 0: goshare.Instrument.time_rule:type_name -> goshare.MarketStatus
	1, // 1: goshare.Instrument.call_put_type:type_name -> goshare.CallPutType
	4, // 2: goshare.InstrumentList.list:type_name -> goshare.Instrument
	6, // 3: goshare.OptionMonthGroupList.list:type_name -> goshare.OptionMonthGroup
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_goshare_instrument_proto_init() }
func file_goshare_instrument_proto_init() {
	if File_goshare_instrument_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goshare_instrument_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_instrument_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_instrument_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_instrument_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionMonthGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_instrument_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionMonthGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_instrument_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueSymbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goshare_instrument_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goshare_instrument_proto_goTypes,
		DependencyIndexes: file_goshare_instrument_proto_depIdxs,
		EnumInfos:         file_goshare_instrument_proto_enumTypes,
		MessageInfos:      file_goshare_instrument_proto_msgTypes,
	}.Build()
	File_goshare_instrument_proto = out.File
	file_goshare_instrument_proto_rawDesc = nil
	file_goshare_instrument_proto_goTypes = nil
	file_goshare_instrument_proto_depIdxs = nil
}
