// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: goshare/common.proto

package goshare

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PeriodType int32

const (
	PeriodType_TICK PeriodType = 0  // Tick
	PeriodType_M1   PeriodType = 1  // 分钟
	PeriodType_M3   PeriodType = 2  // 3分钟
	PeriodType_M5   PeriodType = 3  // 5分钟
	PeriodType_M10  PeriodType = 4  // 10分钟
	PeriodType_M15  PeriodType = 5  // 15分钟
	PeriodType_M30  PeriodType = 6  // 30分钟
	PeriodType_H1   PeriodType = 7  // 小时
	PeriodType_H3   PeriodType = 8  // 3小时
	PeriodType_D1   PeriodType = 9  // 日线
	PeriodType_W1   PeriodType = 10 // 周线
	PeriodType_MON1 PeriodType = 11 // 月线
)

// Enum value maps for PeriodType.
var (
	PeriodType_name = map[int32]string{
		0:  "TICK",
		1:  "M1",
		2:  "M3",
		3:  "M5",
		4:  "M10",
		5:  "M15",
		6:  "M30",
		7:  "H1",
		8:  "H3",
		9:  "D1",
		10: "W1",
		11: "MON1",
	}
	PeriodType_value = map[string]int32{
		"TICK": 0,
		"M1":   1,
		"M3":   2,
		"M5":   3,
		"M10":  4,
		"M15":  5,
		"M30":  6,
		"H1":   7,
		"H3":   8,
		"D1":   9,
		"W1":   10,
		"MON1": 11,
	}
)

func (x PeriodType) Enum() *PeriodType {
	p := new(PeriodType)
	*p = x
	return p
}

func (x PeriodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeriodType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[0].Descriptor()
}

func (PeriodType) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[0]
}

func (x PeriodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeriodType.Descriptor instead.
func (PeriodType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{0}
}

type PriceAdjustType int32

const (
	PriceAdjustType_NORMAL PriceAdjustType = 0 // 不复权
	PriceAdjustType_BEFORE PriceAdjustType = 1 // 前复权
	PriceAdjustType_AFTER  PriceAdjustType = 2 // 后复权
)

// Enum value maps for PriceAdjustType.
var (
	PriceAdjustType_name = map[int32]string{
		0: "NORMAL",
		1: "BEFORE",
		2: "AFTER",
	}
	PriceAdjustType_value = map[string]int32{
		"NORMAL": 0,
		"BEFORE": 1,
		"AFTER":  2,
	}
)

func (x PriceAdjustType) Enum() *PriceAdjustType {
	p := new(PriceAdjustType)
	*p = x
	return p
}

func (x PriceAdjustType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceAdjustType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[1].Descriptor()
}

func (PriceAdjustType) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[1]
}

func (x PriceAdjustType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceAdjustType.Descriptor instead.
func (PriceAdjustType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{1}
}

// 行权日类型
type OptionDeliveryDateType int32

const (
	OptionDeliveryDateType_ODDT_EUR OptionDeliveryDateType = 0
)

// Enum value maps for OptionDeliveryDateType.
var (
	OptionDeliveryDateType_name = map[int32]string{
		0: "ODDT_EUR",
	}
	OptionDeliveryDateType_value = map[string]int32{
		"ODDT_EUR": 0,
	}
)

func (x OptionDeliveryDateType) Enum() *OptionDeliveryDateType {
	p := new(OptionDeliveryDateType)
	*p = x
	return p
}

func (x OptionDeliveryDateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionDeliveryDateType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[2].Descriptor()
}

func (OptionDeliveryDateType) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[2]
}

func (x OptionDeliveryDateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionDeliveryDateType.Descriptor instead.
func (OptionDeliveryDateType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{2}
}

// 平仓手续费算法
type CloseCommissionAlgorithim int32

const (
	// 普通
	CloseCommissionAlgorithim_CCA_NORMAL CloseCommissionAlgorithim = 0
	// 收一次
	CloseCommissionAlgorithim_CCA_ONCE CloseCommissionAlgorithim = 1
	// 隔夜日期
	CloseCommissionAlgorithim_CCA_MULTIPLE_BY_DATE CloseCommissionAlgorithim = 2
)

// Enum value maps for CloseCommissionAlgorithim.
var (
	CloseCommissionAlgorithim_name = map[int32]string{
		0: "CCA_NORMAL",
		1: "CCA_ONCE",
		2: "CCA_MULTIPLE_BY_DATE",
	}
	CloseCommissionAlgorithim_value = map[string]int32{
		"CCA_NORMAL":           0,
		"CCA_ONCE":             1,
		"CCA_MULTIPLE_BY_DATE": 2,
	}
)

func (x CloseCommissionAlgorithim) Enum() *CloseCommissionAlgorithim {
	p := new(CloseCommissionAlgorithim)
	*p = x
	return p
}

func (x CloseCommissionAlgorithim) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloseCommissionAlgorithim) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[3].Descriptor()
}

func (CloseCommissionAlgorithim) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[3]
}

func (x CloseCommissionAlgorithim) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloseCommissionAlgorithim.Descriptor instead.
func (CloseCommissionAlgorithim) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{3}
}

type AccountType int32

const (
	AccountType_CN_FUTURE AccountType = 0
	AccountType_CN_STOCK  AccountType = 1
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "CN_FUTURE",
		1: "CN_STOCK",
	}
	AccountType_value = map[string]int32{
		"CN_FUTURE": 0,
		"CN_STOCK":  1,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[4].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[4]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{4}
}

type CurrencyType int32

const (
	CurrencyType_CNY CurrencyType = 0
	CurrencyType_USD CurrencyType = 1
)

// Enum value maps for CurrencyType.
var (
	CurrencyType_name = map[int32]string{
		0: "CNY",
		1: "USD",
	}
	CurrencyType_value = map[string]int32{
		"CNY": 0,
		"USD": 1,
	}
)

func (x CurrencyType) Enum() *CurrencyType {
	p := new(CurrencyType)
	*p = x
	return p
}

func (x CurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[5].Descriptor()
}

func (CurrencyType) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[5]
}

func (x CurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyType.Descriptor instead.
func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{5}
}

// 交易账号类型
type TradingAccountType int32

const (
	TradingAccountType_TAT_NORMAL     TradingAccountType = 0
	TradingAccountType_TAT_TRAINNING  TradingAccountType = 1
	TradingAccountType_TAT_CTP_MIRROR TradingAccountType = 2
)

// Enum value maps for TradingAccountType.
var (
	TradingAccountType_name = map[int32]string{
		0: "TAT_NORMAL",
		1: "TAT_TRAINNING",
		2: "TAT_CTP_MIRROR",
	}
	TradingAccountType_value = map[string]int32{
		"TAT_NORMAL":     0,
		"TAT_TRAINNING":  1,
		"TAT_CTP_MIRROR": 2,
	}
)

func (x TradingAccountType) Enum() *TradingAccountType {
	p := new(TradingAccountType)
	*p = x
	return p
}

func (x TradingAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[6].Descriptor()
}

func (TradingAccountType) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[6]
}

func (x TradingAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingAccountType.Descriptor instead.
func (TradingAccountType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{6}
}

type BrokerType int32

const (
	BrokerType_CTP_FUTURE BrokerType = 0
	BrokerType_CTP_SOPT   BrokerType = 1
	BrokerType_LTS_STOCK  BrokerType = 2
	BrokerType_CAT_STOCK  BrokerType = 3
)

// Enum value maps for BrokerType.
var (
	BrokerType_name = map[int32]string{
		0: "CTP_FUTURE",
		1: "CTP_SOPT",
		2: "LTS_STOCK",
		3: "CAT_STOCK",
	}
	BrokerType_value = map[string]int32{
		"CTP_FUTURE": 0,
		"CTP_SOPT":   1,
		"LTS_STOCK":  2,
		"CAT_STOCK":  3,
	}
)

func (x BrokerType) Enum() *BrokerType {
	p := new(BrokerType)
	*p = x
	return p
}

func (x BrokerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BrokerType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_common_proto_enumTypes[7].Descriptor()
}

func (BrokerType) Type() protoreflect.EnumType {
	return &file_goshare_common_proto_enumTypes[7]
}

func (x BrokerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BrokerType.Descriptor instead.
func (BrokerType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{7}
}

// 经纪商通道
type BrokerRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Name           string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MdFrontList    []string `protobuf:"bytes,4,rep,name=md_front_list,json=mdFrontList,proto3" json:"md_front_list,omitempty"`
	TradeFrontList []string `protobuf:"bytes,5,rep,name=trade_front_list,json=tradeFrontList,proto3" json:"trade_front_list,omitempty"`
}

func (x *BrokerRoute) Reset() {
	*x = BrokerRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerRoute) ProtoMessage() {}

func (x *BrokerRoute) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerRoute.ProtoReflect.Descriptor instead.
func (*BrokerRoute) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{0}
}

func (x *BrokerRoute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BrokerRoute) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BrokerRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrokerRoute) GetMdFrontList() []string {
	if x != nil {
		return x.MdFrontList
	}
	return nil
}

func (x *BrokerRoute) GetTradeFrontList() []string {
	if x != nil {
		return x.TradeFrontList
	}
	return nil
}

type BrokerRouteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*BrokerRoute `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BrokerRouteList) Reset() {
	*x = BrokerRouteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerRouteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerRouteList) ProtoMessage() {}

func (x *BrokerRouteList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerRouteList.ProtoReflect.Descriptor instead.
func (*BrokerRouteList) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{1}
}

func (x *BrokerRouteList) GetList() []*BrokerRoute {
	if x != nil {
		return x.List
	}
	return nil
}

type ReqUpdateTIOpenDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OpenDate int32  `protobuf:"varint,3,opt,name=open_date,json=openDate,proto3" json:"open_date,omitempty"`
}

func (x *ReqUpdateTIOpenDate) Reset() {
	*x = ReqUpdateTIOpenDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateTIOpenDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateTIOpenDate) ProtoMessage() {}

func (x *ReqUpdateTIOpenDate) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateTIOpenDate.ProtoReflect.Descriptor instead.
func (*ReqUpdateTIOpenDate) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{2}
}

func (x *ReqUpdateTIOpenDate) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ReqUpdateTIOpenDate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ReqUpdateTIOpenDate) GetOpenDate() int32 {
	if x != nil {
		return x.OpenDate
	}
	return 0
}

type ReqUpdateTIOpenDateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange int32                  `protobuf:"varint,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	List     []*ReqUpdateTIOpenDate `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
	OpCode   string                 `protobuf:"bytes,3,opt,name=op_code,json=opCode,proto3" json:"op_code,omitempty"`
}

func (x *ReqUpdateTIOpenDateList) Reset() {
	*x = ReqUpdateTIOpenDateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqUpdateTIOpenDateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqUpdateTIOpenDateList) ProtoMessage() {}

func (x *ReqUpdateTIOpenDateList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqUpdateTIOpenDateList.ProtoReflect.Descriptor instead.
func (*ReqUpdateTIOpenDateList) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{3}
}

func (x *ReqUpdateTIOpenDateList) GetExchange() int32 {
	if x != nil {
		return x.Exchange
	}
	return 0
}

func (x *ReqUpdateTIOpenDateList) GetList() []*ReqUpdateTIOpenDate {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ReqUpdateTIOpenDateList) GetOpCode() string {
	if x != nil {
		return x.OpCode
	}
	return ""
}

// 结算账户资金信息
type AccountMoneySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账号
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 结算组（可能单个结算组给个摘要)
	Type AccountType `protobuf:"varint,2,opt,name=type,proto3,enum=goshare.AccountType" json:"type,omitempty"`
	// 币种
	CurrencyType CurrencyType `protobuf:"varint,3,opt,name=currency_type,json=currencyType,proto3,enum=goshare.CurrencyType" json:"currency_type,omitempty"`
	// / 余额
	Balance float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	// / 手续费
	Commission float64 `protobuf:"fixed64,5,opt,name=commission,proto3" json:"commission,omitempty"`
	// / 占用保证金
	CurMargin float64 `protobuf:"fixed64,6,opt,name=cur_margin,json=curMargin,proto3" json:"cur_margin,omitempty"`
	// / 持仓市值.
	NetPositionAmount float64 `protobuf:"fixed64,7,opt,name=net_position_amount,json=netPositionAmount,proto3" json:"net_position_amount,omitempty"`
	// / 上次余额
	PreBalance float64 `protobuf:"fixed64,8,opt,name=pre_balance,json=preBalance,proto3" json:"pre_balance,omitempty"`
	// / 利息收入
	InterestIn float64 `protobuf:"fixed64,9,opt,name=interest_in,json=interestIn,proto3" json:"interest_in,omitempty"`
	// / 存款
	Deposit float64 `protobuf:"fixed64,10,opt,name=deposit,proto3" json:"deposit,omitempty"`
	// / 取款
	Withdraw float64 `protobuf:"fixed64,11,opt,name=withdraw,proto3" json:"withdraw,omitempty"`
	// / 冻结保证金
	FrozenMargin float64 `protobuf:"fixed64,12,opt,name=frozen_margin,json=frozenMargin,proto3" json:"frozen_margin,omitempty"`
	// / 冻结手续费
	FrozenCommission float64 `protobuf:"fixed64,13,opt,name=frozen_commission,json=frozenCommission,proto3" json:"frozen_commission,omitempty"`
	// / 可用资金
	Available float64 `protobuf:"fixed64,14,opt,name=available,proto3" json:"available,omitempty"`
	// / 平仓盈亏
	CloseProfit float64 `protobuf:"fixed64,15,opt,name=close_profit,json=closeProfit,proto3" json:"close_profit,omitempty"`
	// / 持仓盈亏
	PositionProfit float64 `protobuf:"fixed64,16,opt,name=position_profit,json=positionProfit,proto3" json:"position_profit,omitempty"`
	// 上次质押金额
	PreMortgate float64 `protobuf:"fixed64,17,opt,name=pre_mortgate,json=preMortgate,proto3" json:"pre_mortgate,omitempty"`
	// 上次信用额度
	PreCredit float64 `protobuf:"fixed64,18,opt,name=pre_credit,json=preCredit,proto3" json:"pre_credit,omitempty"`
	// 利息基数
	InterestBase float64 `protobuf:"fixed64,19,opt,name=interest_base,json=interestBase,proto3" json:"interest_base,omitempty"`
	// 可取资金
	WithdrawAvailable float64 `protobuf:"fixed64,20,opt,name=withdraw_available,json=withdrawAvailable,proto3" json:"withdraw_available,omitempty"`
	// 基本准备金
	Reserve float64 `protobuf:"fixed64,21,opt,name=reserve,proto3" json:"reserve,omitempty"`
	// 交易日
	TradingDay int32 `protobuf:"varint,22,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	// 信用额度
	Credit float64 `protobuf:"fixed64,23,opt,name=credit,proto3" json:"credit,omitempty"`
	// 质押金额
	Mortgate float64 `protobuf:"fixed64,24,opt,name=mortgate,proto3" json:"mortgate,omitempty"`
	// 交易所保证金
	ExchangeMargin float64 `protobuf:"fixed64,25,opt,name=exchange_margin,json=exchangeMargin,proto3" json:"exchange_margin,omitempty"`
	// 交割保证金
	DeliveryMargin float64 `protobuf:"fixed64,26,opt,name=delivery_margin,json=deliveryMargin,proto3" json:"delivery_margin,omitempty"`
	// 交易所交割保证金
	ExchangeDeliveryMargin float64 `protobuf:"fixed64,27,opt,name=exchange_delivery_margin,json=exchangeDeliveryMargin,proto3" json:"exchange_delivery_margin,omitempty"`
	// 保底期货结算准备金
	ReserveBalance float64 `protobuf:"fixed64,28,opt,name=reserve_balance,json=reserveBalance,proto3" json:"reserve_balance,omitempty"`
	// 交割手续费
	DeliveryCommission float64 `protobuf:"fixed64,29,opt,name=delivery_commission,json=deliveryCommission,proto3" json:"delivery_commission,omitempty"`
	// 冻结过户费
	FrozenTransferFee float64 `protobuf:"fixed64,30,opt,name=frozen_transfer_fee,json=frozenTransferFee,proto3" json:"frozen_transfer_fee,omitempty"`
	// 冻结的印花税
	FrozenStampTax float64 `protobuf:"fixed64,31,opt,name=frozen_stamp_tax,json=frozenStampTax,proto3" json:"frozen_stamp_tax,omitempty"`
	// 过户费
	TransferFee float64 `protobuf:"fixed64,32,opt,name=transfer_fee,json=transferFee,proto3" json:"transfer_fee,omitempty"`
	// 印花税
	StampTax float64 `protobuf:"fixed64,33,opt,name=stamp_tax,json=stampTax,proto3" json:"stamp_tax,omitempty"`
	// / 盯市盈亏
	MtmProfit float64 `protobuf:"fixed64,34,opt,name=mtm_profit,json=mtmProfit,proto3" json:"mtm_profit,omitempty"`
	// /授信额度
	PreMtmProfit float64 `protobuf:"fixed64,35,opt,name=pre_mtm_profit,json=preMtmProfit,proto3" json:"pre_mtm_profit,omitempty"`
	// /证券总价值
	StockValue float64 `protobuf:"fixed64,36,opt,name=stock_value,json=stockValue,proto3" json:"stock_value,omitempty"`
	// /国债回购占用资金
	BondRepurchaseAmount float64 `protobuf:"fixed64,37,opt,name=bond_repurchase_amount,json=bondRepurchaseAmount,proto3" json:"bond_repurchase_amount,omitempty"`
	// /国债逆回购占用资金
	ReverseRepurchaseAmount float64 `protobuf:"fixed64,38,opt,name=reverse_repurchase_amount,json=reverseRepurchaseAmount,proto3" json:"reverse_repurchase_amount,omitempty"`
	// /融资买入金额
	MarginTradeAmount float64 `protobuf:"fixed64,39,opt,name=margin_trade_amount,json=marginTradeAmount,proto3" json:"margin_trade_amount,omitempty"`
	// /融券卖出金额
	ShortSellAmount float64 `protobuf:"fixed64,40,opt,name=short_sell_amount,json=shortSellAmount,proto3" json:"short_sell_amount,omitempty"`
	// /融资持仓盈亏
	MarginTradeProfit float64 `protobuf:"fixed64,41,opt,name=margin_trade_profit,json=marginTradeProfit,proto3" json:"margin_trade_profit,omitempty"`
	// /融券持仓盈亏
	ShortSellProfit float64 `protobuf:"fixed64,42,opt,name=short_sell_profit,json=shortSellProfit,proto3" json:"short_sell_profit,omitempty"`
	// 冻结平仓所需要费用
	FrozenCloseCommission float64 `protobuf:"fixed64,43,opt,name=frozen_close_commission,json=frozenCloseCommission,proto3" json:"frozen_close_commission,omitempty"`
	// 劣后
	CommonBalance float64 `protobuf:"fixed64,44,opt,name=common_balance,json=commonBalance,proto3" json:"common_balance,omitempty"`
	// 优先资金
	PreferedBalance float64 `protobuf:"fixed64,45,opt,name=prefered_balance,json=preferedBalance,proto3" json:"prefered_balance,omitempty"`
	// 兑换基础货币汇率
	BaseExchangeRate float64 `protobuf:"fixed64,46,opt,name=base_exchange_rate,json=baseExchangeRate,proto3" json:"base_exchange_rate,omitempty"`
	// 报警
	WarningLevel float64 `protobuf:"fixed64,47,opt,name=warning_level,json=warningLevel,proto3" json:"warning_level,omitempty"`
	// 强平
	ForceCloseLevel float64 `protobuf:"fixed64,48,opt,name=force_close_level,json=forceCloseLevel,proto3" json:"force_close_level,omitempty"`
	// 进入清算的平仓盈亏
	ClearedClosedProfit float64 `protobuf:"fixed64,49,opt,name=cleared_closed_profit,json=clearedClosedProfit,proto3" json:"cleared_closed_profit,omitempty"`
	// 名称
	Name string `protobuf:"bytes,50,opt,name=name,proto3" json:"name,omitempty"`
	// 利息
	Interest float64 `protobuf:"fixed64,51,opt,name=interest,proto3" json:"interest,omitempty"`
	// 冻结利息
	FrozenInterest float64 `protobuf:"fixed64,52,opt,name=frozen_interest,json=frozenInterest,proto3" json:"frozen_interest,omitempty"`
}

func (x *AccountMoneySummary) Reset() {
	*x = AccountMoneySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMoneySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMoneySummary) ProtoMessage() {}

func (x *AccountMoneySummary) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMoneySummary.ProtoReflect.Descriptor instead.
func (*AccountMoneySummary) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{4}
}

func (x *AccountMoneySummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountMoneySummary) GetType() AccountType {
	if x != nil {
		return x.Type
	}
	return AccountType_CN_FUTURE
}

func (x *AccountMoneySummary) GetCurrencyType() CurrencyType {
	if x != nil {
		return x.CurrencyType
	}
	return CurrencyType_CNY
}

func (x *AccountMoneySummary) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountMoneySummary) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *AccountMoneySummary) GetCurMargin() float64 {
	if x != nil {
		return x.CurMargin
	}
	return 0
}

func (x *AccountMoneySummary) GetNetPositionAmount() float64 {
	if x != nil {
		return x.NetPositionAmount
	}
	return 0
}

func (x *AccountMoneySummary) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *AccountMoneySummary) GetInterestIn() float64 {
	if x != nil {
		return x.InterestIn
	}
	return 0
}

func (x *AccountMoneySummary) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *AccountMoneySummary) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *AccountMoneySummary) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *AccountMoneySummary) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *AccountMoneySummary) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *AccountMoneySummary) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *AccountMoneySummary) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *AccountMoneySummary) GetPreMortgate() float64 {
	if x != nil {
		return x.PreMortgate
	}
	return 0
}

func (x *AccountMoneySummary) GetPreCredit() float64 {
	if x != nil {
		return x.PreCredit
	}
	return 0
}

func (x *AccountMoneySummary) GetInterestBase() float64 {
	if x != nil {
		return x.InterestBase
	}
	return 0
}

func (x *AccountMoneySummary) GetWithdrawAvailable() float64 {
	if x != nil {
		return x.WithdrawAvailable
	}
	return 0
}

func (x *AccountMoneySummary) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *AccountMoneySummary) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *AccountMoneySummary) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *AccountMoneySummary) GetMortgate() float64 {
	if x != nil {
		return x.Mortgate
	}
	return 0
}

func (x *AccountMoneySummary) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *AccountMoneySummary) GetDeliveryMargin() float64 {
	if x != nil {
		return x.DeliveryMargin
	}
	return 0
}

func (x *AccountMoneySummary) GetExchangeDeliveryMargin() float64 {
	if x != nil {
		return x.ExchangeDeliveryMargin
	}
	return 0
}

func (x *AccountMoneySummary) GetReserveBalance() float64 {
	if x != nil {
		return x.ReserveBalance
	}
	return 0
}

func (x *AccountMoneySummary) GetDeliveryCommission() float64 {
	if x != nil {
		return x.DeliveryCommission
	}
	return 0
}

func (x *AccountMoneySummary) GetFrozenTransferFee() float64 {
	if x != nil {
		return x.FrozenTransferFee
	}
	return 0
}

func (x *AccountMoneySummary) GetFrozenStampTax() float64 {
	if x != nil {
		return x.FrozenStampTax
	}
	return 0
}

func (x *AccountMoneySummary) GetTransferFee() float64 {
	if x != nil {
		return x.TransferFee
	}
	return 0
}

func (x *AccountMoneySummary) GetStampTax() float64 {
	if x != nil {
		return x.StampTax
	}
	return 0
}

func (x *AccountMoneySummary) GetMtmProfit() float64 {
	if x != nil {
		return x.MtmProfit
	}
	return 0
}

func (x *AccountMoneySummary) GetPreMtmProfit() float64 {
	if x != nil {
		return x.PreMtmProfit
	}
	return 0
}

func (x *AccountMoneySummary) GetStockValue() float64 {
	if x != nil {
		return x.StockValue
	}
	return 0
}

func (x *AccountMoneySummary) GetBondRepurchaseAmount() float64 {
	if x != nil {
		return x.BondRepurchaseAmount
	}
	return 0
}

func (x *AccountMoneySummary) GetReverseRepurchaseAmount() float64 {
	if x != nil {
		return x.ReverseRepurchaseAmount
	}
	return 0
}

func (x *AccountMoneySummary) GetMarginTradeAmount() float64 {
	if x != nil {
		return x.MarginTradeAmount
	}
	return 0
}

func (x *AccountMoneySummary) GetShortSellAmount() float64 {
	if x != nil {
		return x.ShortSellAmount
	}
	return 0
}

func (x *AccountMoneySummary) GetMarginTradeProfit() float64 {
	if x != nil {
		return x.MarginTradeProfit
	}
	return 0
}

func (x *AccountMoneySummary) GetShortSellProfit() float64 {
	if x != nil {
		return x.ShortSellProfit
	}
	return 0
}

func (x *AccountMoneySummary) GetFrozenCloseCommission() float64 {
	if x != nil {
		return x.FrozenCloseCommission
	}
	return 0
}

func (x *AccountMoneySummary) GetCommonBalance() float64 {
	if x != nil {
		return x.CommonBalance
	}
	return 0
}

func (x *AccountMoneySummary) GetPreferedBalance() float64 {
	if x != nil {
		return x.PreferedBalance
	}
	return 0
}

func (x *AccountMoneySummary) GetBaseExchangeRate() float64 {
	if x != nil {
		return x.BaseExchangeRate
	}
	return 0
}

func (x *AccountMoneySummary) GetWarningLevel() float64 {
	if x != nil {
		return x.WarningLevel
	}
	return 0
}

func (x *AccountMoneySummary) GetForceCloseLevel() float64 {
	if x != nil {
		return x.ForceCloseLevel
	}
	return 0
}

func (x *AccountMoneySummary) GetClearedClosedProfit() float64 {
	if x != nil {
		return x.ClearedClosedProfit
	}
	return 0
}

func (x *AccountMoneySummary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountMoneySummary) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *AccountMoneySummary) GetFrozenInterest() float64 {
	if x != nil {
		return x.FrozenInterest
	}
	return 0
}

type AccountMoneySummaryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AccountMoneySummary `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AccountMoneySummaryList) Reset() {
	*x = AccountMoneySummaryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountMoneySummaryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountMoneySummaryList) ProtoMessage() {}

func (x *AccountMoneySummaryList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountMoneySummaryList.ProtoReflect.Descriptor instead.
func (*AccountMoneySummaryList) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{5}
}

func (x *AccountMoneySummaryList) GetList() []*AccountMoneySummary {
	if x != nil {
		return x.List
	}
	return nil
}

// 出入金操作
type MoneyTransferRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 出入
	Direction int32 `protobuf:"varint,2,opt,name=direction,proto3" json:"direction,omitempty"`
	// 币种
	CurrencyType int32 `protobuf:"varint,3,opt,name=currency_type,json=currencyType,proto3" json:"currency_type,omitempty"`
	// 结算组
	SettlementGroup int32 `protobuf:"varint,4,opt,name=settlement_group,json=settlementGroup,proto3" json:"settlement_group,omitempty"`
	// 是否确认
	Confirmed int32 `protobuf:"varint,5,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// 优先
	IsPrefered int32 `protobuf:"varint,6,opt,name=is_prefered,json=isPrefered,proto3" json:"is_prefered,omitempty"`
	// 金额
	Amount float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`
	// 账户
	AccountId string `protobuf:"bytes,8,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// 操作员
	OperatorId string `protobuf:"bytes,9,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// 会话编号
	SessionId int32 `protobuf:"varint,10,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 请求时间
	Time int64 `protobuf:"varint,11,opt,name=time,proto3" json:"time,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
	// 第三方单号
	BankTradeId string `protobuf:"bytes,13,opt,name=bank_trade_id,json=bankTradeId,proto3" json:"bank_trade_id,omitempty"`
	// 配置编号，用于出金
	PaymentConfigId int64 `protobuf:"varint,14,opt,name=payment_config_id,json=paymentConfigId,proto3" json:"payment_config_id,omitempty"`
	// 原始金额
	OriginalAmount float64 `protobuf:"fixed64,15,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"`
	// 费用
	Fee float64 `protobuf:"fixed64,16,opt,name=fee,proto3" json:"fee,omitempty"`
	// 通道
	PaymentPath string `protobuf:"bytes,17,opt,name=payment_path,json=paymentPath,proto3" json:"payment_path,omitempty"`
	// 身份证号
	IdentityNumber string `protobuf:"bytes,18,opt,name=identity_number,json=identityNumber,proto3" json:"identity_number,omitempty"`
	// 电话
	PhoneNumber string `protobuf:"bytes,19,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// 银行名称
	BankName string `protobuf:"bytes,20,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	// 支行名称
	BankBranchName string `protobuf:"bytes,21,opt,name=bank_branch_name,json=bankBranchName,proto3" json:"bank_branch_name,omitempty"`
	// 银行卡号
	BankCardNo string `protobuf:"bytes,22,opt,name=bank_card_no,json=bankCardNo,proto3" json:"bank_card_no,omitempty"`
	// 省份
	Province string `protobuf:"bytes,23,opt,name=province,proto3" json:"province,omitempty"`
	// 城市
	City string `protobuf:"bytes,24,opt,name=city,proto3" json:"city,omitempty"`
	// 支付方式代码
	PayType string `protobuf:"bytes,25,opt,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"`
	// 支付时间
	PayedTime int64 `protobuf:"varint,26,opt,name=payed_time,json=payedTime,proto3" json:"payed_time,omitempty"`
	// 确认时间
	ConfirmedTime int64 `protobuf:"varint,27,opt,name=confirmed_time,json=confirmedTime,proto3" json:"confirmed_time,omitempty"`
	// 名称
	Name string `protobuf:"bytes,28,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MoneyTransferRecord) Reset() {
	*x = MoneyTransferRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyTransferRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyTransferRecord) ProtoMessage() {}

func (x *MoneyTransferRecord) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyTransferRecord.ProtoReflect.Descriptor instead.
func (*MoneyTransferRecord) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{6}
}

func (x *MoneyTransferRecord) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MoneyTransferRecord) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *MoneyTransferRecord) GetCurrencyType() int32 {
	if x != nil {
		return x.CurrencyType
	}
	return 0
}

func (x *MoneyTransferRecord) GetSettlementGroup() int32 {
	if x != nil {
		return x.SettlementGroup
	}
	return 0
}

func (x *MoneyTransferRecord) GetConfirmed() int32 {
	if x != nil {
		return x.Confirmed
	}
	return 0
}

func (x *MoneyTransferRecord) GetIsPrefered() int32 {
	if x != nil {
		return x.IsPrefered
	}
	return 0
}

func (x *MoneyTransferRecord) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MoneyTransferRecord) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *MoneyTransferRecord) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (x *MoneyTransferRecord) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *MoneyTransferRecord) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MoneyTransferRecord) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MoneyTransferRecord) GetBankTradeId() string {
	if x != nil {
		return x.BankTradeId
	}
	return ""
}

func (x *MoneyTransferRecord) GetPaymentConfigId() int64 {
	if x != nil {
		return x.PaymentConfigId
	}
	return 0
}

func (x *MoneyTransferRecord) GetOriginalAmount() float64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *MoneyTransferRecord) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MoneyTransferRecord) GetPaymentPath() string {
	if x != nil {
		return x.PaymentPath
	}
	return ""
}

func (x *MoneyTransferRecord) GetIdentityNumber() string {
	if x != nil {
		return x.IdentityNumber
	}
	return ""
}

func (x *MoneyTransferRecord) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *MoneyTransferRecord) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *MoneyTransferRecord) GetBankBranchName() string {
	if x != nil {
		return x.BankBranchName
	}
	return ""
}

func (x *MoneyTransferRecord) GetBankCardNo() string {
	if x != nil {
		return x.BankCardNo
	}
	return ""
}

func (x *MoneyTransferRecord) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *MoneyTransferRecord) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *MoneyTransferRecord) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

func (x *MoneyTransferRecord) GetPayedTime() int64 {
	if x != nil {
		return x.PayedTime
	}
	return 0
}

func (x *MoneyTransferRecord) GetConfirmedTime() int64 {
	if x != nil {
		return x.ConfirmedTime
	}
	return 0
}

func (x *MoneyTransferRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MTRList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MoneyTransferRecord `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MTRList) Reset() {
	*x = MTRList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTRList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTRList) ProtoMessage() {}

func (x *MTRList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MTRList.ProtoReflect.Descriptor instead.
func (*MTRList) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{7}
}

func (x *MTRList) GetList() []*MoneyTransferRecord {
	if x != nil {
		return x.List
	}
	return nil
}

// 期权月份
type OptionMonth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Short string `protobuf:"bytes,3,opt,name=short,proto3" json:"short,omitempty"`
}

func (x *OptionMonth) Reset() {
	*x = OptionMonth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionMonth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMonth) ProtoMessage() {}

func (x *OptionMonth) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMonth.ProtoReflect.Descriptor instead.
func (*OptionMonth) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{8}
}

func (x *OptionMonth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OptionMonth) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *OptionMonth) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

// 期权月份列表
type OptionMonthList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*OptionMonth `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OptionMonthList) Reset() {
	*x = OptionMonthList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionMonthList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionMonthList) ProtoMessage() {}

func (x *OptionMonthList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionMonthList.ProtoReflect.Descriptor instead.
func (*OptionMonthList) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{9}
}

func (x *OptionMonthList) GetList() []*OptionMonth {
	if x != nil {
		return x.List
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{10}
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{11}
}

type CommonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommonRequest) Reset() {
	*x = CommonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRequest) ProtoMessage() {}

func (x *CommonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRequest.ProtoReflect.Descriptor instead.
func (*CommonRequest) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{12}
}

type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_goshare_common_proto_rawDescGZIP(), []int{13}
}

func (x *CommonResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommonResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_goshare_common_proto protoreflect.FileDescriptor

var file_goshare_common_proto_rawDesc = []byte{
	0x0a, 0x14, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x0b, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x64, 0x5f, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x6d, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x66, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x49, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x71, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x49, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x49, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf3, 0x0f,
	0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x5f, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x75, 0x72, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f,
	0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x18, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x61, 0x78, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x74, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6d, 0x74, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x5f, 0x6d, 0x74, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x4d, 0x74, 0x6d, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x62, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x81, 0x07, 0x0a, 0x13, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62,
	0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x07, 0x4d, 0x54, 0x52, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x4d, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x22, 0x3b, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x0e, 0x0a,
	0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a,
	0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x58, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x73, 0x0a, 0x0a, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x43, 0x4b, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x33, 0x10,
	0x02, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x35, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x31, 0x30,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x31, 0x35, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x33, 0x30, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x31, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02,
	0x48, 0x33, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x31, 0x10, 0x09, 0x12, 0x06, 0x0a, 0x02,
	0x57, 0x31, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x4e, 0x31, 0x10, 0x0b, 0x2a, 0x34,
	0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x2a, 0x26, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x44, 0x44, 0x54, 0x5f, 0x45, 0x55, 0x52, 0x10, 0x00, 0x2a, 0x53, 0x0a, 0x19,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x69, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x43, 0x41,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x43, 0x41,
	0x5f, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x43, 0x41, 0x5f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x2a, 0x2a, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4e, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x2a, 0x20, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x43, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x01, 0x2a,
	0x4b, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x49, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x54, 0x5f,
	0x43, 0x54, 0x50, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0x48, 0x0a, 0x0a,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54,
	0x50, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54,
	0x50, 0x5f, 0x53, 0x4f, 0x50, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x54, 0x53, 0x5f,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x54, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x65, 0x6e, 0x6a, 0x69,
	0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f,
	0x2f, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goshare_common_proto_rawDescOnce sync.Once
	file_goshare_common_proto_rawDescData = file_goshare_common_proto_rawDesc
)

func file_goshare_common_proto_rawDescGZIP() []byte {
	file_goshare_common_proto_rawDescOnce.Do(func() {
		file_goshare_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_goshare_common_proto_rawDescData)
	})
	return file_goshare_common_proto_rawDescData
}

var file_goshare_common_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_goshare_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_goshare_common_proto_goTypes = []interface{}{
	(PeriodType)(0),                 // 0: goshare.PeriodType
	(PriceAdjustType)(0),            // 1: goshare.PriceAdjustType
	(OptionDeliveryDateType)(0),     // 2: goshare.OptionDeliveryDateType
	(CloseCommissionAlgorithim)(0),  // 3: goshare.CloseCommissionAlgorithim
	(AccountType)(0),                // 4: goshare.AccountType
	(CurrencyType)(0),               // 5: goshare.CurrencyType
	(TradingAccountType)(0),         // 6: goshare.TradingAccountType
	(BrokerType)(0),                 // 7: goshare.BrokerType
	(*BrokerRoute)(nil),             // 8: goshare.BrokerRoute
	(*BrokerRouteList)(nil),         // 9: goshare.BrokerRouteList
	(*ReqUpdateTIOpenDate)(nil),     // 10: goshare.ReqUpdateTIOpenDate
	(*ReqUpdateTIOpenDateList)(nil), // 11: goshare.ReqUpdateTIOpenDateList
	(*AccountMoneySummary)(nil),     // 12: goshare.AccountMoneySummary
	(*AccountMoneySummaryList)(nil), // 13: goshare.AccountMoneySummaryList
	(*MoneyTransferRecord)(nil),     // 14: goshare.MoneyTransferRecord
	(*MTRList)(nil),                 // 15: goshare.MTRList
	(*OptionMonth)(nil),             // 16: goshare.OptionMonth
	(*OptionMonthList)(nil),         // 17: goshare.OptionMonthList
	(*EmptyRequest)(nil),            // 18: goshare.EmptyRequest
	(*EmptyResponse)(nil),           // 19: goshare.EmptyResponse
	(*CommonRequest)(nil),           // 20: goshare.CommonRequest
	(*CommonResponse)(nil),          // 21: goshare.CommonResponse
}
var file_goshare_common_proto_depIdxs = []int32{
	8,  // 0: goshare.BrokerRouteList.list:type_name -> goshare.BrokerRoute
	10, // 1: goshare.ReqUpdateTIOpenDateList.list:type_name -> goshare.ReqUpdateTIOpenDate
	4,  // 2: goshare.AccountMoneySummary.type:type_name -> goshare.AccountType
	5,  // 3: goshare.AccountMoneySummary.currency_type:type_name -> goshare.CurrencyType
	12, // 4: goshare.AccountMoneySummaryList.list:type_name -> goshare.AccountMoneySummary
	14, // 5: goshare.MTRList.list:type_name -> goshare.MoneyTransferRecord
	16, // 6: goshare.OptionMonthList.list:type_name -> goshare.OptionMonth
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_goshare_common_proto_init() }
func file_goshare_common_proto_init() {
	if File_goshare_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goshare_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerRouteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateTIOpenDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqUpdateTIOpenDateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMoneySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountMoneySummaryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyTransferRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTRList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionMonth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionMonthList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goshare_common_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goshare_common_proto_goTypes,
		DependencyIndexes: file_goshare_common_proto_depIdxs,
		EnumInfos:         file_goshare_common_proto_enumTypes,
		MessageInfos:      file_goshare_common_proto_msgTypes,
	}.Build()
	File_goshare_common_proto = out.File
	file_goshare_common_proto_rawDesc = nil
	file_goshare_common_proto_goTypes = nil
	file_goshare_common_proto_depIdxs = nil
}
