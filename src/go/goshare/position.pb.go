// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: goshare/position.proto

package goshare

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PositionSummationType int32

const (
	PositionSummationType_TOTAL     PositionSummationType = 0
	PositionSummationType_TODAY     PositionSummationType = 1
	PositionSummationType_YESTERDAY PositionSummationType = 2
)

// Enum value maps for PositionSummationType.
var (
	PositionSummationType_name = map[int32]string{
		0: "TOTAL",
		1: "TODAY",
		2: "YESTERDAY",
	}
	PositionSummationType_value = map[string]int32{
		"TOTAL":     0,
		"TODAY":     1,
		"YESTERDAY": 2,
	}
)

func (x PositionSummationType) Enum() *PositionSummationType {
	p := new(PositionSummationType)
	*p = x
	return p
}

func (x PositionSummationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionSummationType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_position_proto_enumTypes[0].Descriptor()
}

func (PositionSummationType) Type() protoreflect.EnumType {
	return &file_goshare_position_proto_enumTypes[0]
}

func (x PositionSummationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionSummationType.Descriptor instead.
func (PositionSummationType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{0}
}

// 持仓统计
type PositionSummation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 方向
	Direction DirectionType `protobuf:"varint,1,opt,name=direction,proto3,enum=goshare.DirectionType" json:"direction,omitempty"`
	// 类型
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// 持仓
	Position int32 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	// 成本
	Cost float64 `protobuf:"fixed64,4,opt,name=cost,proto3" json:"cost,omitempty"`
	// 金额
	Amount float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// 冻结
	Frozen int32 `protobuf:"varint,6,opt,name=frozen,proto3" json:"frozen,omitempty"`
	// 可用
	Available int32 `protobuf:"varint,7,opt,name=available,proto3" json:"available,omitempty"`
	// 盈亏
	FloatProfit float64 `protobuf:"fixed64,9,opt,name=float_profit,json=floatProfit,proto3" json:"float_profit,omitempty"`
	// 保证金
	Margin float64 `protobuf:"fixed64,11,opt,name=margin,proto3" json:"margin,omitempty"`
}

func (x *PositionSummation) Reset() {
	*x = PositionSummation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionSummation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionSummation) ProtoMessage() {}

func (x *PositionSummation) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionSummation.ProtoReflect.Descriptor instead.
func (*PositionSummation) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{0}
}

func (x *PositionSummation) GetDirection() DirectionType {
	if x != nil {
		return x.Direction
	}
	return DirectionType_LONG
}

func (x *PositionSummation) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PositionSummation) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PositionSummation) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *PositionSummation) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PositionSummation) GetFrozen() int32 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *PositionSummation) GetAvailable() int32 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *PositionSummation) GetFloatProfit() float64 {
	if x != nil {
		return x.FloatProfit
	}
	return 0
}

func (x *PositionSummation) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

// 持仓
type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId              string             `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户
	TaId                string             `protobuf:"bytes,2,opt,name=ta_id,json=taId,proto3" json:"ta_id,omitempty"`                                                    // 账号
	BuId                string             `protobuf:"bytes,3,opt,name=bu_id,json=buId,proto3" json:"bu_id,omitempty"`                                                    // bu
	Exchange            string             `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                        // 交易所
	Symbol              string             `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                            /// 合约编号
	Product             string             `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`                                                          // 品种
	Direction           DirectionType      `protobuf:"varint,7,opt,name=direction,proto3,enum=goshare.DirectionType" json:"direction,omitempty"`                          // 方向
	Total               *PositionSummation `protobuf:"bytes,8,opt,name=total,proto3" json:"total,omitempty"`                                                              // 统计
	Today               *PositionSummation `protobuf:"bytes,9,opt,name=today,proto3" json:"today,omitempty"`                                                              // 今仓
	Yesterday           *PositionSummation `protobuf:"bytes,10,opt,name=yesterday,proto3" json:"yesterday,omitempty"`                                                     // 今仓
	PreSettlementPrice  float64            `protobuf:"fixed64,11,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"`     // 昨结算
	SettlementPrice     float64            `protobuf:"fixed64,12,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`                // 今结算
	LastPrice           float64            `protobuf:"fixed64,13,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`                                  // 最新价
	TradingDay          int32              `protobuf:"varint,14,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                // 交易日
	ProductType         int32              `protobuf:"varint,15,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`                             // 交易品种类型
	Multiple            int32              `protobuf:"varint,16,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                      // 合约乘数
	PriceTick           float64            `protobuf:"fixed64,17,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`                                  // 最小变动价位
	SymbolName          string             `protobuf:"bytes,18,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`                                 // 名称
	UserName            string             `protobuf:"bytes,19,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                       // 账号名
	Branch              string             `protobuf:"bytes,20,opt,name=branch,proto3" json:"branch,omitempty"`                                                           // 部门
	BranchName          string             `protobuf:"bytes,21,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`                                 // 部门名称
	IsCloseTodayAllowed bool               `protobuf:"varint,22,opt,name=is_close_today_allowed,json=isCloseTodayAllowed,proto3" json:"is_close_today_allowed,omitempty"` // 是否允许平今
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Position) GetTaId() string {
	if x != nil {
		return x.TaId
	}
	return ""
}

func (x *Position) GetBuId() string {
	if x != nil {
		return x.BuId
	}
	return ""
}

func (x *Position) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Position) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Position) GetDirection() DirectionType {
	if x != nil {
		return x.Direction
	}
	return DirectionType_LONG
}

func (x *Position) GetTotal() *PositionSummation {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Position) GetToday() *PositionSummation {
	if x != nil {
		return x.Today
	}
	return nil
}

func (x *Position) GetYesterday() *PositionSummation {
	if x != nil {
		return x.Yesterday
	}
	return nil
}

func (x *Position) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *Position) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *Position) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *Position) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *Position) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *Position) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *Position) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *Position) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *Position) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Position) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Position) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Position) GetIsCloseTodayAllowed() bool {
	if x != nil {
		return x.IsCloseTodayAllowed
	}
	return false
}

type SymbolPositionSummation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     *PositionSummation `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`         // 统计
	Today     *PositionSummation `protobuf:"bytes,2,opt,name=today,proto3" json:"today,omitempty"`         // 今仓
	Yesterday *PositionSummation `protobuf:"bytes,3,opt,name=yesterday,proto3" json:"yesterday,omitempty"` // 今仓
}

func (x *SymbolPositionSummation) Reset() {
	*x = SymbolPositionSummation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolPositionSummation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolPositionSummation) ProtoMessage() {}

func (x *SymbolPositionSummation) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolPositionSummation.ProtoReflect.Descriptor instead.
func (*SymbolPositionSummation) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{2}
}

func (x *SymbolPositionSummation) GetTotal() *PositionSummation {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *SymbolPositionSummation) GetToday() *PositionSummation {
	if x != nil {
		return x.Today
	}
	return nil
}

func (x *SymbolPositionSummation) GetYesterday() *PositionSummation {
	if x != nil {
		return x.Yesterday
	}
	return nil
}

// 合约多空持仓
type SymbolPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange           string                   `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                   // 交易所
	Symbol             string                   `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                       /// 合约编号
	Product            string                   `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`                                                     // 品种
	Direction          int32                    `protobuf:"varint,4,opt,name=direction,proto3" json:"direction,omitempty"`                                                // 方向
	PreSettlementPrice float64                  `protobuf:"fixed64,5,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"` // 昨结算
	SettlementPrice    float64                  `protobuf:"fixed64,6,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`            // 今结算
	LastPrice          float64                  `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`                              // 最新价
	TradingDay         int32                    `protobuf:"varint,8,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                            // 交易日
	ProductType        int32                    `protobuf:"varint,9,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`                         // 交易品种类型
	Multiple           int32                    `protobuf:"varint,10,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                 // 合约乘数
	PriceTick          float64                  `protobuf:"fixed64,11,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`                             // 最小变动价位
	SymbolName         string                   `protobuf:"bytes,12,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`                            // 名称
	UserName           string                   `protobuf:"bytes,13,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                  // 账号名
	Long               *SymbolPositionSummation `protobuf:"bytes,14,opt,name=long,proto3" json:"long,omitempty"`                                                          // 多头
	Short              *SymbolPositionSummation `protobuf:"bytes,15,opt,name=short,proto3" json:"short,omitempty"`                                                        // 空头
}

func (x *SymbolPosition) Reset() {
	*x = SymbolPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolPosition) ProtoMessage() {}

func (x *SymbolPosition) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolPosition.ProtoReflect.Descriptor instead.
func (*SymbolPosition) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{3}
}

func (x *SymbolPosition) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SymbolPosition) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SymbolPosition) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *SymbolPosition) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *SymbolPosition) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *SymbolPosition) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *SymbolPosition) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *SymbolPosition) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *SymbolPosition) GetProductType() int32 {
	if x != nil {
		return x.ProductType
	}
	return 0
}

func (x *SymbolPosition) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *SymbolPosition) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *SymbolPosition) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *SymbolPosition) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SymbolPosition) GetLong() *SymbolPositionSummation {
	if x != nil {
		return x.Long
	}
	return nil
}

func (x *SymbolPosition) GetShort() *SymbolPositionSummation {
	if x != nil {
		return x.Short
	}
	return nil
}

// 持仓明细
type PositionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuId                 string        `protobuf:"bytes,1,opt,name=bu_id,json=buId,proto3" json:"bu_id,omitempty"`                                                      // 单元
	Exchange             string        `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                          // 交易所
	Symbol               string        `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                              // 合约
	Product              string        `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`                                                            // 品种
	Direction            DirectionType `protobuf:"varint,5,opt,name=direction,proto3,enum=goshare.DirectionType" json:"direction,omitempty"`                            // 方向
	Volume               int32         `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`                                                             // 数量
	Price                float64       `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`                                                              // 开仓金额
	ClosedVolume         int32         `protobuf:"varint,8,opt,name=closed_volume,json=closedVolume,proto3" json:"closed_volume,omitempty"`                             // 平仓数量
	ClosedAmount         float64       `protobuf:"fixed64,9,opt,name=closed_amount,json=closedAmount,proto3" json:"closed_amount,omitempty"`                            // 平仓金额
	OpenTime             int64         `protobuf:"varint,10,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`                                        // 开仓时间
	OpenTradingDay       int32         `protobuf:"varint,11,opt,name=open_trading_day,json=openTradingDay,proto3" json:"open_trading_day,omitempty"`                    // 开仓交易日
	FloatProfit          float64       `protobuf:"fixed64,12,opt,name=float_profit,json=floatProfit,proto3" json:"float_profit,omitempty"`                              // 持仓盈亏
	FrontId              int32         `protobuf:"varint,13,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`                                           // 委托front
	SessionId            int32         `protobuf:"varint,14,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                     // session
	OrderRef             string        `protobuf:"bytes,15,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`                                         // order ref
	TradeId              string        `protobuf:"bytes,16,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`                                            // 开仓成交编号
	TradeType            int32         `protobuf:"varint,17,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`                                     // 开仓成交类型
	ClosedProfit         float64       `protobuf:"fixed64,18,opt,name=closed_profit,json=closedProfit,proto3" json:"closed_profit,omitempty"`                           // 平仓盈亏
	PreSettlementPrice   float64       `protobuf:"fixed64,19,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"`       // 昨结
	InitialOpenAmount    float64       `protobuf:"fixed64,20,opt,name=initial_open_amount,json=initialOpenAmount,proto3" json:"initial_open_amount,omitempty"`          // 初始开仓金额
	Multiple             int32         `protobuf:"varint,21,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                        // 合约乘数
	LastSettleDate       int32         `protobuf:"varint,22,opt,name=last_settle_date,json=lastSettleDate,proto3" json:"last_settle_date,omitempty"`                    // 结算交易日
	LastSettlementPrice  float64       `protobuf:"fixed64,23,opt,name=last_settlement_price,json=lastSettlementPrice,proto3" json:"last_settlement_price,omitempty"`    // 结算价
	LastSettlementProfit float64       `protobuf:"fixed64,24,opt,name=last_settlement_profit,json=lastSettlementProfit,proto3" json:"last_settlement_profit,omitempty"` // 结算盈亏
	PriceTick            float64       `protobuf:"fixed64,25,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`                                    // 变动点
	LastPrice            float64       `protobuf:"fixed64,26,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`                                    // 最新价
	UserName             string        `protobuf:"bytes,27,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                         // 用户名
	TradingDay           int32         `protobuf:"varint,28,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                  // 当前交易日
	ExpireDate           int32         `protobuf:"varint,29,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                  // 到期日
	Margin               float64       `protobuf:"fixed64,30,opt,name=margin,proto3" json:"margin,omitempty"`                                                           // 保证金占用
}

func (x *PositionDetail) Reset() {
	*x = PositionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionDetail) ProtoMessage() {}

func (x *PositionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionDetail.ProtoReflect.Descriptor instead.
func (*PositionDetail) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{4}
}

func (x *PositionDetail) GetBuId() string {
	if x != nil {
		return x.BuId
	}
	return ""
}

func (x *PositionDetail) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *PositionDetail) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *PositionDetail) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *PositionDetail) GetDirection() DirectionType {
	if x != nil {
		return x.Direction
	}
	return DirectionType_LONG
}

func (x *PositionDetail) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *PositionDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PositionDetail) GetClosedVolume() int32 {
	if x != nil {
		return x.ClosedVolume
	}
	return 0
}

func (x *PositionDetail) GetClosedAmount() float64 {
	if x != nil {
		return x.ClosedAmount
	}
	return 0
}

func (x *PositionDetail) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *PositionDetail) GetOpenTradingDay() int32 {
	if x != nil {
		return x.OpenTradingDay
	}
	return 0
}

func (x *PositionDetail) GetFloatProfit() float64 {
	if x != nil {
		return x.FloatProfit
	}
	return 0
}

func (x *PositionDetail) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *PositionDetail) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *PositionDetail) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *PositionDetail) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *PositionDetail) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *PositionDetail) GetClosedProfit() float64 {
	if x != nil {
		return x.ClosedProfit
	}
	return 0
}

func (x *PositionDetail) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *PositionDetail) GetInitialOpenAmount() float64 {
	if x != nil {
		return x.InitialOpenAmount
	}
	return 0
}

func (x *PositionDetail) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *PositionDetail) GetLastSettleDate() int32 {
	if x != nil {
		return x.LastSettleDate
	}
	return 0
}

func (x *PositionDetail) GetLastSettlementPrice() float64 {
	if x != nil {
		return x.LastSettlementPrice
	}
	return 0
}

func (x *PositionDetail) GetLastSettlementProfit() float64 {
	if x != nil {
		return x.LastSettlementProfit
	}
	return 0
}

func (x *PositionDetail) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *PositionDetail) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *PositionDetail) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PositionDetail) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *PositionDetail) GetExpireDate() int32 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *PositionDetail) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

// 持仓明细
type PositionDetailList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*PositionDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Multiple   int32             `protobuf:"varint,2,opt,name=multiple,proto3" json:"multiple,omitempty"`
	PriceTick  float64           `protobuf:"fixed64,3,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`
	TradingDay int32             `protobuf:"varint,4,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
}

func (x *PositionDetailList) Reset() {
	*x = PositionDetailList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionDetailList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionDetailList) ProtoMessage() {}

func (x *PositionDetailList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionDetailList.ProtoReflect.Descriptor instead.
func (*PositionDetailList) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{5}
}

func (x *PositionDetailList) GetList() []*PositionDetail {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *PositionDetailList) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *PositionDetailList) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *PositionDetailList) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

// 持仓明细
type CloseTradeMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               string        `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                // 帐号
	TaId                 string        `protobuf:"bytes,2,opt,name=ta_id,json=taId,proto3" json:"ta_id,omitempty"`                                                      // taid
	BuId                 string        `protobuf:"bytes,3,opt,name=bu_id,json=buId,proto3" json:"bu_id,omitempty"`                                                      // 单元
	Exchange             string        `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`                                                          // 交易所
	Symbol               string        `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                              // 合约
	Product              string        `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`                                                            // 品种
	Direction            DirectionType `protobuf:"varint,7,opt,name=direction,proto3,enum=goshare.DirectionType" json:"direction,omitempty"`                            // 方向
	OpenVolume           int32         `protobuf:"varint,8,opt,name=open_volume,json=openVolume,proto3" json:"open_volume,omitempty"`                                   // 数量
	OpenAmount           float64       `protobuf:"fixed64,9,opt,name=open_amount,json=openAmount,proto3" json:"open_amount,omitempty"`                                  // 开仓金额
	ClosedVolume         int32         `protobuf:"varint,10,opt,name=closed_volume,json=closedVolume,proto3" json:"closed_volume,omitempty"`                            // 平仓数量
	ClosedAmount         float64       `protobuf:"fixed64,11,opt,name=closed_amount,json=closedAmount,proto3" json:"closed_amount,omitempty"`                           // 平仓金额
	OpenTime             int64         `protobuf:"varint,12,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`                                        // 开仓时间
	CloseTime            int64         `protobuf:"varint,13,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`                                     // 平仓时间
	OpenTradingDay       int32         `protobuf:"varint,14,opt,name=open_trading_day,json=openTradingDay,proto3" json:"open_trading_day,omitempty"`                    // 开仓交易日
	CloseTradingDay      int32         `protobuf:"varint,15,opt,name=close_trading_day,json=closeTradingDay,proto3" json:"close_trading_day,omitempty"`                 // 平仓交易日
	FloatProfit          float64       `protobuf:"fixed64,16,opt,name=float_profit,json=floatProfit,proto3" json:"float_profit,omitempty"`                              // 持仓盈亏
	OpenTradeId          string        `protobuf:"bytes,17,opt,name=open_trade_id,json=openTradeId,proto3" json:"open_trade_id,omitempty"`                              // 开仓成交编号
	CloseTradeId         string        `protobuf:"bytes,18,opt,name=close_trade_id,json=closeTradeId,proto3" json:"close_trade_id,omitempty"`                           // 平仓成交编号
	OpenTradeType        int32         `protobuf:"varint,19,opt,name=open_trade_type,json=openTradeType,proto3" json:"open_trade_type,omitempty"`                       // 开仓成交类型
	CloseTradeType       int32         `protobuf:"varint,20,opt,name=close_trade_type,json=closeTradeType,proto3" json:"close_trade_type,omitempty"`                    // 平仓成交类型
	OpenOrderHedgeType   int32         `protobuf:"varint,21,opt,name=open_order_hedge_type,json=openOrderHedgeType,proto3" json:"open_order_hedge_type,omitempty"`      // 开仓投机套保类型
	CloseOrderHedgeType  int32         `protobuf:"varint,22,opt,name=close_order_hedge_type,json=closeOrderHedgeType,proto3" json:"close_order_hedge_type,omitempty"`   // 平仓投机套保类型
	ClosedProfit         float64       `protobuf:"fixed64,23,opt,name=closed_profit,json=closedProfit,proto3" json:"closed_profit,omitempty"`                           // 平仓盈亏
	PreSettlementPrice   float64       `protobuf:"fixed64,24,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"`       // 昨结
	InitialOpenAmount    float64       `protobuf:"fixed64,27,opt,name=initial_open_amount,json=initialOpenAmount,proto3" json:"initial_open_amount,omitempty"`          // 初始开仓金额
	Multiple             int32         `protobuf:"varint,28,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                        // 合约乘数
	LastSettleDate       int32         `protobuf:"varint,30,opt,name=last_settle_date,json=lastSettleDate,proto3" json:"last_settle_date,omitempty"`                    // 结算交易日
	LastSettlementPrice  float64       `protobuf:"fixed64,31,opt,name=last_settlement_price,json=lastSettlementPrice,proto3" json:"last_settlement_price,omitempty"`    // 结算价
	LastSettlementProfit float64       `protobuf:"fixed64,32,opt,name=last_settlement_profit,json=lastSettlementProfit,proto3" json:"last_settlement_profit,omitempty"` // 结算盈亏
	PriceTick            float64       `protobuf:"fixed64,33,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`                                    // 变动点
	SymbolName           string        `protobuf:"bytes,34,opt,name=symbol_name,json=symbolName,proto3" json:"symbol_name,omitempty"`                                   // 合约名称
	LastPrice            float64       `protobuf:"fixed64,35,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`                                    // 最新价
	UserName             string        `protobuf:"bytes,36,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`                                         // 用户名
	TradingDay           int32         `protobuf:"varint,37,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                                  // 当前交易日
	ExpireDate           int32         `protobuf:"varint,38,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                  // 到期日
	Branch               string        `protobuf:"bytes,39,opt,name=branch,proto3" json:"branch,omitempty"`                                                             // 部门
	BranchName           string        `protobuf:"bytes,40,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`                                   // 部门名称
	Margin               float64       `protobuf:"fixed64,41,opt,name=margin,proto3" json:"margin,omitempty"`                                                           // 保证金占用
	MarketValue          float64       `protobuf:"fixed64,42,opt,name=market_value,json=marketValue,proto3" json:"market_value,omitempty"`                              // 市值
	CloseComment         string        `protobuf:"bytes,43,opt,name=close_comment,json=closeComment,proto3" json:"close_comment,omitempty"`                             // 平仓备注
	OpenOrderSessionId   int32         `protobuf:"varint,44,opt,name=open_order_session_id,json=openOrderSessionId,proto3" json:"open_order_session_id,omitempty"`      // 开仓session
	CloseOrderSessionId  int32         `protobuf:"varint,45,opt,name=close_order_session_id,json=closeOrderSessionId,proto3" json:"close_order_session_id,omitempty"`   // 平仓session
	OpenOrderRef         string        `protobuf:"bytes,46,opt,name=open_order_ref,json=openOrderRef,proto3" json:"open_order_ref,omitempty"`                           // 开仓ref
	CloseOrderRef        string        `protobuf:"bytes,47,opt,name=close_order_ref,json=closeOrderRef,proto3" json:"close_order_ref,omitempty"`                        // 平仓ref
}

func (x *CloseTradeMatch) Reset() {
	*x = CloseTradeMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTradeMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTradeMatch) ProtoMessage() {}

func (x *CloseTradeMatch) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTradeMatch.ProtoReflect.Descriptor instead.
func (*CloseTradeMatch) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{6}
}

func (x *CloseTradeMatch) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CloseTradeMatch) GetTaId() string {
	if x != nil {
		return x.TaId
	}
	return ""
}

func (x *CloseTradeMatch) GetBuId() string {
	if x != nil {
		return x.BuId
	}
	return ""
}

func (x *CloseTradeMatch) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *CloseTradeMatch) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CloseTradeMatch) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *CloseTradeMatch) GetDirection() DirectionType {
	if x != nil {
		return x.Direction
	}
	return DirectionType_LONG
}

func (x *CloseTradeMatch) GetOpenVolume() int32 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *CloseTradeMatch) GetOpenAmount() float64 {
	if x != nil {
		return x.OpenAmount
	}
	return 0
}

func (x *CloseTradeMatch) GetClosedVolume() int32 {
	if x != nil {
		return x.ClosedVolume
	}
	return 0
}

func (x *CloseTradeMatch) GetClosedAmount() float64 {
	if x != nil {
		return x.ClosedAmount
	}
	return 0
}

func (x *CloseTradeMatch) GetOpenTime() int64 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *CloseTradeMatch) GetCloseTime() int64 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *CloseTradeMatch) GetOpenTradingDay() int32 {
	if x != nil {
		return x.OpenTradingDay
	}
	return 0
}

func (x *CloseTradeMatch) GetCloseTradingDay() int32 {
	if x != nil {
		return x.CloseTradingDay
	}
	return 0
}

func (x *CloseTradeMatch) GetFloatProfit() float64 {
	if x != nil {
		return x.FloatProfit
	}
	return 0
}

func (x *CloseTradeMatch) GetOpenTradeId() string {
	if x != nil {
		return x.OpenTradeId
	}
	return ""
}

func (x *CloseTradeMatch) GetCloseTradeId() string {
	if x != nil {
		return x.CloseTradeId
	}
	return ""
}

func (x *CloseTradeMatch) GetOpenTradeType() int32 {
	if x != nil {
		return x.OpenTradeType
	}
	return 0
}

func (x *CloseTradeMatch) GetCloseTradeType() int32 {
	if x != nil {
		return x.CloseTradeType
	}
	return 0
}

func (x *CloseTradeMatch) GetOpenOrderHedgeType() int32 {
	if x != nil {
		return x.OpenOrderHedgeType
	}
	return 0
}

func (x *CloseTradeMatch) GetCloseOrderHedgeType() int32 {
	if x != nil {
		return x.CloseOrderHedgeType
	}
	return 0
}

func (x *CloseTradeMatch) GetClosedProfit() float64 {
	if x != nil {
		return x.ClosedProfit
	}
	return 0
}

func (x *CloseTradeMatch) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *CloseTradeMatch) GetInitialOpenAmount() float64 {
	if x != nil {
		return x.InitialOpenAmount
	}
	return 0
}

func (x *CloseTradeMatch) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *CloseTradeMatch) GetLastSettleDate() int32 {
	if x != nil {
		return x.LastSettleDate
	}
	return 0
}

func (x *CloseTradeMatch) GetLastSettlementPrice() float64 {
	if x != nil {
		return x.LastSettlementPrice
	}
	return 0
}

func (x *CloseTradeMatch) GetLastSettlementProfit() float64 {
	if x != nil {
		return x.LastSettlementProfit
	}
	return 0
}

func (x *CloseTradeMatch) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *CloseTradeMatch) GetSymbolName() string {
	if x != nil {
		return x.SymbolName
	}
	return ""
}

func (x *CloseTradeMatch) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *CloseTradeMatch) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CloseTradeMatch) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *CloseTradeMatch) GetExpireDate() int32 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *CloseTradeMatch) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CloseTradeMatch) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CloseTradeMatch) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *CloseTradeMatch) GetMarketValue() float64 {
	if x != nil {
		return x.MarketValue
	}
	return 0
}

func (x *CloseTradeMatch) GetCloseComment() string {
	if x != nil {
		return x.CloseComment
	}
	return ""
}

func (x *CloseTradeMatch) GetOpenOrderSessionId() int32 {
	if x != nil {
		return x.OpenOrderSessionId
	}
	return 0
}

func (x *CloseTradeMatch) GetCloseOrderSessionId() int32 {
	if x != nil {
		return x.CloseOrderSessionId
	}
	return 0
}

func (x *CloseTradeMatch) GetOpenOrderRef() string {
	if x != nil {
		return x.OpenOrderRef
	}
	return ""
}

func (x *CloseTradeMatch) GetCloseOrderRef() string {
	if x != nil {
		return x.CloseOrderRef
	}
	return ""
}

type CloseTradeMatchList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List       []*CloseTradeMatch `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Multiple   int32              `protobuf:"varint,2,opt,name=multiple,proto3" json:"multiple,omitempty"`
	PriceTick  float64            `protobuf:"fixed64,3,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`
	TradingDay int32              `protobuf:"varint,4,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
}

func (x *CloseTradeMatchList) Reset() {
	*x = CloseTradeMatchList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_position_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTradeMatchList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTradeMatchList) ProtoMessage() {}

func (x *CloseTradeMatchList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_position_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTradeMatchList.ProtoReflect.Descriptor instead.
func (*CloseTradeMatchList) Descriptor() ([]byte, []int) {
	return file_goshare_position_proto_rawDescGZIP(), []int{7}
}

func (x *CloseTradeMatchList) GetList() []*CloseTradeMatch {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CloseTradeMatchList) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *CloseTradeMatchList) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *CloseTradeMatchList) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

var File_goshare_position_proto protoreflect.FileDescriptor

var file_goshare_position_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x1a, 0x13, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22,
	0x96, 0x06, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x79, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64, 0x61,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x17, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x79, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x79, 0x65, 0x73, 0x74, 0x65, 0x72, 0x64,
	0x61, 0x79, 0x22, 0xa3, 0x04, 0x0a, 0x0e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x6f, 0x6e, 0x67,
	0x12, 0x36, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x22, 0x88, 0x08, 0x0a, 0x0e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x62,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x34,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x22, 0xe1, 0x0c, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12,
	0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x65, 0x64, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x2a, 0x3c, 0x0a, 0x15, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x45, 0x53, 0x54,
	0x45, 0x52, 0x44, 0x41, 0x59, 0x10, 0x02, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x65, 0x6e, 0x6a,
	0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67,
	0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_goshare_position_proto_rawDescOnce sync.Once
	file_goshare_position_proto_rawDescData = file_goshare_position_proto_rawDesc
)

func file_goshare_position_proto_rawDescGZIP() []byte {
	file_goshare_position_proto_rawDescOnce.Do(func() {
		file_goshare_position_proto_rawDescData = protoimpl.X.CompressGZIP(file_goshare_position_proto_rawDescData)
	})
	return file_goshare_position_proto_rawDescData
}

var file_goshare_position_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_goshare_position_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_goshare_position_proto_goTypes = []interface{}{
	(PositionSummationType)(0),      // 0: goshare.PositionSummationType
	(*PositionSummation)(nil),       // 1: goshare.PositionSummation
	(*Position)(nil),                // 2: goshare.Position
	(*SymbolPositionSummation)(nil), // 3: goshare.SymbolPositionSummation
	(*SymbolPosition)(nil),          // 4: goshare.SymbolPosition
	(*PositionDetail)(nil),          // 5: goshare.PositionDetail
	(*PositionDetailList)(nil),      // 6: goshare.PositionDetailList
	(*CloseTradeMatch)(nil),         // 7: goshare.CloseTradeMatch
	(*CloseTradeMatchList)(nil),     // 8: goshare.CloseTradeMatchList
	(DirectionType)(0),              // 9: goshare.DirectionType
}
var file_goshare_position_proto_depIdxs = []int32{
	9,  // 0: goshare.PositionSummation.direction:type_name -> goshare.DirectionType
	9,  // 1: goshare.Position.direction:type_name -> goshare.DirectionType
	1,  // 2: goshare.Position.total:type_name -> goshare.PositionSummation
	1,  // 3: goshare.Position.today:type_name -> goshare.PositionSummation
	1,  // 4: goshare.Position.yesterday:type_name -> goshare.PositionSummation
	1,  // 5: goshare.SymbolPositionSummation.total:type_name -> goshare.PositionSummation
	1,  // 6: goshare.SymbolPositionSummation.today:type_name -> goshare.PositionSummation
	1,  // 7: goshare.SymbolPositionSummation.yesterday:type_name -> goshare.PositionSummation
	3,  // 8: goshare.SymbolPosition.long:type_name -> goshare.SymbolPositionSummation
	3,  // 9: goshare.SymbolPosition.short:type_name -> goshare.SymbolPositionSummation
	9,  // 10: goshare.PositionDetail.direction:type_name -> goshare.DirectionType
	5,  // 11: goshare.PositionDetailList.list:type_name -> goshare.PositionDetail
	9,  // 12: goshare.CloseTradeMatch.direction:type_name -> goshare.DirectionType
	7,  // 13: goshare.CloseTradeMatchList.list:type_name -> goshare.CloseTradeMatch
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_goshare_position_proto_init() }
func file_goshare_position_proto_init() {
	if File_goshare_position_proto != nil {
		return
	}
	file_goshare_order_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_goshare_position_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionSummation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_position_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_position_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolPositionSummation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_position_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_position_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_position_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionDetailList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_position_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTradeMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_position_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTradeMatchList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goshare_position_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goshare_position_proto_goTypes,
		DependencyIndexes: file_goshare_position_proto_depIdxs,
		EnumInfos:         file_goshare_position_proto_enumTypes,
		MessageInfos:      file_goshare_position_proto_msgTypes,
	}.Build()
	File_goshare_position_proto = out.File
	file_goshare_position_proto_rawDesc = nil
	file_goshare_position_proto_goTypes = nil
	file_goshare_position_proto_depIdxs = nil
}
