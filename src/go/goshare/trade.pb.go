// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: goshare/trade.proto

package goshare

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 成交类型
type TradeType int32

const (
	// 普通成交
	TradeType_TT_NORMAL TradeType = 0
	// 期权执行
	TradeType_TT_OPTIONS_EXECUTION TradeType = 1
	// OTC成交
	TradeType_TT_OTC TradeType = 2
	// 期转现衍生成交
	TradeType_TT_EFP_DERIVED TradeType = 3
	// 组合衍生成交
	TradeType_TT_COMBINATION_DERIVED TradeType = 4
	// 交割平仓
	TradeType_TT_DELIVERY_CLOSE TradeType = 5
	// 结算衍生
	TradeType_TT_SETTLEMENT_DERIVED TradeType = 6
	// 分红股票
	TradeType_TT_PLACEMENT_DERIVED TradeType = 7
	// 回购
	TradeType_TT_REPURCHASE TradeType = 8
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "TT_NORMAL",
		1: "TT_OPTIONS_EXECUTION",
		2: "TT_OTC",
		3: "TT_EFP_DERIVED",
		4: "TT_COMBINATION_DERIVED",
		5: "TT_DELIVERY_CLOSE",
		6: "TT_SETTLEMENT_DERIVED",
		7: "TT_PLACEMENT_DERIVED",
		8: "TT_REPURCHASE",
	}
	TradeType_value = map[string]int32{
		"TT_NORMAL":              0,
		"TT_OPTIONS_EXECUTION":   1,
		"TT_OTC":                 2,
		"TT_EFP_DERIVED":         3,
		"TT_COMBINATION_DERIVED": 4,
		"TT_DELIVERY_CLOSE":      5,
		"TT_SETTLEMENT_DERIVED":  6,
		"TT_PLACEMENT_DERIVED":   7,
		"TT_REPURCHASE":          8,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_goshare_trade_proto_enumTypes[0].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_goshare_trade_proto_enumTypes[0]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_goshare_trade_proto_rawDescGZIP(), []int{0}
}

// 成交
type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange         string        `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol           string        `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Product          string        `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	Direction        DirectionType `protobuf:"varint,5,opt,name=direction,proto3,enum=goshare.DirectionType" json:"direction,omitempty"`
	Offset           int32         `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
	Price            float64       `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Volume           int32         `protobuf:"varint,8,opt,name=volume,proto3" json:"volume,omitempty"`
	UserId           string        `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TaId             string        `protobuf:"bytes,10,opt,name=ta_id,json=taId,proto3" json:"ta_id,omitempty"`
	BuId             string        `protobuf:"bytes,11,opt,name=bu_id,json=buId,proto3" json:"bu_id,omitempty"`
	TradeId          string        `protobuf:"bytes,12,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	TradedTime       int64         `protobuf:"varint,13,opt,name=traded_time,json=tradedTime,proto3" json:"traded_time,omitempty"`
	TradedTradingDay int32         `protobuf:"varint,14,opt,name=traded_trading_day,json=tradedTradingDay,proto3" json:"traded_trading_day,omitempty"`
	FrontId          int32         `protobuf:"varint,15,opt,name=front_id,json=frontId,proto3" json:"front_id,omitempty"`
	SessionId        int32         `protobuf:"varint,16,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OrderRef         string        `protobuf:"bytes,17,opt,name=order_ref,json=orderRef,proto3" json:"order_ref,omitempty"`
	UserName         string        `protobuf:"bytes,18,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Branch           string        `protobuf:"bytes,19,opt,name=branch,proto3" json:"branch,omitempty"`
	BranchName       string        `protobuf:"bytes,20,opt,name=branch_name,json=branchName,proto3" json:"branch_name,omitempty"`
	TradeType        int32         `protobuf:"varint,21,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`
	ExchangeOrderId  string        `protobuf:"bytes,22,opt,name=exchange_order_id,json=exchangeOrderId,proto3" json:"exchange_order_id,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_goshare_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Trade) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Trade) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Trade) GetDirection() DirectionType {
	if x != nil {
		return x.Direction
	}
	return DirectionType_LONG
}

func (x *Trade) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Trade) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Trade) GetTaId() string {
	if x != nil {
		return x.TaId
	}
	return ""
}

func (x *Trade) GetBuId() string {
	if x != nil {
		return x.BuId
	}
	return ""
}

func (x *Trade) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *Trade) GetTradedTime() int64 {
	if x != nil {
		return x.TradedTime
	}
	return 0
}

func (x *Trade) GetTradedTradingDay() int32 {
	if x != nil {
		return x.TradedTradingDay
	}
	return 0
}

func (x *Trade) GetFrontId() int32 {
	if x != nil {
		return x.FrontId
	}
	return 0
}

func (x *Trade) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Trade) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *Trade) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Trade) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Trade) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *Trade) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *Trade) GetExchangeOrderId() string {
	if x != nil {
		return x.ExchangeOrderId
	}
	return ""
}

type TradeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Trade `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TradeList) Reset() {
	*x = TradeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeList) ProtoMessage() {}

func (x *TradeList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeList.ProtoReflect.Descriptor instead.
func (*TradeList) Descriptor() ([]byte, []int) {
	return file_goshare_trade_proto_rawDescGZIP(), []int{1}
}

func (x *TradeList) GetList() []*Trade {
	if x != nil {
		return x.List
	}
	return nil
}

var File_goshare_trade_proto protoreflect.FileDescriptor

var file_goshare_trade_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x13,
	0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf6, 0x04, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x74, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x2a, 0xcf, 0x01,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x54,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x54, 0x5f, 0x4f, 0x54, 0x43, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x54, 0x5f, 0x45, 0x46, 0x50, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x54, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x08, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61,
	0x6d, 0x65, 0x73, 0x73, 0x68, 0x65, 0x6e, 0x6a, 0x69, 0x61, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goshare_trade_proto_rawDescOnce sync.Once
	file_goshare_trade_proto_rawDescData = file_goshare_trade_proto_rawDesc
)

func file_goshare_trade_proto_rawDescGZIP() []byte {
	file_goshare_trade_proto_rawDescOnce.Do(func() {
		file_goshare_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_goshare_trade_proto_rawDescData)
	})
	return file_goshare_trade_proto_rawDescData
}

var file_goshare_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_goshare_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_goshare_trade_proto_goTypes = []interface{}{
	(TradeType)(0),     // 0: goshare.TradeType
	(*Trade)(nil),      // 1: goshare.Trade
	(*TradeList)(nil),  // 2: goshare.TradeList
	(DirectionType)(0), // 3: goshare.DirectionType
}
var file_goshare_trade_proto_depIdxs = []int32{
	3, // 0: goshare.Trade.direction:type_name -> goshare.DirectionType
	1, // 1: goshare.TradeList.list:type_name -> goshare.Trade
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_goshare_trade_proto_init() }
func file_goshare_trade_proto_init() {
	if File_goshare_trade_proto != nil {
		return
	}
	file_goshare_order_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_goshare_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goshare_trade_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goshare_trade_proto_goTypes,
		DependencyIndexes: file_goshare_trade_proto_depIdxs,
		EnumInfos:         file_goshare_trade_proto_enumTypes,
		MessageInfos:      file_goshare_trade_proto_msgTypes,
	}.Build()
	File_goshare_trade_proto = out.File
	file_goshare_trade_proto_rawDesc = nil
	file_goshare_trade_proto_goTypes = nil
	file_goshare_trade_proto_depIdxs = nil
}
