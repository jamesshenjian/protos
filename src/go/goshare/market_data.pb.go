// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: goshare/market_data.proto

package goshare

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ask       float64 `protobuf:"fixed64,1,opt,name=ask,proto3" json:"ask,omitempty"`                             /// 卖价
	AskVolume int32   `protobuf:"varint,2,opt,name=ask_volume,json=askVolume,proto3" json:"ask_volume,omitempty"` /// 卖量
	Bid       float64 `protobuf:"fixed64,3,opt,name=bid,proto3" json:"bid,omitempty"`                             /// 买价
	BidVolume int32   `protobuf:"varint,4,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"` /// 买量
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{0}
}

func (x *OrderBook) GetAsk() float64 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *OrderBook) GetAskVolume() int32 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *OrderBook) GetBid() float64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *OrderBook) GetBidVolume() int32 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

// 深度行情
type MarketDataSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange        string       `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`                                         // 交易所
	Symbol          string       `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`                                             // 合约
	Time            int64        `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`                                                // 时间time_t
	Milliseconds    int32        `protobuf:"varint,4,opt,name=milliseconds,proto3" json:"milliseconds,omitempty"`                                // 毫秒
	Open            float64      `protobuf:"fixed64,5,opt,name=open,proto3" json:"open,omitempty"`                                               // 开盘
	High            float64      `protobuf:"fixed64,6,opt,name=high,proto3" json:"high,omitempty"`                                               // 最高
	Low             float64      `protobuf:"fixed64,7,opt,name=low,proto3" json:"low,omitempty"`                                                 // 最低
	Close           float64      `protobuf:"fixed64,8,opt,name=close,proto3" json:"close,omitempty"`                                             // 收盘
	Volume          int32        `protobuf:"varint,9,opt,name=volume,proto3" json:"volume,omitempty"`                                            // 成交量
	Amount          float64      `protobuf:"fixed64,10,opt,name=amount,proto3" json:"amount,omitempty"`                                          // 成交金额
	Position        int32        `protobuf:"varint,11,opt,name=position,proto3" json:"position,omitempty"`                                       // 持仓
	Price           float64      `protobuf:"fixed64,12,opt,name=price,proto3" json:"price,omitempty"`                                            // 最新价格
	PreClose        float64      `protobuf:"fixed64,13,opt,name=pre_close,json=preClose,proto3" json:"pre_close,omitempty"`                      // 昨收
	PreSettlement   float64      `protobuf:"fixed64,14,opt,name=pre_settlement,json=preSettlement,proto3" json:"pre_settlement,omitempty"`       // 昨结
	PrePosition     int32        `protobuf:"varint,15,opt,name=pre_position,json=prePosition,proto3" json:"pre_position,omitempty"`              // 昨持仓
	SettlementPrice float64      `protobuf:"fixed64,16,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"` // 结算价
	UpperLimit      float64      `protobuf:"fixed64,17,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`                // 涨停
	LowerLimit      float64      `protobuf:"fixed64,18,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`                // 跌停
	PreDelta        float64      `protobuf:"fixed64,19,opt,name=pre_delta,json=preDelta,proto3" json:"pre_delta,omitempty"`                      // 昨虚实
	Delta           float64      `protobuf:"fixed64,20,opt,name=delta,proto3" json:"delta,omitempty"`                                            // 今虚实
	AveragePrice    float64      `protobuf:"fixed64,21,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`          // 均价
	TradingDay      int32        `protobuf:"varint,22,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`                 // 交易日
	Name            string       `protobuf:"bytes,23,opt,name=name,proto3" json:"name,omitempty"`                                                // 合约名称
	ExercisePrice   float64      `protobuf:"fixed64,24,opt,name=exercise_price,json=exercisePrice,proto3" json:"exercise_price,omitempty"`       // 执行价
	VolumeDelta     int32        `protobuf:"varint,25,opt,name=volume_delta,json=volumeDelta,proto3" json:"volume_delta,omitempty"`              // 成交增量
	ActionDay       int32        `protobuf:"varint,27,opt,name=action_day,json=actionDay,proto3" json:"action_day,omitempty"`                    // action day
	Multiple        int32        `protobuf:"varint,28,opt,name=multiple,proto3" json:"multiple,omitempty"`                                       // multiple
	PriceTick       float64      `protobuf:"fixed64,39,opt,name=price_tick,json=priceTick,proto3" json:"price_tick,omitempty"`                   // price tick
	Depths          []*OrderBook `protobuf:"bytes,30,rep,name=depths,proto3" json:"depths,omitempty"`                                            // 深度
}

func (x *MarketDataSnapshot) Reset() {
	*x = MarketDataSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataSnapshot) ProtoMessage() {}

func (x *MarketDataSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataSnapshot.ProtoReflect.Descriptor instead.
func (*MarketDataSnapshot) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{1}
}

func (x *MarketDataSnapshot) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *MarketDataSnapshot) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketDataSnapshot) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MarketDataSnapshot) GetMilliseconds() int32 {
	if x != nil {
		return x.Milliseconds
	}
	return 0
}

func (x *MarketDataSnapshot) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *MarketDataSnapshot) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *MarketDataSnapshot) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *MarketDataSnapshot) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *MarketDataSnapshot) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataSnapshot) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MarketDataSnapshot) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *MarketDataSnapshot) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataSnapshot) GetPreClose() float64 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *MarketDataSnapshot) GetPreSettlement() float64 {
	if x != nil {
		return x.PreSettlement
	}
	return 0
}

func (x *MarketDataSnapshot) GetPrePosition() int32 {
	if x != nil {
		return x.PrePosition
	}
	return 0
}

func (x *MarketDataSnapshot) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetUpperLimit() float64 {
	if x != nil {
		return x.UpperLimit
	}
	return 0
}

func (x *MarketDataSnapshot) GetLowerLimit() float64 {
	if x != nil {
		return x.LowerLimit
	}
	return 0
}

func (x *MarketDataSnapshot) GetPreDelta() float64 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *MarketDataSnapshot) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *MarketDataSnapshot) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *MarketDataSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketDataSnapshot) GetExercisePrice() float64 {
	if x != nil {
		return x.ExercisePrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetVolumeDelta() int32 {
	if x != nil {
		return x.VolumeDelta
	}
	return 0
}

func (x *MarketDataSnapshot) GetActionDay() int32 {
	if x != nil {
		return x.ActionDay
	}
	return 0
}

func (x *MarketDataSnapshot) GetMultiple() int32 {
	if x != nil {
		return x.Multiple
	}
	return 0
}

func (x *MarketDataSnapshot) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *MarketDataSnapshot) GetDepths() []*OrderBook {
	if x != nil {
		return x.Depths
	}
	return nil
}

// MdsList 行情列表
type MdsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MarketDataSnapshot `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MdsList) Reset() {
	*x = MdsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdsList) ProtoMessage() {}

func (x *MdsList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdsList.ProtoReflect.Descriptor instead.
func (*MdsList) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{2}
}

func (x *MdsList) GetList() []*MarketDataSnapshot {
	if x != nil {
		return x.List
	}
	return nil
}

// 期权T型
type OptionTMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallTk *MarketDataSnapshot `protobuf:"bytes,1,opt,name=callTk,proto3" json:"callTk,omitempty"` // call报价
	PutTk  *MarketDataSnapshot `protobuf:"bytes,2,opt,name=putTk,proto3" json:"putTk,omitempty"`   // put报价
}

func (x *OptionTMarket) Reset() {
	*x = OptionTMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionTMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionTMarket) ProtoMessage() {}

func (x *OptionTMarket) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionTMarket.ProtoReflect.Descriptor instead.
func (*OptionTMarket) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{3}
}

func (x *OptionTMarket) GetCallTk() *MarketDataSnapshot {
	if x != nil {
		return x.CallTk
	}
	return nil
}

func (x *OptionTMarket) GetPutTk() *MarketDataSnapshot {
	if x != nil {
		return x.PutTk
	}
	return nil
}

// 简易期权T型报价
type SimpleTickForTQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange           string  `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol             string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price              float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	UpDownRatio        float64 `protobuf:"fixed64,4,opt,name=up_down_ratio,json=upDownRatio,proto3" json:"up_down_ratio,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,5,opt,name=pre_settlement_price,json=preSettlementPrice,proto3" json:"pre_settlement_price,omitempty"`
	Name               string  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SimpleTickForTQuote) Reset() {
	*x = SimpleTickForTQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTickForTQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTickForTQuote) ProtoMessage() {}

func (x *SimpleTickForTQuote) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTickForTQuote.ProtoReflect.Descriptor instead.
func (*SimpleTickForTQuote) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{4}
}

func (x *SimpleTickForTQuote) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SimpleTickForTQuote) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SimpleTickForTQuote) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SimpleTickForTQuote) GetUpDownRatio() float64 {
	if x != nil {
		return x.UpDownRatio
	}
	return 0
}

func (x *SimpleTickForTQuote) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *SimpleTickForTQuote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// T型报价的一行
type OptionTQuoteItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExercisePrice     float64              `protobuf:"fixed64,1,opt,name=exercise_price,json=exercisePrice,proto3" json:"exercise_price,omitempty"`
	Call              *SimpleTickForTQuote `protobuf:"bytes,2,opt,name=call,proto3" json:"call,omitempty"`
	Put               *SimpleTickForTQuote `protobuf:"bytes,3,opt,name=put,proto3" json:"put,omitempty"`
	ExercisePriceFlag string               `protobuf:"bytes,4,opt,name=exercise_price_flag,json=exercisePriceFlag,proto3" json:"exercise_price_flag,omitempty"`
}

func (x *OptionTQuoteItem) Reset() {
	*x = OptionTQuoteItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionTQuoteItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionTQuoteItem) ProtoMessage() {}

func (x *OptionTQuoteItem) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionTQuoteItem.ProtoReflect.Descriptor instead.
func (*OptionTQuoteItem) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{5}
}

func (x *OptionTQuoteItem) GetExercisePrice() float64 {
	if x != nil {
		return x.ExercisePrice
	}
	return 0
}

func (x *OptionTQuoteItem) GetCall() *SimpleTickForTQuote {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *OptionTQuoteItem) GetPut() *SimpleTickForTQuote {
	if x != nil {
		return x.Put
	}
	return nil
}

func (x *OptionTQuoteItem) GetExercisePriceFlag() string {
	if x != nil {
		return x.ExercisePriceFlag
	}
	return ""
}

// OptionTQuoteItemList 列表
type OptionTQuoteItemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange     int32               `protobuf:"varint,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	StrikeSymbol string              `protobuf:"bytes,2,opt,name=strike_symbol,json=strikeSymbol,proto3" json:"strike_symbol,omitempty"`
	Month        string              `protobuf:"bytes,3,opt,name=month,proto3" json:"month,omitempty"`
	List         []*OptionTQuoteItem `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *OptionTQuoteItemList) Reset() {
	*x = OptionTQuoteItemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionTQuoteItemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionTQuoteItemList) ProtoMessage() {}

func (x *OptionTQuoteItemList) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionTQuoteItemList.ProtoReflect.Descriptor instead.
func (*OptionTQuoteItemList) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{6}
}

func (x *OptionTQuoteItemList) GetExchange() int32 {
	if x != nil {
		return x.Exchange
	}
	return 0
}

func (x *OptionTQuoteItemList) GetStrikeSymbol() string {
	if x != nil {
		return x.StrikeSymbol
	}
	return ""
}

func (x *OptionTQuoteItemList) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *OptionTQuoteItemList) GetList() []*OptionTQuoteItem {
	if x != nil {
		return x.List
	}
	return nil
}

// K线
type Kline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`                               // 时间
	Open       float64 `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`                              // 开盘
	High       float64 `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`                              // 最高
	Low        float64 `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`                                // 最低
	Close      float64 `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`                            // 收盘
	Volume     int32   `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`                           // 成交量
	Amount     float64 `protobuf:"fixed64,7,opt,name=amount,proto3" json:"amount,omitempty"`                          // 成交额
	Position   int32   `protobuf:"varint,8,opt,name=position,proto3" json:"position,omitempty"`                       // 持仓量
	TradingDay int32   `protobuf:"varint,9,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"` // 交易日
}

func (x *Kline) Reset() {
	*x = Kline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kline) ProtoMessage() {}

func (x *Kline) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kline.ProtoReflect.Descriptor instead.
func (*Kline) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{7}
}

func (x *Kline) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Kline) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Kline) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Kline) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Kline) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Kline) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Kline) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Kline) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Kline) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

// KlineSeries K线序列
type KlineSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange        string     `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol          string     `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Period          PeriodType `protobuf:"varint,3,opt,name=period,proto3,enum=goshare.PeriodType" json:"period,omitempty"`
	PeriodInSeconds int32      `protobuf:"varint,4,opt,name=period_in_seconds,json=periodInSeconds,proto3" json:"period_in_seconds,omitempty"`
	List            []*Kline   `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *KlineSeries) Reset() {
	*x = KlineSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KlineSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KlineSeries) ProtoMessage() {}

func (x *KlineSeries) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KlineSeries.ProtoReflect.Descriptor instead.
func (*KlineSeries) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{8}
}

func (x *KlineSeries) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *KlineSeries) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *KlineSeries) GetPeriod() PeriodType {
	if x != nil {
		return x.Period
	}
	return PeriodType_TICK
}

func (x *KlineSeries) GetPeriodInSeconds() int32 {
	if x != nil {
		return x.PeriodInSeconds
	}
	return 0
}

func (x *KlineSeries) GetList() []*Kline {
	if x != nil {
		return x.List
	}
	return nil
}

// 订阅行情
type ReqSubscribeMarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange   string       `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol     string       `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PeriodList []PeriodType `protobuf:"varint,3,rep,packed,name=periodList,proto3,enum=goshare.PeriodType" json:"periodList,omitempty"`
}

func (x *ReqSubscribeMarketData) Reset() {
	*x = ReqSubscribeMarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSubscribeMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSubscribeMarketData) ProtoMessage() {}

func (x *ReqSubscribeMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSubscribeMarketData.ProtoReflect.Descriptor instead.
func (*ReqSubscribeMarketData) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{9}
}

func (x *ReqSubscribeMarketData) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ReqSubscribeMarketData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ReqSubscribeMarketData) GetPeriodList() []PeriodType {
	if x != nil {
		return x.PeriodList
	}
	return nil
}

// 返回订阅行情
type RspSubscribeMarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RspSubscribeMarketData) Reset() {
	*x = RspSubscribeMarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RspSubscribeMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RspSubscribeMarketData) ProtoMessage() {}

func (x *RspSubscribeMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RspSubscribeMarketData.ProtoReflect.Descriptor instead.
func (*RspSubscribeMarketData) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{10}
}

// 推送订阅行情更新事件
type RtnMarketDataUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tick      *MarketDataSnapshot `protobuf:"bytes,1,opt,name=tick,proto3" json:"tick,omitempty"`                            // 最新盘口
	KlineList []*Kline            `protobuf:"bytes,2,rep,name=kline_list,json=klineList,proto3" json:"kline_list,omitempty"` // 最新一根K线
}

func (x *RtnMarketDataUpdate) Reset() {
	*x = RtnMarketDataUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RtnMarketDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RtnMarketDataUpdate) ProtoMessage() {}

func (x *RtnMarketDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RtnMarketDataUpdate.ProtoReflect.Descriptor instead.
func (*RtnMarketDataUpdate) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{11}
}

func (x *RtnMarketDataUpdate) GetTick() *MarketDataSnapshot {
	if x != nil {
		return x.Tick
	}
	return nil
}

func (x *RtnMarketDataUpdate) GetKlineList() []*Kline {
	if x != nil {
		return x.KlineList
	}
	return nil
}

// tick序列
type TickSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange   string                `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol     string                `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TradingDay int32                 `protobuf:"varint,3,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	List       []*MarketDataSnapshot `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TickSeries) Reset() {
	*x = TickSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickSeries) ProtoMessage() {}

func (x *TickSeries) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickSeries.ProtoReflect.Descriptor instead.
func (*TickSeries) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{12}
}

func (x *TickSeries) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TickSeries) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TickSeries) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *TickSeries) GetList() []*MarketDataSnapshot {
	if x != nil {
		return x.List
	}
	return nil
}

type SimpleTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time   int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Price  float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Volume int32   `protobuf:"varint,3,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *SimpleTick) Reset() {
	*x = SimpleTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTick) ProtoMessage() {}

func (x *SimpleTick) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTick.ProtoReflect.Descriptor instead.
func (*SimpleTick) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{13}
}

func (x *SimpleTick) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SimpleTick) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SimpleTick) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type SimpleTickSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange   string        `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol     string        `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TradingDay int32         `protobuf:"varint,3,opt,name=trading_day,json=tradingDay,proto3" json:"trading_day,omitempty"`
	List       []*SimpleTick `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SimpleTickSeries) Reset() {
	*x = SimpleTickSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleTickSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleTickSeries) ProtoMessage() {}

func (x *SimpleTickSeries) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleTickSeries.ProtoReflect.Descriptor instead.
func (*SimpleTickSeries) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{14}
}

func (x *SimpleTickSeries) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SimpleTickSeries) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SimpleTickSeries) GetTradingDay() int32 {
	if x != nil {
		return x.TradingDay
	}
	return 0
}

func (x *SimpleTickSeries) GetList() []*SimpleTick {
	if x != nil {
		return x.List
	}
	return nil
}

// 期货市场统计数据
type CtpFutureOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	YieldRank      []*CtpFutureOverview_RankItem `protobuf:"bytes,1,rep,name=yield_rank,json=yieldRank,proto3" json:"yield_rank,omitempty"`
	VolatilityRank []*CtpFutureOverview_RankItem `protobuf:"bytes,2,rep,name=volatility_rank,json=volatilityRank,proto3" json:"volatility_rank,omitempty"`
}

func (x *CtpFutureOverview) Reset() {
	*x = CtpFutureOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtpFutureOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtpFutureOverview) ProtoMessage() {}

func (x *CtpFutureOverview) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtpFutureOverview.ProtoReflect.Descriptor instead.
func (*CtpFutureOverview) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{15}
}

func (x *CtpFutureOverview) GetYieldRank() []*CtpFutureOverview_RankItem {
	if x != nil {
		return x.YieldRank
	}
	return nil
}

func (x *CtpFutureOverview) GetVolatilityRank() []*CtpFutureOverview_RankItem {
	if x != nil {
		return x.VolatilityRank
	}
	return nil
}

type CtpFutureOverview_RankItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange string  `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol   string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Yield    float64 `protobuf:"fixed64,3,opt,name=yield,proto3" json:"yield,omitempty"`
}

func (x *CtpFutureOverview_RankItem) Reset() {
	*x = CtpFutureOverview_RankItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goshare_market_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtpFutureOverview_RankItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtpFutureOverview_RankItem) ProtoMessage() {}

func (x *CtpFutureOverview_RankItem) ProtoReflect() protoreflect.Message {
	mi := &file_goshare_market_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtpFutureOverview_RankItem.ProtoReflect.Descriptor instead.
func (*CtpFutureOverview_RankItem) Descriptor() ([]byte, []int) {
	return file_goshare_market_data_proto_rawDescGZIP(), []int{15, 0}
}

func (x *CtpFutureOverview_RankItem) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *CtpFutureOverview_RankItem) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CtpFutureOverview_RankItem) GetYield() float64 {
	if x != nil {
		return x.Yield
	}
	return 0
}

var File_goshare_market_data_proto protoreflect.FileDescriptor

var file_goshare_market_data_proto_rawDesc = []byte{
	0x0a, 0x19, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x6f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x1a, 0x14, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6d, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61,
	0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xe3, 0x06, 0x0a, 0x12, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x18, 0x1e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x06, 0x64, 0x65, 0x70, 0x74, 0x68, 0x73, 0x22,
	0x3a, 0x0a, 0x07, 0x4d, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x0d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x06,
	0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x54,
	0x6b, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x75, 0x74, 0x54, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x05, 0x70,
	0x75, 0x74, 0x54, 0x6b, 0x22, 0xc9, 0x01, 0x0a, 0x13, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x46, 0x6f, 0x72, 0x54, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x70, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75,
	0x70, 0x44, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xcb, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x46,
	0x6f, 0x72, 0x54, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2e,
	0x0a, 0x03, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x46, 0x6f, 0x72, 0x54, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x03, 0x70, 0x75, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x9c,
	0x01, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x2d,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd8, 0x01,
	0x0a, 0x05, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x0b, 0x4b, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4b, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x18, 0x0a,
	0x16, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x75, 0x0a, 0x13, 0x52, 0x74, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12,
	0x2d, 0x0a, 0x0a, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4b, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x09, 0x6b, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x92,
	0x01, 0x0a, 0x0a, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x27, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x43, 0x74, 0x70, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x42, 0x0a, 0x0a,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x43, 0x74, 0x70, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x61, 0x6e,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x4c, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2e, 0x43, 0x74, 0x70, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e,
	0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x1a, 0x54,
	0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x65, 0x6e, 0x6a, 0x69, 0x61, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x67,
	0x6f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goshare_market_data_proto_rawDescOnce sync.Once
	file_goshare_market_data_proto_rawDescData = file_goshare_market_data_proto_rawDesc
)

func file_goshare_market_data_proto_rawDescGZIP() []byte {
	file_goshare_market_data_proto_rawDescOnce.Do(func() {
		file_goshare_market_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_goshare_market_data_proto_rawDescData)
	})
	return file_goshare_market_data_proto_rawDescData
}

var file_goshare_market_data_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_goshare_market_data_proto_goTypes = []interface{}{
	(*OrderBook)(nil),                  // 0: goshare.OrderBook
	(*MarketDataSnapshot)(nil),         // 1: goshare.MarketDataSnapshot
	(*MdsList)(nil),                    // 2: goshare.MdsList
	(*OptionTMarket)(nil),              // 3: goshare.OptionTMarket
	(*SimpleTickForTQuote)(nil),        // 4: goshare.SimpleTickForTQuote
	(*OptionTQuoteItem)(nil),           // 5: goshare.OptionTQuoteItem
	(*OptionTQuoteItemList)(nil),       // 6: goshare.OptionTQuoteItemList
	(*Kline)(nil),                      // 7: goshare.Kline
	(*KlineSeries)(nil),                // 8: goshare.KlineSeries
	(*ReqSubscribeMarketData)(nil),     // 9: goshare.ReqSubscribeMarketData
	(*RspSubscribeMarketData)(nil),     // 10: goshare.RspSubscribeMarketData
	(*RtnMarketDataUpdate)(nil),        // 11: goshare.RtnMarketDataUpdate
	(*TickSeries)(nil),                 // 12: goshare.TickSeries
	(*SimpleTick)(nil),                 // 13: goshare.SimpleTick
	(*SimpleTickSeries)(nil),           // 14: goshare.SimpleTickSeries
	(*CtpFutureOverview)(nil),          // 15: goshare.CtpFutureOverview
	(*CtpFutureOverview_RankItem)(nil), // 16: goshare.CtpFutureOverview.RankItem
	(PeriodType)(0),                    // 17: goshare.PeriodType
}
var file_goshare_market_data_proto_depIdxs = []int32{
	0,  // 0: goshare.MarketDataSnapshot.depths:type_name -> goshare.OrderBook
	1,  // 1: goshare.MdsList.list:type_name -> goshare.MarketDataSnapshot
	1,  // 2: goshare.OptionTMarket.callTk:type_name -> goshare.MarketDataSnapshot
	1,  // 3: goshare.OptionTMarket.putTk:type_name -> goshare.MarketDataSnapshot
	4,  // 4: goshare.OptionTQuoteItem.call:type_name -> goshare.SimpleTickForTQuote
	4,  // 5: goshare.OptionTQuoteItem.put:type_name -> goshare.SimpleTickForTQuote
	5,  // 6: goshare.OptionTQuoteItemList.list:type_name -> goshare.OptionTQuoteItem
	17, // 7: goshare.KlineSeries.period:type_name -> goshare.PeriodType
	7,  // 8: goshare.KlineSeries.list:type_name -> goshare.Kline
	17, // 9: goshare.ReqSubscribeMarketData.periodList:type_name -> goshare.PeriodType
	1,  // 10: goshare.RtnMarketDataUpdate.tick:type_name -> goshare.MarketDataSnapshot
	7,  // 11: goshare.RtnMarketDataUpdate.kline_list:type_name -> goshare.Kline
	1,  // 12: goshare.TickSeries.list:type_name -> goshare.MarketDataSnapshot
	13, // 13: goshare.SimpleTickSeries.list:type_name -> goshare.SimpleTick
	16, // 14: goshare.CtpFutureOverview.yield_rank:type_name -> goshare.CtpFutureOverview.RankItem
	16, // 15: goshare.CtpFutureOverview.volatility_rank:type_name -> goshare.CtpFutureOverview.RankItem
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_goshare_market_data_proto_init() }
func file_goshare_market_data_proto_init() {
	if File_goshare_market_data_proto != nil {
		return
	}
	file_goshare_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_goshare_market_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionTMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTickForTQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionTQuoteItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionTQuoteItemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KlineSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSubscribeMarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RspSubscribeMarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RtnMarketDataUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleTickSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtpFutureOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goshare_market_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtpFutureOverview_RankItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goshare_market_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goshare_market_data_proto_goTypes,
		DependencyIndexes: file_goshare_market_data_proto_depIdxs,
		MessageInfos:      file_goshare_market_data_proto_msgTypes,
	}.Build()
	File_goshare_market_data_proto = out.File
	file_goshare_market_data_proto_rawDesc = nil
	file_goshare_market_data_proto_goTypes = nil
	file_goshare_market_data_proto_depIdxs = nil
}
