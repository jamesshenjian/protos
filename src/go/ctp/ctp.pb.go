// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.2
// source: ctp/ctp.proto

package ctp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CtpMessageType int32

const (
	CtpMessageType_TD_OnFrontConnected                          CtpMessageType = 0
	CtpMessageType_TD_OnFrontDisconnected                       CtpMessageType = 1
	CtpMessageType_TD_OnHeartBeatWarning                        CtpMessageType = 2
	CtpMessageType_TD_OnRspAuthenticate                         CtpMessageType = 3
	CtpMessageType_TD_OnRspUserLogin                            CtpMessageType = 4
	CtpMessageType_TD_OnRspUserLogout                           CtpMessageType = 5
	CtpMessageType_TD_OnRspUserPasswordUpdate                   CtpMessageType = 6
	CtpMessageType_TD_OnRspTradingAccountPasswordUpdate         CtpMessageType = 7
	CtpMessageType_TD_OnRspUserAuthMethod                       CtpMessageType = 8
	CtpMessageType_TD_OnRspGenUserCaptcha                       CtpMessageType = 9
	CtpMessageType_TD_OnRspGenUserText                          CtpMessageType = 10
	CtpMessageType_TD_OnRspOrderInsert                          CtpMessageType = 11
	CtpMessageType_TD_OnRspParkedOrderInsert                    CtpMessageType = 12
	CtpMessageType_TD_OnRspParkedOrderAction                    CtpMessageType = 13
	CtpMessageType_TD_OnRspOrderAction                          CtpMessageType = 14
	CtpMessageType_TD_OnRspQueryMaxOrderVolume                  CtpMessageType = 15
	CtpMessageType_TD_OnRspSettlementInfoConfirm                CtpMessageType = 16
	CtpMessageType_TD_OnRspRemoveParkedOrder                    CtpMessageType = 17
	CtpMessageType_TD_OnRspRemoveParkedOrderAction              CtpMessageType = 18
	CtpMessageType_TD_OnRspExecOrderInsert                      CtpMessageType = 19
	CtpMessageType_TD_OnRspExecOrderAction                      CtpMessageType = 20
	CtpMessageType_TD_OnRspForQuoteInsert                       CtpMessageType = 21
	CtpMessageType_TD_OnRspQuoteInsert                          CtpMessageType = 22
	CtpMessageType_TD_OnRspQuoteAction                          CtpMessageType = 23
	CtpMessageType_TD_OnRspBatchOrderAction                     CtpMessageType = 24
	CtpMessageType_TD_OnRspOptionSelfCloseInsert                CtpMessageType = 25
	CtpMessageType_TD_OnRspOptionSelfCloseAction                CtpMessageType = 26
	CtpMessageType_TD_OnRspCombActionInsert                     CtpMessageType = 27
	CtpMessageType_TD_OnRspQryOrder                             CtpMessageType = 28
	CtpMessageType_TD_OnRspQryTrade                             CtpMessageType = 29
	CtpMessageType_TD_OnRspQryInvestorPosition                  CtpMessageType = 30
	CtpMessageType_TD_OnRspQryTradingAccount                    CtpMessageType = 31
	CtpMessageType_TD_OnRspQryInvestor                          CtpMessageType = 32
	CtpMessageType_TD_OnRspQryTradingCode                       CtpMessageType = 33
	CtpMessageType_TD_OnRspQryInstrumentMarginRate              CtpMessageType = 34
	CtpMessageType_TD_OnRspQryInstrumentCommissionRate          CtpMessageType = 35
	CtpMessageType_TD_OnRspQryExchange                          CtpMessageType = 36
	CtpMessageType_TD_OnRspQryProduct                           CtpMessageType = 37
	CtpMessageType_TD_OnRspQryInstrument                        CtpMessageType = 38
	CtpMessageType_TD_OnRspQryDepthMarketData                   CtpMessageType = 39
	CtpMessageType_TD_OnRspQrySettlementInfo                    CtpMessageType = 40
	CtpMessageType_TD_OnRspQryTransferBank                      CtpMessageType = 41
	CtpMessageType_TD_OnRspQryInvestorPositionDetail            CtpMessageType = 42
	CtpMessageType_TD_OnRspQryNotice                            CtpMessageType = 43
	CtpMessageType_TD_OnRspQrySettlementInfoConfirm             CtpMessageType = 44
	CtpMessageType_TD_OnRspQryInvestorPositionCombineDetail     CtpMessageType = 45
	CtpMessageType_TD_OnRspQryCFMMCTradingAccountKey            CtpMessageType = 46
	CtpMessageType_TD_OnRspQryEWarrantOffset                    CtpMessageType = 47
	CtpMessageType_TD_OnRspQryInvestorProductGroupMargin        CtpMessageType = 48
	CtpMessageType_TD_OnRspQryExchangeMarginRate                CtpMessageType = 49
	CtpMessageType_TD_OnRspQryExchangeMarginRateAdjust          CtpMessageType = 50
	CtpMessageType_TD_OnRspQryExchangeRate                      CtpMessageType = 51
	CtpMessageType_TD_OnRspQrySecAgentACIDMap                   CtpMessageType = 52
	CtpMessageType_TD_OnRspQryProductExchRate                   CtpMessageType = 53
	CtpMessageType_TD_OnRspQryProductGroup                      CtpMessageType = 54
	CtpMessageType_TD_OnRspQryMMInstrumentCommissionRate        CtpMessageType = 55
	CtpMessageType_TD_OnRspQryMMOptionInstrCommRate             CtpMessageType = 56
	CtpMessageType_TD_OnRspQryInstrumentOrderCommRate           CtpMessageType = 57
	CtpMessageType_TD_OnRspQrySecAgentTradingAccount            CtpMessageType = 58
	CtpMessageType_TD_OnRspQrySecAgentCheckMode                 CtpMessageType = 59
	CtpMessageType_TD_OnRspQrySecAgentTradeInfo                 CtpMessageType = 60
	CtpMessageType_TD_OnRspQryOptionInstrTradeCost              CtpMessageType = 61
	CtpMessageType_TD_OnRspQryOptionInstrCommRate               CtpMessageType = 62
	CtpMessageType_TD_OnRspQryExecOrder                         CtpMessageType = 63
	CtpMessageType_TD_OnRspQryForQuote                          CtpMessageType = 64
	CtpMessageType_TD_OnRspQryQuote                             CtpMessageType = 65
	CtpMessageType_TD_OnRspQryOptionSelfClose                   CtpMessageType = 66
	CtpMessageType_TD_OnRspQryInvestUnit                        CtpMessageType = 67
	CtpMessageType_TD_OnRspQryCombInstrumentGuard               CtpMessageType = 68
	CtpMessageType_TD_OnRspQryCombAction                        CtpMessageType = 69
	CtpMessageType_TD_OnRspQryTransferSerial                    CtpMessageType = 70
	CtpMessageType_TD_OnRspQryAccountregister                   CtpMessageType = 71
	CtpMessageType_TD_OnRspError                                CtpMessageType = 72
	CtpMessageType_TD_OnRtnOrder                                CtpMessageType = 73
	CtpMessageType_TD_OnRtnTrade                                CtpMessageType = 74
	CtpMessageType_TD_OnErrRtnOrderInsert                       CtpMessageType = 75
	CtpMessageType_TD_OnErrRtnOrderAction                       CtpMessageType = 76
	CtpMessageType_TD_OnRtnInstrumentStatus                     CtpMessageType = 77
	CtpMessageType_TD_OnRtnBulletin                             CtpMessageType = 78
	CtpMessageType_TD_OnRtnTradingNotice                        CtpMessageType = 79
	CtpMessageType_TD_OnRtnErrorConditionalOrder                CtpMessageType = 80
	CtpMessageType_TD_OnRtnExecOrder                            CtpMessageType = 81
	CtpMessageType_TD_OnErrRtnExecOrderInsert                   CtpMessageType = 82
	CtpMessageType_TD_OnErrRtnExecOrderAction                   CtpMessageType = 83
	CtpMessageType_TD_OnErrRtnForQuoteInsert                    CtpMessageType = 84
	CtpMessageType_TD_OnRtnQuote                                CtpMessageType = 85
	CtpMessageType_TD_OnErrRtnQuoteInsert                       CtpMessageType = 86
	CtpMessageType_TD_OnErrRtnQuoteAction                       CtpMessageType = 87
	CtpMessageType_TD_OnRtnForQuoteRsp                          CtpMessageType = 88
	CtpMessageType_TD_OnRtnCFMMCTradingAccountToken             CtpMessageType = 89
	CtpMessageType_TD_OnErrRtnBatchOrderAction                  CtpMessageType = 90
	CtpMessageType_TD_OnRtnOptionSelfClose                      CtpMessageType = 91
	CtpMessageType_TD_OnErrRtnOptionSelfCloseInsert             CtpMessageType = 92
	CtpMessageType_TD_OnErrRtnOptionSelfCloseAction             CtpMessageType = 93
	CtpMessageType_TD_OnRtnCombAction                           CtpMessageType = 94
	CtpMessageType_TD_OnErrRtnCombActionInsert                  CtpMessageType = 95
	CtpMessageType_TD_OnRspQryContractBank                      CtpMessageType = 96
	CtpMessageType_TD_OnRspQryParkedOrder                       CtpMessageType = 97
	CtpMessageType_TD_OnRspQryParkedOrderAction                 CtpMessageType = 98
	CtpMessageType_TD_OnRspQryTradingNotice                     CtpMessageType = 99
	CtpMessageType_TD_OnRspQryBrokerTradingParams               CtpMessageType = 100
	CtpMessageType_TD_OnRspQryBrokerTradingAlgos                CtpMessageType = 101
	CtpMessageType_TD_OnRspQueryCFMMCTradingAccountToken        CtpMessageType = 102
	CtpMessageType_TD_OnRtnFromBankToFutureByBank               CtpMessageType = 103
	CtpMessageType_TD_OnRtnFromFutureToBankByBank               CtpMessageType = 104
	CtpMessageType_TD_OnRtnRepealFromBankToFutureByBank         CtpMessageType = 105
	CtpMessageType_TD_OnRtnRepealFromFutureToBankByBank         CtpMessageType = 106
	CtpMessageType_TD_OnRtnFromBankToFutureByFuture             CtpMessageType = 107
	CtpMessageType_TD_OnRtnFromFutureToBankByFuture             CtpMessageType = 108
	CtpMessageType_TD_OnRtnRepealFromBankToFutureByFutureManual CtpMessageType = 109
	CtpMessageType_TD_OnRtnRepealFromFutureToBankByFutureManual CtpMessageType = 110
	CtpMessageType_TD_OnRtnQueryBankBalanceByFuture             CtpMessageType = 111
	CtpMessageType_TD_OnErrRtnBankToFutureByFuture              CtpMessageType = 112
	CtpMessageType_TD_OnErrRtnFutureToBankByFuture              CtpMessageType = 113
	CtpMessageType_TD_OnErrRtnRepealBankToFutureByFutureManual  CtpMessageType = 114
	CtpMessageType_TD_OnErrRtnRepealFutureToBankByFutureManual  CtpMessageType = 115
	CtpMessageType_TD_OnErrRtnQueryBankBalanceByFuture          CtpMessageType = 116
	CtpMessageType_TD_OnRtnRepealFromBankToFutureByFuture       CtpMessageType = 117
	CtpMessageType_TD_OnRtnRepealFromFutureToBankByFuture       CtpMessageType = 118
	CtpMessageType_TD_OnRspFromBankToFutureByFuture             CtpMessageType = 119
	CtpMessageType_TD_OnRspFromFutureToBankByFuture             CtpMessageType = 120
	CtpMessageType_TD_OnRspQueryBankAccountMoneyByFuture        CtpMessageType = 121
	CtpMessageType_TD_OnRtnOpenAccountByBank                    CtpMessageType = 122
	CtpMessageType_TD_OnRtnCancelAccountByBank                  CtpMessageType = 123
	CtpMessageType_TD_OnRtnChangeAccountByBank                  CtpMessageType = 124
	CtpMessageType_TD_Release                                   CtpMessageType = 125
	CtpMessageType_TD_Init                                      CtpMessageType = 126
	CtpMessageType_TD_Join                                      CtpMessageType = 127
	CtpMessageType_TD_                                          CtpMessageType = 128
	CtpMessageType_TD_RegisterFront                             CtpMessageType = 129
	CtpMessageType_TD_RegisterNameServer                        CtpMessageType = 130
	CtpMessageType_TD_RegisterFensUserInfo                      CtpMessageType = 131
	CtpMessageType_TD_RegisterSpi                               CtpMessageType = 132
	CtpMessageType_TD_SubscribePrivateTopic                     CtpMessageType = 133
	CtpMessageType_TD_SubscribePublicTopic                      CtpMessageType = 134
	CtpMessageType_TD_ReqAuthenticate                           CtpMessageType = 135
	CtpMessageType_TD_RegisterUserSystemInfo                    CtpMessageType = 136
	CtpMessageType_TD_SubmitUserSystemInfo                      CtpMessageType = 137
	CtpMessageType_TD_ReqUserLogin                              CtpMessageType = 138
	CtpMessageType_TD_ReqUserLogout                             CtpMessageType = 139
	CtpMessageType_TD_ReqUserPasswordUpdate                     CtpMessageType = 140
	CtpMessageType_TD_ReqTradingAccountPasswordUpdate           CtpMessageType = 141
	CtpMessageType_TD_ReqUserAuthMethod                         CtpMessageType = 142
	CtpMessageType_TD_ReqGenUserCaptcha                         CtpMessageType = 143
	CtpMessageType_TD_ReqGenUserText                            CtpMessageType = 144
	CtpMessageType_TD_ReqUserLoginWithCaptcha                   CtpMessageType = 145
	CtpMessageType_TD_ReqUserLoginWithText                      CtpMessageType = 146
	CtpMessageType_TD_ReqUserLoginWithOTP                       CtpMessageType = 147
	CtpMessageType_TD_ReqOrderInsert                            CtpMessageType = 148
	CtpMessageType_TD_ReqParkedOrderInsert                      CtpMessageType = 149
	CtpMessageType_TD_ReqParkedOrderAction                      CtpMessageType = 150
	CtpMessageType_TD_ReqOrderAction                            CtpMessageType = 151
	CtpMessageType_TD_ReqQueryMaxOrderVolume                    CtpMessageType = 152
	CtpMessageType_TD_ReqSettlementInfoConfirm                  CtpMessageType = 153
	CtpMessageType_TD_ReqRemoveParkedOrder                      CtpMessageType = 154
	CtpMessageType_TD_ReqRemoveParkedOrderAction                CtpMessageType = 155
	CtpMessageType_TD_ReqExecOrderInsert                        CtpMessageType = 156
	CtpMessageType_TD_ReqExecOrderAction                        CtpMessageType = 157
	CtpMessageType_TD_ReqForQuoteInsert                         CtpMessageType = 158
	CtpMessageType_TD_ReqQuoteInsert                            CtpMessageType = 159
	CtpMessageType_TD_ReqQuoteAction                            CtpMessageType = 160
	CtpMessageType_TD_ReqBatchOrderAction                       CtpMessageType = 161
	CtpMessageType_TD_ReqOptionSelfCloseInsert                  CtpMessageType = 162
	CtpMessageType_TD_ReqOptionSelfCloseAction                  CtpMessageType = 163
	CtpMessageType_TD_ReqCombActionInsert                       CtpMessageType = 164
	CtpMessageType_TD_ReqQryOrder                               CtpMessageType = 165
	CtpMessageType_TD_ReqQryTrade                               CtpMessageType = 166
	CtpMessageType_TD_ReqQryInvestorPosition                    CtpMessageType = 167
	CtpMessageType_TD_ReqQryTradingAccount                      CtpMessageType = 168
	CtpMessageType_TD_ReqQryInvestor                            CtpMessageType = 169
	CtpMessageType_TD_ReqQryTradingCode                         CtpMessageType = 170
	CtpMessageType_TD_ReqQryInstrumentMarginRate                CtpMessageType = 171
	CtpMessageType_TD_ReqQryInstrumentCommissionRate            CtpMessageType = 172
	CtpMessageType_TD_ReqQryExchange                            CtpMessageType = 173
	CtpMessageType_TD_ReqQryProduct                             CtpMessageType = 174
	CtpMessageType_TD_ReqQryInstrument                          CtpMessageType = 175
	CtpMessageType_TD_ReqQryDepthMarketData                     CtpMessageType = 176
	CtpMessageType_TD_ReqQrySettlementInfo                      CtpMessageType = 177
	CtpMessageType_TD_ReqQryTransferBank                        CtpMessageType = 178
	CtpMessageType_TD_ReqQryInvestorPositionDetail              CtpMessageType = 179
	CtpMessageType_TD_ReqQryNotice                              CtpMessageType = 180
	CtpMessageType_TD_ReqQrySettlementInfoConfirm               CtpMessageType = 181
	CtpMessageType_TD_ReqQryInvestorPositionCombineDetail       CtpMessageType = 182
	CtpMessageType_TD_ReqQryCFMMCTradingAccountKey              CtpMessageType = 183
	CtpMessageType_TD_ReqQryEWarrantOffset                      CtpMessageType = 184
	CtpMessageType_TD_ReqQryInvestorProductGroupMargin          CtpMessageType = 185
	CtpMessageType_TD_ReqQryExchangeMarginRate                  CtpMessageType = 186
	CtpMessageType_TD_ReqQryExchangeMarginRateAdjust            CtpMessageType = 187
	CtpMessageType_TD_ReqQryExchangeRate                        CtpMessageType = 188
	CtpMessageType_TD_ReqQrySecAgentACIDMap                     CtpMessageType = 189
	CtpMessageType_TD_ReqQryProductExchRate                     CtpMessageType = 190
	CtpMessageType_TD_ReqQryProductGroup                        CtpMessageType = 191
	CtpMessageType_TD_ReqQryMMInstrumentCommissionRate          CtpMessageType = 192
	CtpMessageType_TD_ReqQryMMOptionInstrCommRate               CtpMessageType = 193
	CtpMessageType_TD_ReqQryInstrumentOrderCommRate             CtpMessageType = 194
	CtpMessageType_TD_ReqQrySecAgentTradingAccount              CtpMessageType = 195
	CtpMessageType_TD_ReqQrySecAgentCheckMode                   CtpMessageType = 196
	CtpMessageType_TD_ReqQrySecAgentTradeInfo                   CtpMessageType = 197
	CtpMessageType_TD_ReqQryOptionInstrTradeCost                CtpMessageType = 198
	CtpMessageType_TD_ReqQryOptionInstrCommRate                 CtpMessageType = 199
	CtpMessageType_TD_ReqQryExecOrder                           CtpMessageType = 200
	CtpMessageType_TD_ReqQryForQuote                            CtpMessageType = 201
	CtpMessageType_TD_ReqQryQuote                               CtpMessageType = 202
	CtpMessageType_TD_ReqQryOptionSelfClose                     CtpMessageType = 203
	CtpMessageType_TD_ReqQryInvestUnit                          CtpMessageType = 204
	CtpMessageType_TD_ReqQryCombInstrumentGuard                 CtpMessageType = 205
	CtpMessageType_TD_ReqQryCombAction                          CtpMessageType = 206
	CtpMessageType_TD_ReqQryTransferSerial                      CtpMessageType = 207
	CtpMessageType_TD_ReqQryAccountregister                     CtpMessageType = 208
	CtpMessageType_TD_ReqQryContractBank                        CtpMessageType = 209
	CtpMessageType_TD_ReqQryParkedOrder                         CtpMessageType = 210
	CtpMessageType_TD_ReqQryParkedOrderAction                   CtpMessageType = 211
	CtpMessageType_TD_ReqQryTradingNotice                       CtpMessageType = 212
	CtpMessageType_TD_ReqQryBrokerTradingParams                 CtpMessageType = 213
	CtpMessageType_TD_ReqQryBrokerTradingAlgos                  CtpMessageType = 214
	CtpMessageType_TD_ReqQueryCFMMCTradingAccountToken          CtpMessageType = 215
	CtpMessageType_TD_ReqFromBankToFutureByFuture               CtpMessageType = 216
	CtpMessageType_TD_ReqFromFutureToBankByFuture               CtpMessageType = 217
	CtpMessageType_TD_ReqQueryBankAccountMoneyByFuture          CtpMessageType = 218
	CtpMessageType_MD_OnFrontConnected                          CtpMessageType = 219
	CtpMessageType_MD_OnFrontDisconnected                       CtpMessageType = 220
	CtpMessageType_MD_OnHeartBeatWarning                        CtpMessageType = 221
	CtpMessageType_MD_OnRspUserLogin                            CtpMessageType = 222
	CtpMessageType_MD_OnRspUserLogout                           CtpMessageType = 223
	CtpMessageType_MD_OnRspError                                CtpMessageType = 224
	CtpMessageType_MD_OnRspSubMarketData                        CtpMessageType = 225
	CtpMessageType_MD_OnRspUnSubMarketData                      CtpMessageType = 226
	CtpMessageType_MD_OnRspSubForQuoteRsp                       CtpMessageType = 227
	CtpMessageType_MD_OnRspUnSubForQuoteRsp                     CtpMessageType = 228
	CtpMessageType_MD_OnRtnDepthMarketData                      CtpMessageType = 229
	CtpMessageType_MD_OnRtnForQuoteRsp                          CtpMessageType = 230
	CtpMessageType_MD_Release                                   CtpMessageType = 231
	CtpMessageType_MD_Init                                      CtpMessageType = 232
	CtpMessageType_MD_Join                                      CtpMessageType = 233
	CtpMessageType_MD_                                          CtpMessageType = 234
	CtpMessageType_MD_RegisterFront                             CtpMessageType = 235
	CtpMessageType_MD_RegisterNameServer                        CtpMessageType = 236
	CtpMessageType_MD_RegisterFensUserInfo                      CtpMessageType = 237
	CtpMessageType_MD_RegisterSpi                               CtpMessageType = 238
	CtpMessageType_MD_SubscribeMarketData                       CtpMessageType = 239
	CtpMessageType_MD_UnSubscribeMarketData                     CtpMessageType = 240
	CtpMessageType_MD_SubscribeForQuoteRsp                      CtpMessageType = 241
	CtpMessageType_MD_UnSubscribeForQuoteRsp                    CtpMessageType = 242
	CtpMessageType_MD_ReqUserLogin                              CtpMessageType = 243
	CtpMessageType_MD_ReqUserLogout                             CtpMessageType = 244
	CtpMessageType_HEARTBEAT                                    CtpMessageType = 10000
)

// Enum value maps for CtpMessageType.
var (
	CtpMessageType_name = map[int32]string{
		0:     "TD_OnFrontConnected",
		1:     "TD_OnFrontDisconnected",
		2:     "TD_OnHeartBeatWarning",
		3:     "TD_OnRspAuthenticate",
		4:     "TD_OnRspUserLogin",
		5:     "TD_OnRspUserLogout",
		6:     "TD_OnRspUserPasswordUpdate",
		7:     "TD_OnRspTradingAccountPasswordUpdate",
		8:     "TD_OnRspUserAuthMethod",
		9:     "TD_OnRspGenUserCaptcha",
		10:    "TD_OnRspGenUserText",
		11:    "TD_OnRspOrderInsert",
		12:    "TD_OnRspParkedOrderInsert",
		13:    "TD_OnRspParkedOrderAction",
		14:    "TD_OnRspOrderAction",
		15:    "TD_OnRspQueryMaxOrderVolume",
		16:    "TD_OnRspSettlementInfoConfirm",
		17:    "TD_OnRspRemoveParkedOrder",
		18:    "TD_OnRspRemoveParkedOrderAction",
		19:    "TD_OnRspExecOrderInsert",
		20:    "TD_OnRspExecOrderAction",
		21:    "TD_OnRspForQuoteInsert",
		22:    "TD_OnRspQuoteInsert",
		23:    "TD_OnRspQuoteAction",
		24:    "TD_OnRspBatchOrderAction",
		25:    "TD_OnRspOptionSelfCloseInsert",
		26:    "TD_OnRspOptionSelfCloseAction",
		27:    "TD_OnRspCombActionInsert",
		28:    "TD_OnRspQryOrder",
		29:    "TD_OnRspQryTrade",
		30:    "TD_OnRspQryInvestorPosition",
		31:    "TD_OnRspQryTradingAccount",
		32:    "TD_OnRspQryInvestor",
		33:    "TD_OnRspQryTradingCode",
		34:    "TD_OnRspQryInstrumentMarginRate",
		35:    "TD_OnRspQryInstrumentCommissionRate",
		36:    "TD_OnRspQryExchange",
		37:    "TD_OnRspQryProduct",
		38:    "TD_OnRspQryInstrument",
		39:    "TD_OnRspQryDepthMarketData",
		40:    "TD_OnRspQrySettlementInfo",
		41:    "TD_OnRspQryTransferBank",
		42:    "TD_OnRspQryInvestorPositionDetail",
		43:    "TD_OnRspQryNotice",
		44:    "TD_OnRspQrySettlementInfoConfirm",
		45:    "TD_OnRspQryInvestorPositionCombineDetail",
		46:    "TD_OnRspQryCFMMCTradingAccountKey",
		47:    "TD_OnRspQryEWarrantOffset",
		48:    "TD_OnRspQryInvestorProductGroupMargin",
		49:    "TD_OnRspQryExchangeMarginRate",
		50:    "TD_OnRspQryExchangeMarginRateAdjust",
		51:    "TD_OnRspQryExchangeRate",
		52:    "TD_OnRspQrySecAgentACIDMap",
		53:    "TD_OnRspQryProductExchRate",
		54:    "TD_OnRspQryProductGroup",
		55:    "TD_OnRspQryMMInstrumentCommissionRate",
		56:    "TD_OnRspQryMMOptionInstrCommRate",
		57:    "TD_OnRspQryInstrumentOrderCommRate",
		58:    "TD_OnRspQrySecAgentTradingAccount",
		59:    "TD_OnRspQrySecAgentCheckMode",
		60:    "TD_OnRspQrySecAgentTradeInfo",
		61:    "TD_OnRspQryOptionInstrTradeCost",
		62:    "TD_OnRspQryOptionInstrCommRate",
		63:    "TD_OnRspQryExecOrder",
		64:    "TD_OnRspQryForQuote",
		65:    "TD_OnRspQryQuote",
		66:    "TD_OnRspQryOptionSelfClose",
		67:    "TD_OnRspQryInvestUnit",
		68:    "TD_OnRspQryCombInstrumentGuard",
		69:    "TD_OnRspQryCombAction",
		70:    "TD_OnRspQryTransferSerial",
		71:    "TD_OnRspQryAccountregister",
		72:    "TD_OnRspError",
		73:    "TD_OnRtnOrder",
		74:    "TD_OnRtnTrade",
		75:    "TD_OnErrRtnOrderInsert",
		76:    "TD_OnErrRtnOrderAction",
		77:    "TD_OnRtnInstrumentStatus",
		78:    "TD_OnRtnBulletin",
		79:    "TD_OnRtnTradingNotice",
		80:    "TD_OnRtnErrorConditionalOrder",
		81:    "TD_OnRtnExecOrder",
		82:    "TD_OnErrRtnExecOrderInsert",
		83:    "TD_OnErrRtnExecOrderAction",
		84:    "TD_OnErrRtnForQuoteInsert",
		85:    "TD_OnRtnQuote",
		86:    "TD_OnErrRtnQuoteInsert",
		87:    "TD_OnErrRtnQuoteAction",
		88:    "TD_OnRtnForQuoteRsp",
		89:    "TD_OnRtnCFMMCTradingAccountToken",
		90:    "TD_OnErrRtnBatchOrderAction",
		91:    "TD_OnRtnOptionSelfClose",
		92:    "TD_OnErrRtnOptionSelfCloseInsert",
		93:    "TD_OnErrRtnOptionSelfCloseAction",
		94:    "TD_OnRtnCombAction",
		95:    "TD_OnErrRtnCombActionInsert",
		96:    "TD_OnRspQryContractBank",
		97:    "TD_OnRspQryParkedOrder",
		98:    "TD_OnRspQryParkedOrderAction",
		99:    "TD_OnRspQryTradingNotice",
		100:   "TD_OnRspQryBrokerTradingParams",
		101:   "TD_OnRspQryBrokerTradingAlgos",
		102:   "TD_OnRspQueryCFMMCTradingAccountToken",
		103:   "TD_OnRtnFromBankToFutureByBank",
		104:   "TD_OnRtnFromFutureToBankByBank",
		105:   "TD_OnRtnRepealFromBankToFutureByBank",
		106:   "TD_OnRtnRepealFromFutureToBankByBank",
		107:   "TD_OnRtnFromBankToFutureByFuture",
		108:   "TD_OnRtnFromFutureToBankByFuture",
		109:   "TD_OnRtnRepealFromBankToFutureByFutureManual",
		110:   "TD_OnRtnRepealFromFutureToBankByFutureManual",
		111:   "TD_OnRtnQueryBankBalanceByFuture",
		112:   "TD_OnErrRtnBankToFutureByFuture",
		113:   "TD_OnErrRtnFutureToBankByFuture",
		114:   "TD_OnErrRtnRepealBankToFutureByFutureManual",
		115:   "TD_OnErrRtnRepealFutureToBankByFutureManual",
		116:   "TD_OnErrRtnQueryBankBalanceByFuture",
		117:   "TD_OnRtnRepealFromBankToFutureByFuture",
		118:   "TD_OnRtnRepealFromFutureToBankByFuture",
		119:   "TD_OnRspFromBankToFutureByFuture",
		120:   "TD_OnRspFromFutureToBankByFuture",
		121:   "TD_OnRspQueryBankAccountMoneyByFuture",
		122:   "TD_OnRtnOpenAccountByBank",
		123:   "TD_OnRtnCancelAccountByBank",
		124:   "TD_OnRtnChangeAccountByBank",
		125:   "TD_Release",
		126:   "TD_Init",
		127:   "TD_Join",
		128:   "TD_",
		129:   "TD_RegisterFront",
		130:   "TD_RegisterNameServer",
		131:   "TD_RegisterFensUserInfo",
		132:   "TD_RegisterSpi",
		133:   "TD_SubscribePrivateTopic",
		134:   "TD_SubscribePublicTopic",
		135:   "TD_ReqAuthenticate",
		136:   "TD_RegisterUserSystemInfo",
		137:   "TD_SubmitUserSystemInfo",
		138:   "TD_ReqUserLogin",
		139:   "TD_ReqUserLogout",
		140:   "TD_ReqUserPasswordUpdate",
		141:   "TD_ReqTradingAccountPasswordUpdate",
		142:   "TD_ReqUserAuthMethod",
		143:   "TD_ReqGenUserCaptcha",
		144:   "TD_ReqGenUserText",
		145:   "TD_ReqUserLoginWithCaptcha",
		146:   "TD_ReqUserLoginWithText",
		147:   "TD_ReqUserLoginWithOTP",
		148:   "TD_ReqOrderInsert",
		149:   "TD_ReqParkedOrderInsert",
		150:   "TD_ReqParkedOrderAction",
		151:   "TD_ReqOrderAction",
		152:   "TD_ReqQueryMaxOrderVolume",
		153:   "TD_ReqSettlementInfoConfirm",
		154:   "TD_ReqRemoveParkedOrder",
		155:   "TD_ReqRemoveParkedOrderAction",
		156:   "TD_ReqExecOrderInsert",
		157:   "TD_ReqExecOrderAction",
		158:   "TD_ReqForQuoteInsert",
		159:   "TD_ReqQuoteInsert",
		160:   "TD_ReqQuoteAction",
		161:   "TD_ReqBatchOrderAction",
		162:   "TD_ReqOptionSelfCloseInsert",
		163:   "TD_ReqOptionSelfCloseAction",
		164:   "TD_ReqCombActionInsert",
		165:   "TD_ReqQryOrder",
		166:   "TD_ReqQryTrade",
		167:   "TD_ReqQryInvestorPosition",
		168:   "TD_ReqQryTradingAccount",
		169:   "TD_ReqQryInvestor",
		170:   "TD_ReqQryTradingCode",
		171:   "TD_ReqQryInstrumentMarginRate",
		172:   "TD_ReqQryInstrumentCommissionRate",
		173:   "TD_ReqQryExchange",
		174:   "TD_ReqQryProduct",
		175:   "TD_ReqQryInstrument",
		176:   "TD_ReqQryDepthMarketData",
		177:   "TD_ReqQrySettlementInfo",
		178:   "TD_ReqQryTransferBank",
		179:   "TD_ReqQryInvestorPositionDetail",
		180:   "TD_ReqQryNotice",
		181:   "TD_ReqQrySettlementInfoConfirm",
		182:   "TD_ReqQryInvestorPositionCombineDetail",
		183:   "TD_ReqQryCFMMCTradingAccountKey",
		184:   "TD_ReqQryEWarrantOffset",
		185:   "TD_ReqQryInvestorProductGroupMargin",
		186:   "TD_ReqQryExchangeMarginRate",
		187:   "TD_ReqQryExchangeMarginRateAdjust",
		188:   "TD_ReqQryExchangeRate",
		189:   "TD_ReqQrySecAgentACIDMap",
		190:   "TD_ReqQryProductExchRate",
		191:   "TD_ReqQryProductGroup",
		192:   "TD_ReqQryMMInstrumentCommissionRate",
		193:   "TD_ReqQryMMOptionInstrCommRate",
		194:   "TD_ReqQryInstrumentOrderCommRate",
		195:   "TD_ReqQrySecAgentTradingAccount",
		196:   "TD_ReqQrySecAgentCheckMode",
		197:   "TD_ReqQrySecAgentTradeInfo",
		198:   "TD_ReqQryOptionInstrTradeCost",
		199:   "TD_ReqQryOptionInstrCommRate",
		200:   "TD_ReqQryExecOrder",
		201:   "TD_ReqQryForQuote",
		202:   "TD_ReqQryQuote",
		203:   "TD_ReqQryOptionSelfClose",
		204:   "TD_ReqQryInvestUnit",
		205:   "TD_ReqQryCombInstrumentGuard",
		206:   "TD_ReqQryCombAction",
		207:   "TD_ReqQryTransferSerial",
		208:   "TD_ReqQryAccountregister",
		209:   "TD_ReqQryContractBank",
		210:   "TD_ReqQryParkedOrder",
		211:   "TD_ReqQryParkedOrderAction",
		212:   "TD_ReqQryTradingNotice",
		213:   "TD_ReqQryBrokerTradingParams",
		214:   "TD_ReqQryBrokerTradingAlgos",
		215:   "TD_ReqQueryCFMMCTradingAccountToken",
		216:   "TD_ReqFromBankToFutureByFuture",
		217:   "TD_ReqFromFutureToBankByFuture",
		218:   "TD_ReqQueryBankAccountMoneyByFuture",
		219:   "MD_OnFrontConnected",
		220:   "MD_OnFrontDisconnected",
		221:   "MD_OnHeartBeatWarning",
		222:   "MD_OnRspUserLogin",
		223:   "MD_OnRspUserLogout",
		224:   "MD_OnRspError",
		225:   "MD_OnRspSubMarketData",
		226:   "MD_OnRspUnSubMarketData",
		227:   "MD_OnRspSubForQuoteRsp",
		228:   "MD_OnRspUnSubForQuoteRsp",
		229:   "MD_OnRtnDepthMarketData",
		230:   "MD_OnRtnForQuoteRsp",
		231:   "MD_Release",
		232:   "MD_Init",
		233:   "MD_Join",
		234:   "MD_",
		235:   "MD_RegisterFront",
		236:   "MD_RegisterNameServer",
		237:   "MD_RegisterFensUserInfo",
		238:   "MD_RegisterSpi",
		239:   "MD_SubscribeMarketData",
		240:   "MD_UnSubscribeMarketData",
		241:   "MD_SubscribeForQuoteRsp",
		242:   "MD_UnSubscribeForQuoteRsp",
		243:   "MD_ReqUserLogin",
		244:   "MD_ReqUserLogout",
		10000: "HEARTBEAT",
	}
	CtpMessageType_value = map[string]int32{
		"TD_OnFrontConnected":                          0,
		"TD_OnFrontDisconnected":                       1,
		"TD_OnHeartBeatWarning":                        2,
		"TD_OnRspAuthenticate":                         3,
		"TD_OnRspUserLogin":                            4,
		"TD_OnRspUserLogout":                           5,
		"TD_OnRspUserPasswordUpdate":                   6,
		"TD_OnRspTradingAccountPasswordUpdate":         7,
		"TD_OnRspUserAuthMethod":                       8,
		"TD_OnRspGenUserCaptcha":                       9,
		"TD_OnRspGenUserText":                          10,
		"TD_OnRspOrderInsert":                          11,
		"TD_OnRspParkedOrderInsert":                    12,
		"TD_OnRspParkedOrderAction":                    13,
		"TD_OnRspOrderAction":                          14,
		"TD_OnRspQueryMaxOrderVolume":                  15,
		"TD_OnRspSettlementInfoConfirm":                16,
		"TD_OnRspRemoveParkedOrder":                    17,
		"TD_OnRspRemoveParkedOrderAction":              18,
		"TD_OnRspExecOrderInsert":                      19,
		"TD_OnRspExecOrderAction":                      20,
		"TD_OnRspForQuoteInsert":                       21,
		"TD_OnRspQuoteInsert":                          22,
		"TD_OnRspQuoteAction":                          23,
		"TD_OnRspBatchOrderAction":                     24,
		"TD_OnRspOptionSelfCloseInsert":                25,
		"TD_OnRspOptionSelfCloseAction":                26,
		"TD_OnRspCombActionInsert":                     27,
		"TD_OnRspQryOrder":                             28,
		"TD_OnRspQryTrade":                             29,
		"TD_OnRspQryInvestorPosition":                  30,
		"TD_OnRspQryTradingAccount":                    31,
		"TD_OnRspQryInvestor":                          32,
		"TD_OnRspQryTradingCode":                       33,
		"TD_OnRspQryInstrumentMarginRate":              34,
		"TD_OnRspQryInstrumentCommissionRate":          35,
		"TD_OnRspQryExchange":                          36,
		"TD_OnRspQryProduct":                           37,
		"TD_OnRspQryInstrument":                        38,
		"TD_OnRspQryDepthMarketData":                   39,
		"TD_OnRspQrySettlementInfo":                    40,
		"TD_OnRspQryTransferBank":                      41,
		"TD_OnRspQryInvestorPositionDetail":            42,
		"TD_OnRspQryNotice":                            43,
		"TD_OnRspQrySettlementInfoConfirm":             44,
		"TD_OnRspQryInvestorPositionCombineDetail":     45,
		"TD_OnRspQryCFMMCTradingAccountKey":            46,
		"TD_OnRspQryEWarrantOffset":                    47,
		"TD_OnRspQryInvestorProductGroupMargin":        48,
		"TD_OnRspQryExchangeMarginRate":                49,
		"TD_OnRspQryExchangeMarginRateAdjust":          50,
		"TD_OnRspQryExchangeRate":                      51,
		"TD_OnRspQrySecAgentACIDMap":                   52,
		"TD_OnRspQryProductExchRate":                   53,
		"TD_OnRspQryProductGroup":                      54,
		"TD_OnRspQryMMInstrumentCommissionRate":        55,
		"TD_OnRspQryMMOptionInstrCommRate":             56,
		"TD_OnRspQryInstrumentOrderCommRate":           57,
		"TD_OnRspQrySecAgentTradingAccount":            58,
		"TD_OnRspQrySecAgentCheckMode":                 59,
		"TD_OnRspQrySecAgentTradeInfo":                 60,
		"TD_OnRspQryOptionInstrTradeCost":              61,
		"TD_OnRspQryOptionInstrCommRate":               62,
		"TD_OnRspQryExecOrder":                         63,
		"TD_OnRspQryForQuote":                          64,
		"TD_OnRspQryQuote":                             65,
		"TD_OnRspQryOptionSelfClose":                   66,
		"TD_OnRspQryInvestUnit":                        67,
		"TD_OnRspQryCombInstrumentGuard":               68,
		"TD_OnRspQryCombAction":                        69,
		"TD_OnRspQryTransferSerial":                    70,
		"TD_OnRspQryAccountregister":                   71,
		"TD_OnRspError":                                72,
		"TD_OnRtnOrder":                                73,
		"TD_OnRtnTrade":                                74,
		"TD_OnErrRtnOrderInsert":                       75,
		"TD_OnErrRtnOrderAction":                       76,
		"TD_OnRtnInstrumentStatus":                     77,
		"TD_OnRtnBulletin":                             78,
		"TD_OnRtnTradingNotice":                        79,
		"TD_OnRtnErrorConditionalOrder":                80,
		"TD_OnRtnExecOrder":                            81,
		"TD_OnErrRtnExecOrderInsert":                   82,
		"TD_OnErrRtnExecOrderAction":                   83,
		"TD_OnErrRtnForQuoteInsert":                    84,
		"TD_OnRtnQuote":                                85,
		"TD_OnErrRtnQuoteInsert":                       86,
		"TD_OnErrRtnQuoteAction":                       87,
		"TD_OnRtnForQuoteRsp":                          88,
		"TD_OnRtnCFMMCTradingAccountToken":             89,
		"TD_OnErrRtnBatchOrderAction":                  90,
		"TD_OnRtnOptionSelfClose":                      91,
		"TD_OnErrRtnOptionSelfCloseInsert":             92,
		"TD_OnErrRtnOptionSelfCloseAction":             93,
		"TD_OnRtnCombAction":                           94,
		"TD_OnErrRtnCombActionInsert":                  95,
		"TD_OnRspQryContractBank":                      96,
		"TD_OnRspQryParkedOrder":                       97,
		"TD_OnRspQryParkedOrderAction":                 98,
		"TD_OnRspQryTradingNotice":                     99,
		"TD_OnRspQryBrokerTradingParams":               100,
		"TD_OnRspQryBrokerTradingAlgos":                101,
		"TD_OnRspQueryCFMMCTradingAccountToken":        102,
		"TD_OnRtnFromBankToFutureByBank":               103,
		"TD_OnRtnFromFutureToBankByBank":               104,
		"TD_OnRtnRepealFromBankToFutureByBank":         105,
		"TD_OnRtnRepealFromFutureToBankByBank":         106,
		"TD_OnRtnFromBankToFutureByFuture":             107,
		"TD_OnRtnFromFutureToBankByFuture":             108,
		"TD_OnRtnRepealFromBankToFutureByFutureManual": 109,
		"TD_OnRtnRepealFromFutureToBankByFutureManual": 110,
		"TD_OnRtnQueryBankBalanceByFuture":             111,
		"TD_OnErrRtnBankToFutureByFuture":              112,
		"TD_OnErrRtnFutureToBankByFuture":              113,
		"TD_OnErrRtnRepealBankToFutureByFutureManual":  114,
		"TD_OnErrRtnRepealFutureToBankByFutureManual":  115,
		"TD_OnErrRtnQueryBankBalanceByFuture":          116,
		"TD_OnRtnRepealFromBankToFutureByFuture":       117,
		"TD_OnRtnRepealFromFutureToBankByFuture":       118,
		"TD_OnRspFromBankToFutureByFuture":             119,
		"TD_OnRspFromFutureToBankByFuture":             120,
		"TD_OnRspQueryBankAccountMoneyByFuture":        121,
		"TD_OnRtnOpenAccountByBank":                    122,
		"TD_OnRtnCancelAccountByBank":                  123,
		"TD_OnRtnChangeAccountByBank":                  124,
		"TD_Release":                                   125,
		"TD_Init":                                      126,
		"TD_Join":                                      127,
		"TD_":                                          128,
		"TD_RegisterFront":                             129,
		"TD_RegisterNameServer":                        130,
		"TD_RegisterFensUserInfo":                      131,
		"TD_RegisterSpi":                               132,
		"TD_SubscribePrivateTopic":                     133,
		"TD_SubscribePublicTopic":                      134,
		"TD_ReqAuthenticate":                           135,
		"TD_RegisterUserSystemInfo":                    136,
		"TD_SubmitUserSystemInfo":                      137,
		"TD_ReqUserLogin":                              138,
		"TD_ReqUserLogout":                             139,
		"TD_ReqUserPasswordUpdate":                     140,
		"TD_ReqTradingAccountPasswordUpdate":           141,
		"TD_ReqUserAuthMethod":                         142,
		"TD_ReqGenUserCaptcha":                         143,
		"TD_ReqGenUserText":                            144,
		"TD_ReqUserLoginWithCaptcha":                   145,
		"TD_ReqUserLoginWithText":                      146,
		"TD_ReqUserLoginWithOTP":                       147,
		"TD_ReqOrderInsert":                            148,
		"TD_ReqParkedOrderInsert":                      149,
		"TD_ReqParkedOrderAction":                      150,
		"TD_ReqOrderAction":                            151,
		"TD_ReqQueryMaxOrderVolume":                    152,
		"TD_ReqSettlementInfoConfirm":                  153,
		"TD_ReqRemoveParkedOrder":                      154,
		"TD_ReqRemoveParkedOrderAction":                155,
		"TD_ReqExecOrderInsert":                        156,
		"TD_ReqExecOrderAction":                        157,
		"TD_ReqForQuoteInsert":                         158,
		"TD_ReqQuoteInsert":                            159,
		"TD_ReqQuoteAction":                            160,
		"TD_ReqBatchOrderAction":                       161,
		"TD_ReqOptionSelfCloseInsert":                  162,
		"TD_ReqOptionSelfCloseAction":                  163,
		"TD_ReqCombActionInsert":                       164,
		"TD_ReqQryOrder":                               165,
		"TD_ReqQryTrade":                               166,
		"TD_ReqQryInvestorPosition":                    167,
		"TD_ReqQryTradingAccount":                      168,
		"TD_ReqQryInvestor":                            169,
		"TD_ReqQryTradingCode":                         170,
		"TD_ReqQryInstrumentMarginRate":                171,
		"TD_ReqQryInstrumentCommissionRate":            172,
		"TD_ReqQryExchange":                            173,
		"TD_ReqQryProduct":                             174,
		"TD_ReqQryInstrument":                          175,
		"TD_ReqQryDepthMarketData":                     176,
		"TD_ReqQrySettlementInfo":                      177,
		"TD_ReqQryTransferBank":                        178,
		"TD_ReqQryInvestorPositionDetail":              179,
		"TD_ReqQryNotice":                              180,
		"TD_ReqQrySettlementInfoConfirm":               181,
		"TD_ReqQryInvestorPositionCombineDetail":       182,
		"TD_ReqQryCFMMCTradingAccountKey":              183,
		"TD_ReqQryEWarrantOffset":                      184,
		"TD_ReqQryInvestorProductGroupMargin":          185,
		"TD_ReqQryExchangeMarginRate":                  186,
		"TD_ReqQryExchangeMarginRateAdjust":            187,
		"TD_ReqQryExchangeRate":                        188,
		"TD_ReqQrySecAgentACIDMap":                     189,
		"TD_ReqQryProductExchRate":                     190,
		"TD_ReqQryProductGroup":                        191,
		"TD_ReqQryMMInstrumentCommissionRate":          192,
		"TD_ReqQryMMOptionInstrCommRate":               193,
		"TD_ReqQryInstrumentOrderCommRate":             194,
		"TD_ReqQrySecAgentTradingAccount":              195,
		"TD_ReqQrySecAgentCheckMode":                   196,
		"TD_ReqQrySecAgentTradeInfo":                   197,
		"TD_ReqQryOptionInstrTradeCost":                198,
		"TD_ReqQryOptionInstrCommRate":                 199,
		"TD_ReqQryExecOrder":                           200,
		"TD_ReqQryForQuote":                            201,
		"TD_ReqQryQuote":                               202,
		"TD_ReqQryOptionSelfClose":                     203,
		"TD_ReqQryInvestUnit":                          204,
		"TD_ReqQryCombInstrumentGuard":                 205,
		"TD_ReqQryCombAction":                          206,
		"TD_ReqQryTransferSerial":                      207,
		"TD_ReqQryAccountregister":                     208,
		"TD_ReqQryContractBank":                        209,
		"TD_ReqQryParkedOrder":                         210,
		"TD_ReqQryParkedOrderAction":                   211,
		"TD_ReqQryTradingNotice":                       212,
		"TD_ReqQryBrokerTradingParams":                 213,
		"TD_ReqQryBrokerTradingAlgos":                  214,
		"TD_ReqQueryCFMMCTradingAccountToken":          215,
		"TD_ReqFromBankToFutureByFuture":               216,
		"TD_ReqFromFutureToBankByFuture":               217,
		"TD_ReqQueryBankAccountMoneyByFuture":          218,
		"MD_OnFrontConnected":                          219,
		"MD_OnFrontDisconnected":                       220,
		"MD_OnHeartBeatWarning":                        221,
		"MD_OnRspUserLogin":                            222,
		"MD_OnRspUserLogout":                           223,
		"MD_OnRspError":                                224,
		"MD_OnRspSubMarketData":                        225,
		"MD_OnRspUnSubMarketData":                      226,
		"MD_OnRspSubForQuoteRsp":                       227,
		"MD_OnRspUnSubForQuoteRsp":                     228,
		"MD_OnRtnDepthMarketData":                      229,
		"MD_OnRtnForQuoteRsp":                          230,
		"MD_Release":                                   231,
		"MD_Init":                                      232,
		"MD_Join":                                      233,
		"MD_":                                          234,
		"MD_RegisterFront":                             235,
		"MD_RegisterNameServer":                        236,
		"MD_RegisterFensUserInfo":                      237,
		"MD_RegisterSpi":                               238,
		"MD_SubscribeMarketData":                       239,
		"MD_UnSubscribeMarketData":                     240,
		"MD_SubscribeForQuoteRsp":                      241,
		"MD_UnSubscribeForQuoteRsp":                    242,
		"MD_ReqUserLogin":                              243,
		"MD_ReqUserLogout":                             244,
		"HEARTBEAT":                                    10000,
	}
)

func (x CtpMessageType) Enum() *CtpMessageType {
	p := new(CtpMessageType)
	*p = x
	return p
}

func (x CtpMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CtpMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_ctp_ctp_proto_enumTypes[0].Descriptor()
}

func (CtpMessageType) Type() protoreflect.EnumType {
	return &file_ctp_ctp_proto_enumTypes[0]
}

func (x CtpMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CtpMessageType.Descriptor instead.
func (CtpMessageType) EnumDescriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{0}
}

type CThostFtdcDisseminationField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceSeries int32 `protobuf:"varint,1,opt,name=SequenceSeries,proto3" json:"SequenceSeries,omitempty"`
	SequenceNo     int32 `protobuf:"varint,2,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
}

func (x *CThostFtdcDisseminationField) Reset() {
	*x = CThostFtdcDisseminationField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcDisseminationField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcDisseminationField) ProtoMessage() {}

func (x *CThostFtdcDisseminationField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcDisseminationField.ProtoReflect.Descriptor instead.
func (*CThostFtdcDisseminationField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{0}
}

func (x *CThostFtdcDisseminationField) GetSequenceSeries() int32 {
	if x != nil {
		return x.SequenceSeries
	}
	return 0
}

func (x *CThostFtdcDisseminationField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

type CThostFtdcReqUserLoginField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay           string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID             string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID               string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Password             string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	UserProductInfo      string `protobuf:"bytes,5,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	InterfaceProductInfo string `protobuf:"bytes,6,opt,name=InterfaceProductInfo,proto3" json:"InterfaceProductInfo,omitempty"`
	ProtocolInfo         string `protobuf:"bytes,7,opt,name=ProtocolInfo,proto3" json:"ProtocolInfo,omitempty"`
	MacAddress           string `protobuf:"bytes,8,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	OneTimePassword      string `protobuf:"bytes,9,opt,name=OneTimePassword,proto3" json:"OneTimePassword,omitempty"`
	ClientIPAddress      string `protobuf:"bytes,10,opt,name=ClientIPAddress,proto3" json:"ClientIPAddress,omitempty"`
	LoginRemark          string `protobuf:"bytes,11,opt,name=LoginRemark,proto3" json:"LoginRemark,omitempty"`
	ClientIPPort         int32  `protobuf:"varint,12,opt,name=ClientIPPort,proto3" json:"ClientIPPort,omitempty"`
}

func (x *CThostFtdcReqUserLoginField) Reset() {
	*x = CThostFtdcReqUserLoginField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqUserLoginField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqUserLoginField) ProtoMessage() {}

func (x *CThostFtdcReqUserLoginField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqUserLoginField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqUserLoginField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{1}
}

func (x *CThostFtdcReqUserLoginField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetInterfaceProductInfo() string {
	if x != nil {
		return x.InterfaceProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetProtocolInfo() string {
	if x != nil {
		return x.ProtocolInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetOneTimePassword() string {
	if x != nil {
		return x.OneTimePassword
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetClientIPAddress() string {
	if x != nil {
		return x.ClientIPAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetLoginRemark() string {
	if x != nil {
		return x.LoginRemark
	}
	return ""
}

func (x *CThostFtdcReqUserLoginField) GetClientIPPort() int32 {
	if x != nil {
		return x.ClientIPPort
	}
	return 0
}

type CThostFtdcRspUserLoginField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay  string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	LoginTime   string `protobuf:"bytes,2,opt,name=LoginTime,proto3" json:"LoginTime,omitempty"`
	BrokerID    string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID      string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	SystemName  []byte `protobuf:"bytes,5,opt,name=SystemName,proto3" json:"SystemName,omitempty"`
	FrontID     int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID   int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	MaxOrderRef string `protobuf:"bytes,8,opt,name=MaxOrderRef,proto3" json:"MaxOrderRef,omitempty"`
	SHFETime    string `protobuf:"bytes,9,opt,name=SHFETime,proto3" json:"SHFETime,omitempty"`
	DCETime     string `protobuf:"bytes,10,opt,name=DCETime,proto3" json:"DCETime,omitempty"`
	CZCETime    string `protobuf:"bytes,11,opt,name=CZCETime,proto3" json:"CZCETime,omitempty"`
	FFEXTime    string `protobuf:"bytes,12,opt,name=FFEXTime,proto3" json:"FFEXTime,omitempty"`
	INETime     string `protobuf:"bytes,13,opt,name=INETime,proto3" json:"INETime,omitempty"`
}

func (x *CThostFtdcRspUserLoginField) Reset() {
	*x = CThostFtdcRspUserLoginField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspUserLoginField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspUserLoginField) ProtoMessage() {}

func (x *CThostFtdcRspUserLoginField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspUserLoginField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspUserLoginField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{2}
}

func (x *CThostFtdcRspUserLoginField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetSystemName() []byte {
	if x != nil {
		return x.SystemName
	}
	return nil
}

func (x *CThostFtdcRspUserLoginField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcRspUserLoginField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspUserLoginField) GetMaxOrderRef() string {
	if x != nil {
		return x.MaxOrderRef
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetSHFETime() string {
	if x != nil {
		return x.SHFETime
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetDCETime() string {
	if x != nil {
		return x.DCETime
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetCZCETime() string {
	if x != nil {
		return x.CZCETime
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetFFEXTime() string {
	if x != nil {
		return x.FFEXTime
	}
	return ""
}

func (x *CThostFtdcRspUserLoginField) GetINETime() string {
	if x != nil {
		return x.INETime
	}
	return ""
}

type CThostFtdcUserLogoutField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcUserLogoutField) Reset() {
	*x = CThostFtdcUserLogoutField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcUserLogoutField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcUserLogoutField) ProtoMessage() {}

func (x *CThostFtdcUserLogoutField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcUserLogoutField.ProtoReflect.Descriptor instead.
func (*CThostFtdcUserLogoutField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{3}
}

func (x *CThostFtdcUserLogoutField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcUserLogoutField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcForceUserLogoutField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcForceUserLogoutField) Reset() {
	*x = CThostFtdcForceUserLogoutField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcForceUserLogoutField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcForceUserLogoutField) ProtoMessage() {}

func (x *CThostFtdcForceUserLogoutField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcForceUserLogoutField.ProtoReflect.Descriptor instead.
func (*CThostFtdcForceUserLogoutField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{4}
}

func (x *CThostFtdcForceUserLogoutField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcForceUserLogoutField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcReqAuthenticateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID          string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserProductInfo string `protobuf:"bytes,3,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	AuthCode        string `protobuf:"bytes,4,opt,name=AuthCode,proto3" json:"AuthCode,omitempty"`
	AppID           string `protobuf:"bytes,5,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *CThostFtdcReqAuthenticateField) Reset() {
	*x = CThostFtdcReqAuthenticateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqAuthenticateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqAuthenticateField) ProtoMessage() {}

func (x *CThostFtdcReqAuthenticateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqAuthenticateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqAuthenticateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{5}
}

func (x *CThostFtdcReqAuthenticateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqAuthenticateField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqAuthenticateField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcReqAuthenticateField) GetAuthCode() string {
	if x != nil {
		return x.AuthCode
	}
	return ""
}

func (x *CThostFtdcReqAuthenticateField) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type CThostFtdcRspAuthenticateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID          string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserProductInfo string `protobuf:"bytes,3,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	AppID           string `protobuf:"bytes,4,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppType         int32  `protobuf:"varint,5,opt,name=AppType,proto3" json:"AppType,omitempty"`
}

func (x *CThostFtdcRspAuthenticateField) Reset() {
	*x = CThostFtdcRspAuthenticateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspAuthenticateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspAuthenticateField) ProtoMessage() {}

func (x *CThostFtdcRspAuthenticateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspAuthenticateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspAuthenticateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{6}
}

func (x *CThostFtdcRspAuthenticateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspAuthenticateField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspAuthenticateField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcRspAuthenticateField) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CThostFtdcRspAuthenticateField) GetAppType() int32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

type CThostFtdcAuthenticationInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID          string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserProductInfo string `protobuf:"bytes,3,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	AuthInfo        string `protobuf:"bytes,4,opt,name=AuthInfo,proto3" json:"AuthInfo,omitempty"`
	IsResult        int32  `protobuf:"varint,5,opt,name=IsResult,proto3" json:"IsResult,omitempty"`
	AppID           string `protobuf:"bytes,6,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppType         int32  `protobuf:"varint,7,opt,name=AppType,proto3" json:"AppType,omitempty"`
}

func (x *CThostFtdcAuthenticationInfoField) Reset() {
	*x = CThostFtdcAuthenticationInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcAuthenticationInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcAuthenticationInfoField) ProtoMessage() {}

func (x *CThostFtdcAuthenticationInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcAuthenticationInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcAuthenticationInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{7}
}

func (x *CThostFtdcAuthenticationInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcAuthenticationInfoField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcAuthenticationInfoField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcAuthenticationInfoField) GetAuthInfo() string {
	if x != nil {
		return x.AuthInfo
	}
	return ""
}

func (x *CThostFtdcAuthenticationInfoField) GetIsResult() int32 {
	if x != nil {
		return x.IsResult
	}
	return 0
}

func (x *CThostFtdcAuthenticationInfoField) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CThostFtdcAuthenticationInfoField) GetAppType() int32 {
	if x != nil {
		return x.AppType
	}
	return 0
}

type CThostFtdcRspUserLogin2Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay   string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	LoginTime    string `protobuf:"bytes,2,opt,name=LoginTime,proto3" json:"LoginTime,omitempty"`
	BrokerID     string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID       string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	SystemName   []byte `protobuf:"bytes,5,opt,name=SystemName,proto3" json:"SystemName,omitempty"`
	FrontID      int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID    int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	MaxOrderRef  string `protobuf:"bytes,8,opt,name=MaxOrderRef,proto3" json:"MaxOrderRef,omitempty"`
	SHFETime     string `protobuf:"bytes,9,opt,name=SHFETime,proto3" json:"SHFETime,omitempty"`
	DCETime      string `protobuf:"bytes,10,opt,name=DCETime,proto3" json:"DCETime,omitempty"`
	CZCETime     string `protobuf:"bytes,11,opt,name=CZCETime,proto3" json:"CZCETime,omitempty"`
	FFEXTime     string `protobuf:"bytes,12,opt,name=FFEXTime,proto3" json:"FFEXTime,omitempty"`
	INETime      string `protobuf:"bytes,13,opt,name=INETime,proto3" json:"INETime,omitempty"`
	RandomString string `protobuf:"bytes,14,opt,name=RandomString,proto3" json:"RandomString,omitempty"`
}

func (x *CThostFtdcRspUserLogin2Field) Reset() {
	*x = CThostFtdcRspUserLogin2Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspUserLogin2Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspUserLogin2Field) ProtoMessage() {}

func (x *CThostFtdcRspUserLogin2Field) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspUserLogin2Field.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspUserLogin2Field) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{8}
}

func (x *CThostFtdcRspUserLogin2Field) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetSystemName() []byte {
	if x != nil {
		return x.SystemName
	}
	return nil
}

func (x *CThostFtdcRspUserLogin2Field) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcRspUserLogin2Field) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspUserLogin2Field) GetMaxOrderRef() string {
	if x != nil {
		return x.MaxOrderRef
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetSHFETime() string {
	if x != nil {
		return x.SHFETime
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetDCETime() string {
	if x != nil {
		return x.DCETime
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetCZCETime() string {
	if x != nil {
		return x.CZCETime
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetFFEXTime() string {
	if x != nil {
		return x.FFEXTime
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetINETime() string {
	if x != nil {
		return x.INETime
	}
	return ""
}

func (x *CThostFtdcRspUserLogin2Field) GetRandomString() string {
	if x != nil {
		return x.RandomString
	}
	return ""
}

type CThostFtdcTransferHeaderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version     string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	TradeCode   string `protobuf:"bytes,2,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	TradeDate   string `protobuf:"bytes,3,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime   string `protobuf:"bytes,4,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	TradeSerial string `protobuf:"bytes,5,opt,name=TradeSerial,proto3" json:"TradeSerial,omitempty"`
	FutureID    string `protobuf:"bytes,6,opt,name=FutureID,proto3" json:"FutureID,omitempty"`
	BankID      string `protobuf:"bytes,7,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBrchID  string `protobuf:"bytes,8,opt,name=BankBrchID,proto3" json:"BankBrchID,omitempty"`
	OperNo      string `protobuf:"bytes,9,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	DeviceID    string `protobuf:"bytes,10,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	RecordNum   string `protobuf:"bytes,11,opt,name=RecordNum,proto3" json:"RecordNum,omitempty"`
	SessionID   int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	RequestID   int32  `protobuf:"varint,13,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
}

func (x *CThostFtdcTransferHeaderField) Reset() {
	*x = CThostFtdcTransferHeaderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferHeaderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferHeaderField) ProtoMessage() {}

func (x *CThostFtdcTransferHeaderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferHeaderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferHeaderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{9}
}

func (x *CThostFtdcTransferHeaderField) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetTradeSerial() string {
	if x != nil {
		return x.TradeSerial
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetFutureID() string {
	if x != nil {
		return x.FutureID
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetBankBrchID() string {
	if x != nil {
		return x.BankBrchID
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetRecordNum() string {
	if x != nil {
		return x.RecordNum
	}
	return ""
}

func (x *CThostFtdcTransferHeaderField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcTransferHeaderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

type CThostFtdcTransferBankToFutureReqField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureAccount string  `protobuf:"bytes,1,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
	FuturePwdFlag int32   `protobuf:"varint,2,opt,name=FuturePwdFlag,proto3" json:"FuturePwdFlag,omitempty"`
	FutureAccPwd  string  `protobuf:"bytes,3,opt,name=FutureAccPwd,proto3" json:"FutureAccPwd,omitempty"`
	TradeAmt      float64 `protobuf:"fixed64,4,opt,name=TradeAmt,proto3" json:"TradeAmt,omitempty"`
	CustFee       float64 `protobuf:"fixed64,5,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,6,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
}

func (x *CThostFtdcTransferBankToFutureReqField) Reset() {
	*x = CThostFtdcTransferBankToFutureReqField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferBankToFutureReqField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferBankToFutureReqField) ProtoMessage() {}

func (x *CThostFtdcTransferBankToFutureReqField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferBankToFutureReqField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferBankToFutureReqField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{10}
}

func (x *CThostFtdcTransferBankToFutureReqField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

func (x *CThostFtdcTransferBankToFutureReqField) GetFuturePwdFlag() int32 {
	if x != nil {
		return x.FuturePwdFlag
	}
	return 0
}

func (x *CThostFtdcTransferBankToFutureReqField) GetFutureAccPwd() string {
	if x != nil {
		return x.FutureAccPwd
	}
	return ""
}

func (x *CThostFtdcTransferBankToFutureReqField) GetTradeAmt() float64 {
	if x != nil {
		return x.TradeAmt
	}
	return 0
}

func (x *CThostFtdcTransferBankToFutureReqField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcTransferBankToFutureReqField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CThostFtdcTransferBankToFutureRspField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode       string  `protobuf:"bytes,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	RetInfo       string  `protobuf:"bytes,2,opt,name=RetInfo,proto3" json:"RetInfo,omitempty"`
	FutureAccount string  `protobuf:"bytes,3,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
	TradeAmt      float64 `protobuf:"fixed64,4,opt,name=TradeAmt,proto3" json:"TradeAmt,omitempty"`
	CustFee       float64 `protobuf:"fixed64,5,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,6,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
}

func (x *CThostFtdcTransferBankToFutureRspField) Reset() {
	*x = CThostFtdcTransferBankToFutureRspField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferBankToFutureRspField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferBankToFutureRspField) ProtoMessage() {}

func (x *CThostFtdcTransferBankToFutureRspField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferBankToFutureRspField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferBankToFutureRspField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{11}
}

func (x *CThostFtdcTransferBankToFutureRspField) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *CThostFtdcTransferBankToFutureRspField) GetRetInfo() string {
	if x != nil {
		return x.RetInfo
	}
	return ""
}

func (x *CThostFtdcTransferBankToFutureRspField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

func (x *CThostFtdcTransferBankToFutureRspField) GetTradeAmt() float64 {
	if x != nil {
		return x.TradeAmt
	}
	return 0
}

func (x *CThostFtdcTransferBankToFutureRspField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcTransferBankToFutureRspField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CThostFtdcTransferFutureToBankReqField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureAccount string  `protobuf:"bytes,1,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
	FuturePwdFlag int32   `protobuf:"varint,2,opt,name=FuturePwdFlag,proto3" json:"FuturePwdFlag,omitempty"`
	FutureAccPwd  string  `protobuf:"bytes,3,opt,name=FutureAccPwd,proto3" json:"FutureAccPwd,omitempty"`
	TradeAmt      float64 `protobuf:"fixed64,4,opt,name=TradeAmt,proto3" json:"TradeAmt,omitempty"`
	CustFee       float64 `protobuf:"fixed64,5,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,6,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
}

func (x *CThostFtdcTransferFutureToBankReqField) Reset() {
	*x = CThostFtdcTransferFutureToBankReqField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferFutureToBankReqField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferFutureToBankReqField) ProtoMessage() {}

func (x *CThostFtdcTransferFutureToBankReqField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferFutureToBankReqField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferFutureToBankReqField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{12}
}

func (x *CThostFtdcTransferFutureToBankReqField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

func (x *CThostFtdcTransferFutureToBankReqField) GetFuturePwdFlag() int32 {
	if x != nil {
		return x.FuturePwdFlag
	}
	return 0
}

func (x *CThostFtdcTransferFutureToBankReqField) GetFutureAccPwd() string {
	if x != nil {
		return x.FutureAccPwd
	}
	return ""
}

func (x *CThostFtdcTransferFutureToBankReqField) GetTradeAmt() float64 {
	if x != nil {
		return x.TradeAmt
	}
	return 0
}

func (x *CThostFtdcTransferFutureToBankReqField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcTransferFutureToBankReqField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CThostFtdcTransferFutureToBankRspField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode       string  `protobuf:"bytes,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	RetInfo       string  `protobuf:"bytes,2,opt,name=RetInfo,proto3" json:"RetInfo,omitempty"`
	FutureAccount string  `protobuf:"bytes,3,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
	TradeAmt      float64 `protobuf:"fixed64,4,opt,name=TradeAmt,proto3" json:"TradeAmt,omitempty"`
	CustFee       float64 `protobuf:"fixed64,5,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,6,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
}

func (x *CThostFtdcTransferFutureToBankRspField) Reset() {
	*x = CThostFtdcTransferFutureToBankRspField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferFutureToBankRspField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferFutureToBankRspField) ProtoMessage() {}

func (x *CThostFtdcTransferFutureToBankRspField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferFutureToBankRspField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferFutureToBankRspField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{13}
}

func (x *CThostFtdcTransferFutureToBankRspField) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *CThostFtdcTransferFutureToBankRspField) GetRetInfo() string {
	if x != nil {
		return x.RetInfo
	}
	return ""
}

func (x *CThostFtdcTransferFutureToBankRspField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

func (x *CThostFtdcTransferFutureToBankRspField) GetTradeAmt() float64 {
	if x != nil {
		return x.TradeAmt
	}
	return 0
}

func (x *CThostFtdcTransferFutureToBankRspField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcTransferFutureToBankRspField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CThostFtdcTransferQryBankReqField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureAccount string `protobuf:"bytes,1,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
	FuturePwdFlag int32  `protobuf:"varint,2,opt,name=FuturePwdFlag,proto3" json:"FuturePwdFlag,omitempty"`
	FutureAccPwd  string `protobuf:"bytes,3,opt,name=FutureAccPwd,proto3" json:"FutureAccPwd,omitempty"`
	CurrencyCode  string `protobuf:"bytes,4,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
}

func (x *CThostFtdcTransferQryBankReqField) Reset() {
	*x = CThostFtdcTransferQryBankReqField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferQryBankReqField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferQryBankReqField) ProtoMessage() {}

func (x *CThostFtdcTransferQryBankReqField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferQryBankReqField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferQryBankReqField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{14}
}

func (x *CThostFtdcTransferQryBankReqField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

func (x *CThostFtdcTransferQryBankReqField) GetFuturePwdFlag() int32 {
	if x != nil {
		return x.FuturePwdFlag
	}
	return 0
}

func (x *CThostFtdcTransferQryBankReqField) GetFutureAccPwd() string {
	if x != nil {
		return x.FutureAccPwd
	}
	return ""
}

func (x *CThostFtdcTransferQryBankReqField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CThostFtdcTransferQryBankRspField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode       string  `protobuf:"bytes,1,opt,name=RetCode,proto3" json:"RetCode,omitempty"`
	RetInfo       string  `protobuf:"bytes,2,opt,name=RetInfo,proto3" json:"RetInfo,omitempty"`
	FutureAccount string  `protobuf:"bytes,3,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
	TradeAmt      float64 `protobuf:"fixed64,4,opt,name=TradeAmt,proto3" json:"TradeAmt,omitempty"`
	UseAmt        float64 `protobuf:"fixed64,5,opt,name=UseAmt,proto3" json:"UseAmt,omitempty"`
	FetchAmt      float64 `protobuf:"fixed64,6,opt,name=FetchAmt,proto3" json:"FetchAmt,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,7,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
}

func (x *CThostFtdcTransferQryBankRspField) Reset() {
	*x = CThostFtdcTransferQryBankRspField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferQryBankRspField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferQryBankRspField) ProtoMessage() {}

func (x *CThostFtdcTransferQryBankRspField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferQryBankRspField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferQryBankRspField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{15}
}

func (x *CThostFtdcTransferQryBankRspField) GetRetCode() string {
	if x != nil {
		return x.RetCode
	}
	return ""
}

func (x *CThostFtdcTransferQryBankRspField) GetRetInfo() string {
	if x != nil {
		return x.RetInfo
	}
	return ""
}

func (x *CThostFtdcTransferQryBankRspField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

func (x *CThostFtdcTransferQryBankRspField) GetTradeAmt() float64 {
	if x != nil {
		return x.TradeAmt
	}
	return 0
}

func (x *CThostFtdcTransferQryBankRspField) GetUseAmt() float64 {
	if x != nil {
		return x.UseAmt
	}
	return 0
}

func (x *CThostFtdcTransferQryBankRspField) GetFetchAmt() float64 {
	if x != nil {
		return x.FetchAmt
	}
	return 0
}

func (x *CThostFtdcTransferQryBankRspField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

type CThostFtdcTransferQryDetailReqField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureAccount string `protobuf:"bytes,1,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
}

func (x *CThostFtdcTransferQryDetailReqField) Reset() {
	*x = CThostFtdcTransferQryDetailReqField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferQryDetailReqField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferQryDetailReqField) ProtoMessage() {}

func (x *CThostFtdcTransferQryDetailReqField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferQryDetailReqField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferQryDetailReqField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{16}
}

func (x *CThostFtdcTransferQryDetailReqField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

type CThostFtdcTransferQryDetailRspField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate     string  `protobuf:"bytes,1,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime     string  `protobuf:"bytes,2,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	TradeCode     string  `protobuf:"bytes,3,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	FutureSerial  int32   `protobuf:"varint,4,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	FutureID      string  `protobuf:"bytes,5,opt,name=FutureID,proto3" json:"FutureID,omitempty"`
	FutureAccount string  `protobuf:"bytes,6,opt,name=FutureAccount,proto3" json:"FutureAccount,omitempty"`
	BankSerial    int32   `protobuf:"varint,7,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	BankID        string  `protobuf:"bytes,8,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBrchID    string  `protobuf:"bytes,9,opt,name=BankBrchID,proto3" json:"BankBrchID,omitempty"`
	BankAccount   string  `protobuf:"bytes,10,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	CertCode      string  `protobuf:"bytes,11,opt,name=CertCode,proto3" json:"CertCode,omitempty"`
	CurrencyCode  string  `protobuf:"bytes,12,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	TxAmount      float64 `protobuf:"fixed64,13,opt,name=TxAmount,proto3" json:"TxAmount,omitempty"`
	Flag          int32   `protobuf:"varint,14,opt,name=Flag,proto3" json:"Flag,omitempty"`
}

func (x *CThostFtdcTransferQryDetailRspField) Reset() {
	*x = CThostFtdcTransferQryDetailRspField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferQryDetailRspField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferQryDetailRspField) ProtoMessage() {}

func (x *CThostFtdcTransferQryDetailRspField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferQryDetailRspField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferQryDetailRspField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{17}
}

func (x *CThostFtdcTransferQryDetailRspField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcTransferQryDetailRspField) GetFutureID() string {
	if x != nil {
		return x.FutureID
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetFutureAccount() string {
	if x != nil {
		return x.FutureAccount
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetBankSerial() int32 {
	if x != nil {
		return x.BankSerial
	}
	return 0
}

func (x *CThostFtdcTransferQryDetailRspField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetBankBrchID() string {
	if x != nil {
		return x.BankBrchID
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetCertCode() string {
	if x != nil {
		return x.CertCode
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *CThostFtdcTransferQryDetailRspField) GetTxAmount() float64 {
	if x != nil {
		return x.TxAmount
	}
	return 0
}

func (x *CThostFtdcTransferQryDetailRspField) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type CThostFtdcRspInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorID  int32  `protobuf:"varint,1,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg []byte `protobuf:"bytes,2,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcRspInfoField) Reset() {
	*x = CThostFtdcRspInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspInfoField) ProtoMessage() {}

func (x *CThostFtdcRspInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{18}
}

func (x *CThostFtdcRspInfoField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcRspInfoField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcExchangeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID       string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExchangeName     []byte `protobuf:"bytes,2,opt,name=ExchangeName,proto3" json:"ExchangeName,omitempty"`
	ExchangeProperty int32  `protobuf:"varint,3,opt,name=ExchangeProperty,proto3" json:"ExchangeProperty,omitempty"`
}

func (x *CThostFtdcExchangeField) Reset() {
	*x = CThostFtdcExchangeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeField) ProtoMessage() {}

func (x *CThostFtdcExchangeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{19}
}

func (x *CThostFtdcExchangeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeField) GetExchangeName() []byte {
	if x != nil {
		return x.ExchangeName
	}
	return nil
}

func (x *CThostFtdcExchangeField) GetExchangeProperty() int32 {
	if x != nil {
		return x.ExchangeProperty
	}
	return 0
}

type CThostFtdcProductField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID            string  `protobuf:"bytes,1,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ProductName          []byte  `protobuf:"bytes,2,opt,name=ProductName,proto3" json:"ProductName,omitempty"`
	ExchangeID           string  `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ProductClass         int32   `protobuf:"varint,4,opt,name=ProductClass,proto3" json:"ProductClass,omitempty"`
	VolumeMultiple       int32   `protobuf:"varint,5,opt,name=VolumeMultiple,proto3" json:"VolumeMultiple,omitempty"`
	PriceTick            float64 `protobuf:"fixed64,6,opt,name=PriceTick,proto3" json:"PriceTick,omitempty"`
	MaxMarketOrderVolume int32   `protobuf:"varint,7,opt,name=MaxMarketOrderVolume,proto3" json:"MaxMarketOrderVolume,omitempty"`
	MinMarketOrderVolume int32   `protobuf:"varint,8,opt,name=MinMarketOrderVolume,proto3" json:"MinMarketOrderVolume,omitempty"`
	MaxLimitOrderVolume  int32   `protobuf:"varint,9,opt,name=MaxLimitOrderVolume,proto3" json:"MaxLimitOrderVolume,omitempty"`
	MinLimitOrderVolume  int32   `protobuf:"varint,10,opt,name=MinLimitOrderVolume,proto3" json:"MinLimitOrderVolume,omitempty"`
	PositionType         int32   `protobuf:"varint,11,opt,name=PositionType,proto3" json:"PositionType,omitempty"`
	PositionDateType     int32   `protobuf:"varint,12,opt,name=PositionDateType,proto3" json:"PositionDateType,omitempty"`
	CloseDealType        int32   `protobuf:"varint,13,opt,name=CloseDealType,proto3" json:"CloseDealType,omitempty"`
	TradeCurrencyID      string  `protobuf:"bytes,14,opt,name=TradeCurrencyID,proto3" json:"TradeCurrencyID,omitempty"`
	MortgageFundUseRange int32   `protobuf:"varint,15,opt,name=MortgageFundUseRange,proto3" json:"MortgageFundUseRange,omitempty"`
	ExchangeProductID    string  `protobuf:"bytes,16,opt,name=ExchangeProductID,proto3" json:"ExchangeProductID,omitempty"`
	UnderlyingMultiple   float64 `protobuf:"fixed64,17,opt,name=UnderlyingMultiple,proto3" json:"UnderlyingMultiple,omitempty"`
}

func (x *CThostFtdcProductField) Reset() {
	*x = CThostFtdcProductField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcProductField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcProductField) ProtoMessage() {}

func (x *CThostFtdcProductField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcProductField.ProtoReflect.Descriptor instead.
func (*CThostFtdcProductField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{20}
}

func (x *CThostFtdcProductField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcProductField) GetProductName() []byte {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *CThostFtdcProductField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcProductField) GetProductClass() int32 {
	if x != nil {
		return x.ProductClass
	}
	return 0
}

func (x *CThostFtdcProductField) GetVolumeMultiple() int32 {
	if x != nil {
		return x.VolumeMultiple
	}
	return 0
}

func (x *CThostFtdcProductField) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *CThostFtdcProductField) GetMaxMarketOrderVolume() int32 {
	if x != nil {
		return x.MaxMarketOrderVolume
	}
	return 0
}

func (x *CThostFtdcProductField) GetMinMarketOrderVolume() int32 {
	if x != nil {
		return x.MinMarketOrderVolume
	}
	return 0
}

func (x *CThostFtdcProductField) GetMaxLimitOrderVolume() int32 {
	if x != nil {
		return x.MaxLimitOrderVolume
	}
	return 0
}

func (x *CThostFtdcProductField) GetMinLimitOrderVolume() int32 {
	if x != nil {
		return x.MinLimitOrderVolume
	}
	return 0
}

func (x *CThostFtdcProductField) GetPositionType() int32 {
	if x != nil {
		return x.PositionType
	}
	return 0
}

func (x *CThostFtdcProductField) GetPositionDateType() int32 {
	if x != nil {
		return x.PositionDateType
	}
	return 0
}

func (x *CThostFtdcProductField) GetCloseDealType() int32 {
	if x != nil {
		return x.CloseDealType
	}
	return 0
}

func (x *CThostFtdcProductField) GetTradeCurrencyID() string {
	if x != nil {
		return x.TradeCurrencyID
	}
	return ""
}

func (x *CThostFtdcProductField) GetMortgageFundUseRange() int32 {
	if x != nil {
		return x.MortgageFundUseRange
	}
	return 0
}

func (x *CThostFtdcProductField) GetExchangeProductID() string {
	if x != nil {
		return x.ExchangeProductID
	}
	return ""
}

func (x *CThostFtdcProductField) GetUnderlyingMultiple() float64 {
	if x != nil {
		return x.UnderlyingMultiple
	}
	return 0
}

type CThostFtdcInstrumentField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID           string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID             string  `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InstrumentName         []byte  `protobuf:"bytes,3,opt,name=InstrumentName,proto3" json:"InstrumentName,omitempty"`
	ExchangeInstID         string  `protobuf:"bytes,4,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ProductID              string  `protobuf:"bytes,5,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ProductClass           int32   `protobuf:"varint,6,opt,name=ProductClass,proto3" json:"ProductClass,omitempty"`
	DeliveryYear           int32   `protobuf:"varint,7,opt,name=DeliveryYear,proto3" json:"DeliveryYear,omitempty"`
	DeliveryMonth          int32   `protobuf:"varint,8,opt,name=DeliveryMonth,proto3" json:"DeliveryMonth,omitempty"`
	MaxMarketOrderVolume   int32   `protobuf:"varint,9,opt,name=MaxMarketOrderVolume,proto3" json:"MaxMarketOrderVolume,omitempty"`
	MinMarketOrderVolume   int32   `protobuf:"varint,10,opt,name=MinMarketOrderVolume,proto3" json:"MinMarketOrderVolume,omitempty"`
	MaxLimitOrderVolume    int32   `protobuf:"varint,11,opt,name=MaxLimitOrderVolume,proto3" json:"MaxLimitOrderVolume,omitempty"`
	MinLimitOrderVolume    int32   `protobuf:"varint,12,opt,name=MinLimitOrderVolume,proto3" json:"MinLimitOrderVolume,omitempty"`
	VolumeMultiple         int32   `protobuf:"varint,13,opt,name=VolumeMultiple,proto3" json:"VolumeMultiple,omitempty"`
	PriceTick              float64 `protobuf:"fixed64,14,opt,name=PriceTick,proto3" json:"PriceTick,omitempty"`
	CreateDate             string  `protobuf:"bytes,15,opt,name=CreateDate,proto3" json:"CreateDate,omitempty"`
	OpenDate               string  `protobuf:"bytes,16,opt,name=OpenDate,proto3" json:"OpenDate,omitempty"`
	ExpireDate             string  `protobuf:"bytes,17,opt,name=ExpireDate,proto3" json:"ExpireDate,omitempty"`
	StartDelivDate         string  `protobuf:"bytes,18,opt,name=StartDelivDate,proto3" json:"StartDelivDate,omitempty"`
	EndDelivDate           string  `protobuf:"bytes,19,opt,name=EndDelivDate,proto3" json:"EndDelivDate,omitempty"`
	InstLifePhase          int32   `protobuf:"varint,20,opt,name=InstLifePhase,proto3" json:"InstLifePhase,omitempty"`
	IsTrading              int32   `protobuf:"varint,21,opt,name=IsTrading,proto3" json:"IsTrading,omitempty"`
	PositionType           int32   `protobuf:"varint,22,opt,name=PositionType,proto3" json:"PositionType,omitempty"`
	PositionDateType       int32   `protobuf:"varint,23,opt,name=PositionDateType,proto3" json:"PositionDateType,omitempty"`
	LongMarginRatio        float64 `protobuf:"fixed64,24,opt,name=LongMarginRatio,proto3" json:"LongMarginRatio,omitempty"`
	ShortMarginRatio       float64 `protobuf:"fixed64,25,opt,name=ShortMarginRatio,proto3" json:"ShortMarginRatio,omitempty"`
	MaxMarginSideAlgorithm int32   `protobuf:"varint,26,opt,name=MaxMarginSideAlgorithm,proto3" json:"MaxMarginSideAlgorithm,omitempty"`
	UnderlyingInstrID      string  `protobuf:"bytes,27,opt,name=UnderlyingInstrID,proto3" json:"UnderlyingInstrID,omitempty"`
	StrikePrice            float64 `protobuf:"fixed64,28,opt,name=StrikePrice,proto3" json:"StrikePrice,omitempty"`
	OptionsType            int32   `protobuf:"varint,29,opt,name=OptionsType,proto3" json:"OptionsType,omitempty"`
	UnderlyingMultiple     float64 `protobuf:"fixed64,30,opt,name=UnderlyingMultiple,proto3" json:"UnderlyingMultiple,omitempty"`
	CombinationType        int32   `protobuf:"varint,31,opt,name=CombinationType,proto3" json:"CombinationType,omitempty"`
}

func (x *CThostFtdcInstrumentField) Reset() {
	*x = CThostFtdcInstrumentField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentField) ProtoMessage() {}

func (x *CThostFtdcInstrumentField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{21}
}

func (x *CThostFtdcInstrumentField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetInstrumentName() []byte {
	if x != nil {
		return x.InstrumentName
	}
	return nil
}

func (x *CThostFtdcInstrumentField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetProductClass() int32 {
	if x != nil {
		return x.ProductClass
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetDeliveryYear() int32 {
	if x != nil {
		return x.DeliveryYear
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetDeliveryMonth() int32 {
	if x != nil {
		return x.DeliveryMonth
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetMaxMarketOrderVolume() int32 {
	if x != nil {
		return x.MaxMarketOrderVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetMinMarketOrderVolume() int32 {
	if x != nil {
		return x.MinMarketOrderVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetMaxLimitOrderVolume() int32 {
	if x != nil {
		return x.MaxLimitOrderVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetMinLimitOrderVolume() int32 {
	if x != nil {
		return x.MinLimitOrderVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetVolumeMultiple() int32 {
	if x != nil {
		return x.VolumeMultiple
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetPriceTick() float64 {
	if x != nil {
		return x.PriceTick
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetStartDelivDate() string {
	if x != nil {
		return x.StartDelivDate
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetEndDelivDate() string {
	if x != nil {
		return x.EndDelivDate
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetInstLifePhase() int32 {
	if x != nil {
		return x.InstLifePhase
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetIsTrading() int32 {
	if x != nil {
		return x.IsTrading
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetPositionType() int32 {
	if x != nil {
		return x.PositionType
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetPositionDateType() int32 {
	if x != nil {
		return x.PositionDateType
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetLongMarginRatio() float64 {
	if x != nil {
		return x.LongMarginRatio
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetShortMarginRatio() float64 {
	if x != nil {
		return x.ShortMarginRatio
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetMaxMarginSideAlgorithm() int32 {
	if x != nil {
		return x.MaxMarginSideAlgorithm
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetUnderlyingInstrID() string {
	if x != nil {
		return x.UnderlyingInstrID
	}
	return ""
}

func (x *CThostFtdcInstrumentField) GetStrikePrice() float64 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetOptionsType() int32 {
	if x != nil {
		return x.OptionsType
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetUnderlyingMultiple() float64 {
	if x != nil {
		return x.UnderlyingMultiple
	}
	return 0
}

func (x *CThostFtdcInstrumentField) GetCombinationType() int32 {
	if x != nil {
		return x.CombinationType
	}
	return 0
}

type CThostFtdcBrokerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerAbbr string `protobuf:"bytes,2,opt,name=BrokerAbbr,proto3" json:"BrokerAbbr,omitempty"`
	BrokerName []byte `protobuf:"bytes,3,opt,name=BrokerName,proto3" json:"BrokerName,omitempty"`
	IsActive   int32  `protobuf:"varint,4,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
}

func (x *CThostFtdcBrokerField) Reset() {
	*x = CThostFtdcBrokerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerField) ProtoMessage() {}

func (x *CThostFtdcBrokerField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{22}
}

func (x *CThostFtdcBrokerField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerField) GetBrokerAbbr() string {
	if x != nil {
		return x.BrokerAbbr
	}
	return ""
}

func (x *CThostFtdcBrokerField) GetBrokerName() []byte {
	if x != nil {
		return x.BrokerName
	}
	return nil
}

func (x *CThostFtdcBrokerField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

type CThostFtdcTraderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID      string `protobuf:"bytes,2,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	ParticipantID string `protobuf:"bytes,3,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	Password      string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallCount  int32  `protobuf:"varint,5,opt,name=InstallCount,proto3" json:"InstallCount,omitempty"`
	BrokerID      string `protobuf:"bytes,6,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (x *CThostFtdcTraderField) Reset() {
	*x = CThostFtdcTraderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTraderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTraderField) ProtoMessage() {}

func (x *CThostFtdcTraderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTraderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTraderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{23}
}

func (x *CThostFtdcTraderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcTraderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcTraderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcTraderField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcTraderField) GetInstallCount() int32 {
	if x != nil {
		return x.InstallCount
	}
	return 0
}

func (x *CThostFtdcTraderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

type CThostFtdcInvestorField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorID         string `protobuf:"bytes,1,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	BrokerID           string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorGroupID    string `protobuf:"bytes,3,opt,name=InvestorGroupID,proto3" json:"InvestorGroupID,omitempty"`
	InvestorName       []byte `protobuf:"bytes,4,opt,name=InvestorName,proto3" json:"InvestorName,omitempty"`
	IdentifiedCardType int32  `protobuf:"varint,5,opt,name=IdentifiedCardType,proto3" json:"IdentifiedCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,6,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	IsActive           int32  `protobuf:"varint,7,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	Telephone          string `protobuf:"bytes,8,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	Address            string `protobuf:"bytes,9,opt,name=Address,proto3" json:"Address,omitempty"`
	OpenDate           string `protobuf:"bytes,10,opt,name=OpenDate,proto3" json:"OpenDate,omitempty"`
	Mobile             string `protobuf:"bytes,11,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	CommModelID        string `protobuf:"bytes,12,opt,name=CommModelID,proto3" json:"CommModelID,omitempty"`
	MarginModelID      string `protobuf:"bytes,13,opt,name=MarginModelID,proto3" json:"MarginModelID,omitempty"`
}

func (x *CThostFtdcInvestorField) Reset() {
	*x = CThostFtdcInvestorField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorField) ProtoMessage() {}

func (x *CThostFtdcInvestorField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{24}
}

func (x *CThostFtdcInvestorField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetInvestorGroupID() string {
	if x != nil {
		return x.InvestorGroupID
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetInvestorName() []byte {
	if x != nil {
		return x.InvestorName
	}
	return nil
}

func (x *CThostFtdcInvestorField) GetIdentifiedCardType() int32 {
	if x != nil {
		return x.IdentifiedCardType
	}
	return 0
}

func (x *CThostFtdcInvestorField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *CThostFtdcInvestorField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetCommModelID() string {
	if x != nil {
		return x.CommModelID
	}
	return ""
}

func (x *CThostFtdcInvestorField) GetMarginModelID() string {
	if x != nil {
		return x.MarginModelID
	}
	return ""
}

type CThostFtdcTradingCodeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorID   string `protobuf:"bytes,1,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	BrokerID     string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ExchangeID   string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ClientID     string `protobuf:"bytes,4,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IsActive     int32  `protobuf:"varint,5,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	ClientIDType int32  `protobuf:"varint,6,opt,name=ClientIDType,proto3" json:"ClientIDType,omitempty"`
	BranchID     string `protobuf:"bytes,7,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	BizType      int32  `protobuf:"varint,8,opt,name=BizType,proto3" json:"BizType,omitempty"`
	InvestUnitID string `protobuf:"bytes,9,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcTradingCodeField) Reset() {
	*x = CThostFtdcTradingCodeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingCodeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingCodeField) ProtoMessage() {}

func (x *CThostFtdcTradingCodeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingCodeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingCodeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{25}
}

func (x *CThostFtdcTradingCodeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcTradingCodeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingCodeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcTradingCodeField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcTradingCodeField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *CThostFtdcTradingCodeField) GetClientIDType() int32 {
	if x != nil {
		return x.ClientIDType
	}
	return 0
}

func (x *CThostFtdcTradingCodeField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcTradingCodeField) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *CThostFtdcTradingCodeField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcPartBrokerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ExchangeID    string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID string `protobuf:"bytes,3,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	IsActive      int32  `protobuf:"varint,4,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
}

func (x *CThostFtdcPartBrokerField) Reset() {
	*x = CThostFtdcPartBrokerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcPartBrokerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcPartBrokerField) ProtoMessage() {}

func (x *CThostFtdcPartBrokerField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcPartBrokerField.ProtoReflect.Descriptor instead.
func (*CThostFtdcPartBrokerField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{26}
}

func (x *CThostFtdcPartBrokerField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcPartBrokerField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcPartBrokerField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcPartBrokerField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

type CThostFtdcSuperUserField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID   string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserName []byte `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	IsActive int32  `protobuf:"varint,4,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
}

func (x *CThostFtdcSuperUserField) Reset() {
	*x = CThostFtdcSuperUserField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSuperUserField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSuperUserField) ProtoMessage() {}

func (x *CThostFtdcSuperUserField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSuperUserField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSuperUserField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{27}
}

func (x *CThostFtdcSuperUserField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcSuperUserField) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *CThostFtdcSuperUserField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcSuperUserField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

type CThostFtdcSuperUserFunctionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	FunctionCode int32  `protobuf:"varint,2,opt,name=FunctionCode,proto3" json:"FunctionCode,omitempty"`
}

func (x *CThostFtdcSuperUserFunctionField) Reset() {
	*x = CThostFtdcSuperUserFunctionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSuperUserFunctionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSuperUserFunctionField) ProtoMessage() {}

func (x *CThostFtdcSuperUserFunctionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSuperUserFunctionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSuperUserFunctionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{28}
}

func (x *CThostFtdcSuperUserFunctionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcSuperUserFunctionField) GetFunctionCode() int32 {
	if x != nil {
		return x.FunctionCode
	}
	return 0
}

type CThostFtdcInvestorGroupField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorGroupID   string `protobuf:"bytes,2,opt,name=InvestorGroupID,proto3" json:"InvestorGroupID,omitempty"`
	InvestorGroupName []byte `protobuf:"bytes,3,opt,name=InvestorGroupName,proto3" json:"InvestorGroupName,omitempty"`
}

func (x *CThostFtdcInvestorGroupField) Reset() {
	*x = CThostFtdcInvestorGroupField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorGroupField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorGroupField) ProtoMessage() {}

func (x *CThostFtdcInvestorGroupField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorGroupField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorGroupField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{29}
}

func (x *CThostFtdcInvestorGroupField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorGroupField) GetInvestorGroupID() string {
	if x != nil {
		return x.InvestorGroupID
	}
	return ""
}

func (x *CThostFtdcInvestorGroupField) GetInvestorGroupName() []byte {
	if x != nil {
		return x.InvestorGroupName
	}
	return nil
}

type CThostFtdcTradingAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                       string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID                      string  `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	PreMortgage                    float64 `protobuf:"fixed64,3,opt,name=PreMortgage,proto3" json:"PreMortgage,omitempty"`
	PreCredit                      float64 `protobuf:"fixed64,4,opt,name=PreCredit,proto3" json:"PreCredit,omitempty"`
	PreDeposit                     float64 `protobuf:"fixed64,5,opt,name=PreDeposit,proto3" json:"PreDeposit,omitempty"`
	PreBalance                     float64 `protobuf:"fixed64,6,opt,name=PreBalance,proto3" json:"PreBalance,omitempty"`
	PreMargin                      float64 `protobuf:"fixed64,7,opt,name=PreMargin,proto3" json:"PreMargin,omitempty"`
	InterestBase                   float64 `protobuf:"fixed64,8,opt,name=InterestBase,proto3" json:"InterestBase,omitempty"`
	Interest                       float64 `protobuf:"fixed64,9,opt,name=Interest,proto3" json:"Interest,omitempty"`
	Deposit                        float64 `protobuf:"fixed64,10,opt,name=Deposit,proto3" json:"Deposit,omitempty"`
	Withdraw                       float64 `protobuf:"fixed64,11,opt,name=Withdraw,proto3" json:"Withdraw,omitempty"`
	FrozenMargin                   float64 `protobuf:"fixed64,12,opt,name=FrozenMargin,proto3" json:"FrozenMargin,omitempty"`
	FrozenCash                     float64 `protobuf:"fixed64,13,opt,name=FrozenCash,proto3" json:"FrozenCash,omitempty"`
	FrozenCommission               float64 `protobuf:"fixed64,14,opt,name=FrozenCommission,proto3" json:"FrozenCommission,omitempty"`
	CurrMargin                     float64 `protobuf:"fixed64,15,opt,name=CurrMargin,proto3" json:"CurrMargin,omitempty"`
	CashIn                         float64 `protobuf:"fixed64,16,opt,name=CashIn,proto3" json:"CashIn,omitempty"`
	Commission                     float64 `protobuf:"fixed64,17,opt,name=Commission,proto3" json:"Commission,omitempty"`
	CloseProfit                    float64 `protobuf:"fixed64,18,opt,name=CloseProfit,proto3" json:"CloseProfit,omitempty"`
	PositionProfit                 float64 `protobuf:"fixed64,19,opt,name=PositionProfit,proto3" json:"PositionProfit,omitempty"`
	Balance                        float64 `protobuf:"fixed64,20,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Available                      float64 `protobuf:"fixed64,21,opt,name=Available,proto3" json:"Available,omitempty"`
	WithdrawQuota                  float64 `protobuf:"fixed64,22,opt,name=WithdrawQuota,proto3" json:"WithdrawQuota,omitempty"`
	Reserve                        float64 `protobuf:"fixed64,23,opt,name=Reserve,proto3" json:"Reserve,omitempty"`
	TradingDay                     string  `protobuf:"bytes,24,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID                   int32   `protobuf:"varint,25,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	Credit                         float64 `protobuf:"fixed64,26,opt,name=Credit,proto3" json:"Credit,omitempty"`
	Mortgage                       float64 `protobuf:"fixed64,27,opt,name=Mortgage,proto3" json:"Mortgage,omitempty"`
	ExchangeMargin                 float64 `protobuf:"fixed64,28,opt,name=ExchangeMargin,proto3" json:"ExchangeMargin,omitempty"`
	DeliveryMargin                 float64 `protobuf:"fixed64,29,opt,name=DeliveryMargin,proto3" json:"DeliveryMargin,omitempty"`
	ExchangeDeliveryMargin         float64 `protobuf:"fixed64,30,opt,name=ExchangeDeliveryMargin,proto3" json:"ExchangeDeliveryMargin,omitempty"`
	ReserveBalance                 float64 `protobuf:"fixed64,31,opt,name=ReserveBalance,proto3" json:"ReserveBalance,omitempty"`
	CurrencyID                     string  `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	PreFundMortgageIn              float64 `protobuf:"fixed64,33,opt,name=PreFundMortgageIn,proto3" json:"PreFundMortgageIn,omitempty"`
	PreFundMortgageOut             float64 `protobuf:"fixed64,34,opt,name=PreFundMortgageOut,proto3" json:"PreFundMortgageOut,omitempty"`
	FundMortgageIn                 float64 `protobuf:"fixed64,35,opt,name=FundMortgageIn,proto3" json:"FundMortgageIn,omitempty"`
	FundMortgageOut                float64 `protobuf:"fixed64,36,opt,name=FundMortgageOut,proto3" json:"FundMortgageOut,omitempty"`
	FundMortgageAvailable          float64 `protobuf:"fixed64,37,opt,name=FundMortgageAvailable,proto3" json:"FundMortgageAvailable,omitempty"`
	MortgageableFund               float64 `protobuf:"fixed64,38,opt,name=MortgageableFund,proto3" json:"MortgageableFund,omitempty"`
	SpecProductMargin              float64 `protobuf:"fixed64,39,opt,name=SpecProductMargin,proto3" json:"SpecProductMargin,omitempty"`
	SpecProductFrozenMargin        float64 `protobuf:"fixed64,40,opt,name=SpecProductFrozenMargin,proto3" json:"SpecProductFrozenMargin,omitempty"`
	SpecProductCommission          float64 `protobuf:"fixed64,41,opt,name=SpecProductCommission,proto3" json:"SpecProductCommission,omitempty"`
	SpecProductFrozenCommission    float64 `protobuf:"fixed64,42,opt,name=SpecProductFrozenCommission,proto3" json:"SpecProductFrozenCommission,omitempty"`
	SpecProductPositionProfit      float64 `protobuf:"fixed64,43,opt,name=SpecProductPositionProfit,proto3" json:"SpecProductPositionProfit,omitempty"`
	SpecProductCloseProfit         float64 `protobuf:"fixed64,44,opt,name=SpecProductCloseProfit,proto3" json:"SpecProductCloseProfit,omitempty"`
	SpecProductPositionProfitByAlg float64 `protobuf:"fixed64,45,opt,name=SpecProductPositionProfitByAlg,proto3" json:"SpecProductPositionProfitByAlg,omitempty"`
	SpecProductExchangeMargin      float64 `protobuf:"fixed64,46,opt,name=SpecProductExchangeMargin,proto3" json:"SpecProductExchangeMargin,omitempty"`
	BizType                        int32   `protobuf:"varint,47,opt,name=BizType,proto3" json:"BizType,omitempty"`
	FrozenSwap                     float64 `protobuf:"fixed64,48,opt,name=FrozenSwap,proto3" json:"FrozenSwap,omitempty"`
	RemainSwap                     float64 `protobuf:"fixed64,49,opt,name=RemainSwap,proto3" json:"RemainSwap,omitempty"`
}

func (x *CThostFtdcTradingAccountField) Reset() {
	*x = CThostFtdcTradingAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingAccountField) ProtoMessage() {}

func (x *CThostFtdcTradingAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{30}
}

func (x *CThostFtdcTradingAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcTradingAccountField) GetPreMortgage() float64 {
	if x != nil {
		return x.PreMortgage
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetPreCredit() float64 {
	if x != nil {
		return x.PreCredit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetPreDeposit() float64 {
	if x != nil {
		return x.PreDeposit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetInterestBase() float64 {
	if x != nil {
		return x.InterestBase
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetCurrMargin() float64 {
	if x != nil {
		return x.CurrMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetWithdrawQuota() float64 {
	if x != nil {
		return x.WithdrawQuota
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcTradingAccountField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetMortgage() float64 {
	if x != nil {
		return x.Mortgage
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetDeliveryMargin() float64 {
	if x != nil {
		return x.DeliveryMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetExchangeDeliveryMargin() float64 {
	if x != nil {
		return x.ExchangeDeliveryMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetReserveBalance() float64 {
	if x != nil {
		return x.ReserveBalance
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcTradingAccountField) GetPreFundMortgageIn() float64 {
	if x != nil {
		return x.PreFundMortgageIn
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetPreFundMortgageOut() float64 {
	if x != nil {
		return x.PreFundMortgageOut
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetFundMortgageIn() float64 {
	if x != nil {
		return x.FundMortgageIn
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetFundMortgageOut() float64 {
	if x != nil {
		return x.FundMortgageOut
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetFundMortgageAvailable() float64 {
	if x != nil {
		return x.FundMortgageAvailable
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetMortgageableFund() float64 {
	if x != nil {
		return x.MortgageableFund
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductMargin() float64 {
	if x != nil {
		return x.SpecProductMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductFrozenMargin() float64 {
	if x != nil {
		return x.SpecProductFrozenMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductCommission() float64 {
	if x != nil {
		return x.SpecProductCommission
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductFrozenCommission() float64 {
	if x != nil {
		return x.SpecProductFrozenCommission
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductPositionProfit() float64 {
	if x != nil {
		return x.SpecProductPositionProfit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductCloseProfit() float64 {
	if x != nil {
		return x.SpecProductCloseProfit
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductPositionProfitByAlg() float64 {
	if x != nil {
		return x.SpecProductPositionProfitByAlg
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetSpecProductExchangeMargin() float64 {
	if x != nil {
		return x.SpecProductExchangeMargin
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetFrozenSwap() float64 {
	if x != nil {
		return x.FrozenSwap
	}
	return 0
}

func (x *CThostFtdcTradingAccountField) GetRemainSwap() float64 {
	if x != nil {
		return x.RemainSwap
	}
	return 0
}

type CThostFtdcInvestorPositionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID       string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BrokerID           string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	PosiDirection      int32   `protobuf:"varint,4,opt,name=PosiDirection,proto3" json:"PosiDirection,omitempty"`
	HedgeFlag          int32   `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	PositionDate       int32   `protobuf:"varint,6,opt,name=PositionDate,proto3" json:"PositionDate,omitempty"`
	YdPosition         int32   `protobuf:"varint,7,opt,name=YdPosition,proto3" json:"YdPosition,omitempty"`
	Position           int32   `protobuf:"varint,8,opt,name=Position,proto3" json:"Position,omitempty"`
	LongFrozen         int32   `protobuf:"varint,9,opt,name=LongFrozen,proto3" json:"LongFrozen,omitempty"`
	ShortFrozen        int32   `protobuf:"varint,10,opt,name=ShortFrozen,proto3" json:"ShortFrozen,omitempty"`
	LongFrozenAmount   float64 `protobuf:"fixed64,11,opt,name=LongFrozenAmount,proto3" json:"LongFrozenAmount,omitempty"`
	ShortFrozenAmount  float64 `protobuf:"fixed64,12,opt,name=ShortFrozenAmount,proto3" json:"ShortFrozenAmount,omitempty"`
	OpenVolume         int32   `protobuf:"varint,13,opt,name=OpenVolume,proto3" json:"OpenVolume,omitempty"`
	CloseVolume        int32   `protobuf:"varint,14,opt,name=CloseVolume,proto3" json:"CloseVolume,omitempty"`
	OpenAmount         float64 `protobuf:"fixed64,15,opt,name=OpenAmount,proto3" json:"OpenAmount,omitempty"`
	CloseAmount        float64 `protobuf:"fixed64,16,opt,name=CloseAmount,proto3" json:"CloseAmount,omitempty"`
	PositionCost       float64 `protobuf:"fixed64,17,opt,name=PositionCost,proto3" json:"PositionCost,omitempty"`
	PreMargin          float64 `protobuf:"fixed64,18,opt,name=PreMargin,proto3" json:"PreMargin,omitempty"`
	UseMargin          float64 `protobuf:"fixed64,19,opt,name=UseMargin,proto3" json:"UseMargin,omitempty"`
	FrozenMargin       float64 `protobuf:"fixed64,20,opt,name=FrozenMargin,proto3" json:"FrozenMargin,omitempty"`
	FrozenCash         float64 `protobuf:"fixed64,21,opt,name=FrozenCash,proto3" json:"FrozenCash,omitempty"`
	FrozenCommission   float64 `protobuf:"fixed64,22,opt,name=FrozenCommission,proto3" json:"FrozenCommission,omitempty"`
	CashIn             float64 `protobuf:"fixed64,23,opt,name=CashIn,proto3" json:"CashIn,omitempty"`
	Commission         float64 `protobuf:"fixed64,24,opt,name=Commission,proto3" json:"Commission,omitempty"`
	CloseProfit        float64 `protobuf:"fixed64,25,opt,name=CloseProfit,proto3" json:"CloseProfit,omitempty"`
	PositionProfit     float64 `protobuf:"fixed64,26,opt,name=PositionProfit,proto3" json:"PositionProfit,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,27,opt,name=PreSettlementPrice,proto3" json:"PreSettlementPrice,omitempty"`
	SettlementPrice    float64 `protobuf:"fixed64,28,opt,name=SettlementPrice,proto3" json:"SettlementPrice,omitempty"`
	TradingDay         string  `protobuf:"bytes,29,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID       int32   `protobuf:"varint,30,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	OpenCost           float64 `protobuf:"fixed64,31,opt,name=OpenCost,proto3" json:"OpenCost,omitempty"`
	ExchangeMargin     float64 `protobuf:"fixed64,32,opt,name=ExchangeMargin,proto3" json:"ExchangeMargin,omitempty"`
	CombPosition       int32   `protobuf:"varint,33,opt,name=CombPosition,proto3" json:"CombPosition,omitempty"`
	CombLongFrozen     int32   `protobuf:"varint,34,opt,name=CombLongFrozen,proto3" json:"CombLongFrozen,omitempty"`
	CombShortFrozen    int32   `protobuf:"varint,35,opt,name=CombShortFrozen,proto3" json:"CombShortFrozen,omitempty"`
	CloseProfitByDate  float64 `protobuf:"fixed64,36,opt,name=CloseProfitByDate,proto3" json:"CloseProfitByDate,omitempty"`
	CloseProfitByTrade float64 `protobuf:"fixed64,37,opt,name=CloseProfitByTrade,proto3" json:"CloseProfitByTrade,omitempty"`
	TodayPosition      int32   `protobuf:"varint,38,opt,name=TodayPosition,proto3" json:"TodayPosition,omitempty"`
	MarginRateByMoney  float64 `protobuf:"fixed64,39,opt,name=MarginRateByMoney,proto3" json:"MarginRateByMoney,omitempty"`
	MarginRateByVolume float64 `protobuf:"fixed64,40,opt,name=MarginRateByVolume,proto3" json:"MarginRateByVolume,omitempty"`
	StrikeFrozen       int32   `protobuf:"varint,41,opt,name=StrikeFrozen,proto3" json:"StrikeFrozen,omitempty"`
	StrikeFrozenAmount float64 `protobuf:"fixed64,42,opt,name=StrikeFrozenAmount,proto3" json:"StrikeFrozenAmount,omitempty"`
	AbandonFrozen      int32   `protobuf:"varint,43,opt,name=AbandonFrozen,proto3" json:"AbandonFrozen,omitempty"`
	ExchangeID         string  `protobuf:"bytes,44,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	YdStrikeFrozen     int32   `protobuf:"varint,45,opt,name=YdStrikeFrozen,proto3" json:"YdStrikeFrozen,omitempty"`
	InvestUnitID       string  `protobuf:"bytes,46,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	PositionCostOffset float64 `protobuf:"fixed64,47,opt,name=PositionCostOffset,proto3" json:"PositionCostOffset,omitempty"`
}

func (x *CThostFtdcInvestorPositionField) Reset() {
	*x = CThostFtdcInvestorPositionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorPositionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorPositionField) ProtoMessage() {}

func (x *CThostFtdcInvestorPositionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorPositionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorPositionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{31}
}

func (x *CThostFtdcInvestorPositionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionField) GetPosiDirection() int32 {
	if x != nil {
		return x.PosiDirection
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetPositionDate() int32 {
	if x != nil {
		return x.PositionDate
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetYdPosition() int32 {
	if x != nil {
		return x.YdPosition
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetLongFrozen() int32 {
	if x != nil {
		return x.LongFrozen
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetShortFrozen() int32 {
	if x != nil {
		return x.ShortFrozen
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetLongFrozenAmount() float64 {
	if x != nil {
		return x.LongFrozenAmount
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetShortFrozenAmount() float64 {
	if x != nil {
		return x.ShortFrozenAmount
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetOpenVolume() int32 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCloseVolume() int32 {
	if x != nil {
		return x.CloseVolume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetOpenAmount() float64 {
	if x != nil {
		return x.OpenAmount
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCloseAmount() float64 {
	if x != nil {
		return x.CloseAmount
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetPositionCost() float64 {
	if x != nil {
		return x.PositionCost
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetUseMargin() float64 {
	if x != nil {
		return x.UseMargin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcInvestorPositionField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetOpenCost() float64 {
	if x != nil {
		return x.OpenCost
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCombPosition() int32 {
	if x != nil {
		return x.CombPosition
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCombLongFrozen() int32 {
	if x != nil {
		return x.CombLongFrozen
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCombShortFrozen() int32 {
	if x != nil {
		return x.CombShortFrozen
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCloseProfitByDate() float64 {
	if x != nil {
		return x.CloseProfitByDate
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetCloseProfitByTrade() float64 {
	if x != nil {
		return x.CloseProfitByTrade
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetTodayPosition() int32 {
	if x != nil {
		return x.TodayPosition
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetMarginRateByMoney() float64 {
	if x != nil {
		return x.MarginRateByMoney
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetMarginRateByVolume() float64 {
	if x != nil {
		return x.MarginRateByVolume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetStrikeFrozen() int32 {
	if x != nil {
		return x.StrikeFrozen
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetStrikeFrozenAmount() float64 {
	if x != nil {
		return x.StrikeFrozenAmount
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetAbandonFrozen() int32 {
	if x != nil {
		return x.AbandonFrozen
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionField) GetYdStrikeFrozen() int32 {
	if x != nil {
		return x.YdStrikeFrozen
	}
	return 0
}

func (x *CThostFtdcInvestorPositionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionField) GetPositionCostOffset() float64 {
	if x != nil {
		return x.PositionCostOffset
	}
	return 0
}

type CThostFtdcInstrumentMarginRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID             string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange            int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                 string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID               string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	HedgeFlag                int32   `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	LongMarginRatioByMoney   float64 `protobuf:"fixed64,6,opt,name=LongMarginRatioByMoney,proto3" json:"LongMarginRatioByMoney,omitempty"`
	LongMarginRatioByVolume  float64 `protobuf:"fixed64,7,opt,name=LongMarginRatioByVolume,proto3" json:"LongMarginRatioByVolume,omitempty"`
	ShortMarginRatioByMoney  float64 `protobuf:"fixed64,8,opt,name=ShortMarginRatioByMoney,proto3" json:"ShortMarginRatioByMoney,omitempty"`
	ShortMarginRatioByVolume float64 `protobuf:"fixed64,9,opt,name=ShortMarginRatioByVolume,proto3" json:"ShortMarginRatioByVolume,omitempty"`
	IsRelative               int32   `protobuf:"varint,10,opt,name=IsRelative,proto3" json:"IsRelative,omitempty"`
	ExchangeID               string  `protobuf:"bytes,11,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID             string  `protobuf:"bytes,12,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcInstrumentMarginRateField) Reset() {
	*x = CThostFtdcInstrumentMarginRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentMarginRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentMarginRateField) ProtoMessage() {}

func (x *CThostFtdcInstrumentMarginRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentMarginRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentMarginRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{32}
}

func (x *CThostFtdcInstrumentMarginRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateField) GetLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.LongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateField) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateField) GetShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateField) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateField) GetIsRelative() int32 {
	if x != nil {
		return x.IsRelative
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcInstrumentCommissionRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID            string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange           int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID              string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OpenRatioByMoney        float64 `protobuf:"fixed64,5,opt,name=OpenRatioByMoney,proto3" json:"OpenRatioByMoney,omitempty"`
	OpenRatioByVolume       float64 `protobuf:"fixed64,6,opt,name=OpenRatioByVolume,proto3" json:"OpenRatioByVolume,omitempty"`
	CloseRatioByMoney       float64 `protobuf:"fixed64,7,opt,name=CloseRatioByMoney,proto3" json:"CloseRatioByMoney,omitempty"`
	CloseRatioByVolume      float64 `protobuf:"fixed64,8,opt,name=CloseRatioByVolume,proto3" json:"CloseRatioByVolume,omitempty"`
	CloseTodayRatioByMoney  float64 `protobuf:"fixed64,9,opt,name=CloseTodayRatioByMoney,proto3" json:"CloseTodayRatioByMoney,omitempty"`
	CloseTodayRatioByVolume float64 `protobuf:"fixed64,10,opt,name=CloseTodayRatioByVolume,proto3" json:"CloseTodayRatioByVolume,omitempty"`
	ExchangeID              string  `protobuf:"bytes,11,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	BizType                 int32   `protobuf:"varint,12,opt,name=BizType,proto3" json:"BizType,omitempty"`
	InvestUnitID            string  `protobuf:"bytes,13,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcInstrumentCommissionRateField) Reset() {
	*x = CThostFtdcInstrumentCommissionRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentCommissionRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentCommissionRateField) ProtoMessage() {}

func (x *CThostFtdcInstrumentCommissionRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentCommissionRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentCommissionRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{33}
}

func (x *CThostFtdcInstrumentCommissionRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentCommissionRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInstrumentCommissionRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInstrumentCommissionRateField) GetOpenRatioByMoney() float64 {
	if x != nil {
		return x.OpenRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetOpenRatioByVolume() float64 {
	if x != nil {
		return x.OpenRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetCloseRatioByMoney() float64 {
	if x != nil {
		return x.CloseRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetCloseRatioByVolume() float64 {
	if x != nil {
		return x.CloseRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetCloseTodayRatioByMoney() float64 {
	if x != nil {
		return x.CloseTodayRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetCloseTodayRatioByVolume() float64 {
	if x != nil {
		return x.CloseTodayRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInstrumentCommissionRateField) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *CThostFtdcInstrumentCommissionRateField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcDepthMarketDataField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay         string  `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	InstrumentID       string  `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID         string  `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExchangeInstID     string  `protobuf:"bytes,4,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	LastPrice          float64 `protobuf:"fixed64,5,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,6,opt,name=PreSettlementPrice,proto3" json:"PreSettlementPrice,omitempty"`
	PreClosePrice      float64 `protobuf:"fixed64,7,opt,name=PreClosePrice,proto3" json:"PreClosePrice,omitempty"`
	PreOpenInterest    float64 `protobuf:"fixed64,8,opt,name=PreOpenInterest,proto3" json:"PreOpenInterest,omitempty"`
	OpenPrice          float64 `protobuf:"fixed64,9,opt,name=OpenPrice,proto3" json:"OpenPrice,omitempty"`
	HighestPrice       float64 `protobuf:"fixed64,10,opt,name=HighestPrice,proto3" json:"HighestPrice,omitempty"`
	LowestPrice        float64 `protobuf:"fixed64,11,opt,name=LowestPrice,proto3" json:"LowestPrice,omitempty"`
	Volume             int32   `protobuf:"varint,12,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Turnover           float64 `protobuf:"fixed64,13,opt,name=Turnover,proto3" json:"Turnover,omitempty"`
	OpenInterest       float64 `protobuf:"fixed64,14,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	ClosePrice         float64 `protobuf:"fixed64,15,opt,name=ClosePrice,proto3" json:"ClosePrice,omitempty"`
	SettlementPrice    float64 `protobuf:"fixed64,16,opt,name=SettlementPrice,proto3" json:"SettlementPrice,omitempty"`
	UpperLimitPrice    float64 `protobuf:"fixed64,17,opt,name=UpperLimitPrice,proto3" json:"UpperLimitPrice,omitempty"`
	LowerLimitPrice    float64 `protobuf:"fixed64,18,opt,name=LowerLimitPrice,proto3" json:"LowerLimitPrice,omitempty"`
	PreDelta           float64 `protobuf:"fixed64,19,opt,name=PreDelta,proto3" json:"PreDelta,omitempty"`
	CurrDelta          float64 `protobuf:"fixed64,20,opt,name=CurrDelta,proto3" json:"CurrDelta,omitempty"`
	UpdateTime         string  `protobuf:"bytes,21,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	UpdateMillisec     int32   `protobuf:"varint,22,opt,name=UpdateMillisec,proto3" json:"UpdateMillisec,omitempty"`
	BidPrice1          float64 `protobuf:"fixed64,23,opt,name=BidPrice1,proto3" json:"BidPrice1,omitempty"`
	BidVolume1         int32   `protobuf:"varint,24,opt,name=BidVolume1,proto3" json:"BidVolume1,omitempty"`
	AskPrice1          float64 `protobuf:"fixed64,25,opt,name=AskPrice1,proto3" json:"AskPrice1,omitempty"`
	AskVolume1         int32   `protobuf:"varint,26,opt,name=AskVolume1,proto3" json:"AskVolume1,omitempty"`
	BidPrice2          float64 `protobuf:"fixed64,27,opt,name=BidPrice2,proto3" json:"BidPrice2,omitempty"`
	BidVolume2         int32   `protobuf:"varint,28,opt,name=BidVolume2,proto3" json:"BidVolume2,omitempty"`
	AskPrice2          float64 `protobuf:"fixed64,29,opt,name=AskPrice2,proto3" json:"AskPrice2,omitempty"`
	AskVolume2         int32   `protobuf:"varint,30,opt,name=AskVolume2,proto3" json:"AskVolume2,omitempty"`
	BidPrice3          float64 `protobuf:"fixed64,31,opt,name=BidPrice3,proto3" json:"BidPrice3,omitempty"`
	BidVolume3         int32   `protobuf:"varint,32,opt,name=BidVolume3,proto3" json:"BidVolume3,omitempty"`
	AskPrice3          float64 `protobuf:"fixed64,33,opt,name=AskPrice3,proto3" json:"AskPrice3,omitempty"`
	AskVolume3         int32   `protobuf:"varint,34,opt,name=AskVolume3,proto3" json:"AskVolume3,omitempty"`
	BidPrice4          float64 `protobuf:"fixed64,35,opt,name=BidPrice4,proto3" json:"BidPrice4,omitempty"`
	BidVolume4         int32   `protobuf:"varint,36,opt,name=BidVolume4,proto3" json:"BidVolume4,omitempty"`
	AskPrice4          float64 `protobuf:"fixed64,37,opt,name=AskPrice4,proto3" json:"AskPrice4,omitempty"`
	AskVolume4         int32   `protobuf:"varint,38,opt,name=AskVolume4,proto3" json:"AskVolume4,omitempty"`
	BidPrice5          float64 `protobuf:"fixed64,39,opt,name=BidPrice5,proto3" json:"BidPrice5,omitempty"`
	BidVolume5         int32   `protobuf:"varint,40,opt,name=BidVolume5,proto3" json:"BidVolume5,omitempty"`
	AskPrice5          float64 `protobuf:"fixed64,41,opt,name=AskPrice5,proto3" json:"AskPrice5,omitempty"`
	AskVolume5         int32   `protobuf:"varint,42,opt,name=AskVolume5,proto3" json:"AskVolume5,omitempty"`
	AveragePrice       float64 `protobuf:"fixed64,43,opt,name=AveragePrice,proto3" json:"AveragePrice,omitempty"`
	ActionDay          string  `protobuf:"bytes,44,opt,name=ActionDay,proto3" json:"ActionDay,omitempty"`
}

func (x *CThostFtdcDepthMarketDataField) Reset() {
	*x = CThostFtdcDepthMarketDataField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcDepthMarketDataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcDepthMarketDataField) ProtoMessage() {}

func (x *CThostFtdcDepthMarketDataField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcDepthMarketDataField.ProtoReflect.Descriptor instead.
func (*CThostFtdcDepthMarketDataField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{34}
}

func (x *CThostFtdcDepthMarketDataField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcDepthMarketDataField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcDepthMarketDataField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcDepthMarketDataField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcDepthMarketDataField) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetPreOpenInterest() float64 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetHighestPrice() float64 {
	if x != nil {
		return x.HighestPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetLowestPrice() float64 {
	if x != nil {
		return x.LowestPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetOpenInterest() float64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetPreDelta() float64 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetCurrDelta() float64 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CThostFtdcDepthMarketDataField) GetUpdateMillisec() int32 {
	if x != nil {
		return x.UpdateMillisec
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidPrice1() float64 {
	if x != nil {
		return x.BidPrice1
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidVolume1() int32 {
	if x != nil {
		return x.BidVolume1
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskPrice1() float64 {
	if x != nil {
		return x.AskPrice1
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskVolume1() int32 {
	if x != nil {
		return x.AskVolume1
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidPrice2() float64 {
	if x != nil {
		return x.BidPrice2
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidVolume2() int32 {
	if x != nil {
		return x.BidVolume2
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskPrice2() float64 {
	if x != nil {
		return x.AskPrice2
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskVolume2() int32 {
	if x != nil {
		return x.AskVolume2
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidPrice3() float64 {
	if x != nil {
		return x.BidPrice3
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidVolume3() int32 {
	if x != nil {
		return x.BidVolume3
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskPrice3() float64 {
	if x != nil {
		return x.AskPrice3
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskVolume3() int32 {
	if x != nil {
		return x.AskVolume3
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidPrice4() float64 {
	if x != nil {
		return x.BidPrice4
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidVolume4() int32 {
	if x != nil {
		return x.BidVolume4
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskPrice4() float64 {
	if x != nil {
		return x.AskPrice4
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskVolume4() int32 {
	if x != nil {
		return x.AskVolume4
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidPrice5() float64 {
	if x != nil {
		return x.BidPrice5
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetBidVolume5() int32 {
	if x != nil {
		return x.BidVolume5
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskPrice5() float64 {
	if x != nil {
		return x.AskPrice5
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAskVolume5() int32 {
	if x != nil {
		return x.AskVolume5
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *CThostFtdcDepthMarketDataField) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

type CThostFtdcInstrumentTradingRightField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID  string `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange int32  `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID      string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	TradingRight  int32  `protobuf:"varint,5,opt,name=TradingRight,proto3" json:"TradingRight,omitempty"`
}

func (x *CThostFtdcInstrumentTradingRightField) Reset() {
	*x = CThostFtdcInstrumentTradingRightField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentTradingRightField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentTradingRightField) ProtoMessage() {}

func (x *CThostFtdcInstrumentTradingRightField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentTradingRightField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentTradingRightField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{35}
}

func (x *CThostFtdcInstrumentTradingRightField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentTradingRightField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcInstrumentTradingRightField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInstrumentTradingRightField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInstrumentTradingRightField) GetTradingRight() int32 {
	if x != nil {
		return x.TradingRight
	}
	return 0
}

type CThostFtdcBrokerUserField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID    string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserName    []byte `protobuf:"bytes,3,opt,name=UserName,proto3" json:"UserName,omitempty"`
	UserType    int32  `protobuf:"varint,4,opt,name=UserType,proto3" json:"UserType,omitempty"`
	IsActive    int32  `protobuf:"varint,5,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	IsUsingOTP  int32  `protobuf:"varint,6,opt,name=IsUsingOTP,proto3" json:"IsUsingOTP,omitempty"`
	IsAuthForce int32  `protobuf:"varint,7,opt,name=IsAuthForce,proto3" json:"IsAuthForce,omitempty"`
}

func (x *CThostFtdcBrokerUserField) Reset() {
	*x = CThostFtdcBrokerUserField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerUserField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerUserField) ProtoMessage() {}

func (x *CThostFtdcBrokerUserField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerUserField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerUserField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{36}
}

func (x *CThostFtdcBrokerUserField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerUserField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcBrokerUserField) GetUserName() []byte {
	if x != nil {
		return x.UserName
	}
	return nil
}

func (x *CThostFtdcBrokerUserField) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *CThostFtdcBrokerUserField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *CThostFtdcBrokerUserField) GetIsUsingOTP() int32 {
	if x != nil {
		return x.IsUsingOTP
	}
	return 0
}

func (x *CThostFtdcBrokerUserField) GetIsAuthForce() int32 {
	if x != nil {
		return x.IsAuthForce
	}
	return 0
}

type CThostFtdcBrokerUserPasswordField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID         string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Password       string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	LastUpdateTime string `protobuf:"bytes,4,opt,name=LastUpdateTime,proto3" json:"LastUpdateTime,omitempty"`
	LastLoginTime  string `protobuf:"bytes,5,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
	ExpireDate     string `protobuf:"bytes,6,opt,name=ExpireDate,proto3" json:"ExpireDate,omitempty"`
	WeakExpireDate string `protobuf:"bytes,7,opt,name=WeakExpireDate,proto3" json:"WeakExpireDate,omitempty"`
}

func (x *CThostFtdcBrokerUserPasswordField) Reset() {
	*x = CThostFtdcBrokerUserPasswordField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerUserPasswordField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerUserPasswordField) ProtoMessage() {}

func (x *CThostFtdcBrokerUserPasswordField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerUserPasswordField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerUserPasswordField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{37}
}

func (x *CThostFtdcBrokerUserPasswordField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerUserPasswordField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcBrokerUserPasswordField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcBrokerUserPasswordField) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

func (x *CThostFtdcBrokerUserPasswordField) GetLastLoginTime() string {
	if x != nil {
		return x.LastLoginTime
	}
	return ""
}

func (x *CThostFtdcBrokerUserPasswordField) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *CThostFtdcBrokerUserPasswordField) GetWeakExpireDate() string {
	if x != nil {
		return x.WeakExpireDate
	}
	return ""
}

type CThostFtdcBrokerUserFunctionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID           string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID             string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	BrokerFunctionCode int32  `protobuf:"varint,3,opt,name=BrokerFunctionCode,proto3" json:"BrokerFunctionCode,omitempty"`
}

func (x *CThostFtdcBrokerUserFunctionField) Reset() {
	*x = CThostFtdcBrokerUserFunctionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerUserFunctionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerUserFunctionField) ProtoMessage() {}

func (x *CThostFtdcBrokerUserFunctionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerUserFunctionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerUserFunctionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{38}
}

func (x *CThostFtdcBrokerUserFunctionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerUserFunctionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcBrokerUserFunctionField) GetBrokerFunctionCode() int32 {
	if x != nil {
		return x.BrokerFunctionCode
	}
	return 0
}

type CThostFtdcTraderOfferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID               string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID                 string `protobuf:"bytes,2,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	ParticipantID            string `protobuf:"bytes,3,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	Password                 string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID                int32  `protobuf:"varint,5,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderLocalID             string `protobuf:"bytes,6,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	TraderConnectStatus      int32  `protobuf:"varint,7,opt,name=TraderConnectStatus,proto3" json:"TraderConnectStatus,omitempty"`
	ConnectRequestDate       string `protobuf:"bytes,8,opt,name=ConnectRequestDate,proto3" json:"ConnectRequestDate,omitempty"`
	ConnectRequestTime       string `protobuf:"bytes,9,opt,name=ConnectRequestTime,proto3" json:"ConnectRequestTime,omitempty"`
	LastReportDate           string `protobuf:"bytes,10,opt,name=LastReportDate,proto3" json:"LastReportDate,omitempty"`
	LastReportTime           string `protobuf:"bytes,11,opt,name=LastReportTime,proto3" json:"LastReportTime,omitempty"`
	ConnectDate              string `protobuf:"bytes,12,opt,name=ConnectDate,proto3" json:"ConnectDate,omitempty"`
	ConnectTime              string `protobuf:"bytes,13,opt,name=ConnectTime,proto3" json:"ConnectTime,omitempty"`
	StartDate                string `protobuf:"bytes,14,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	StartTime                string `protobuf:"bytes,15,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	TradingDay               string `protobuf:"bytes,16,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID                 string `protobuf:"bytes,17,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	MaxTradeID               string `protobuf:"bytes,18,opt,name=MaxTradeID,proto3" json:"MaxTradeID,omitempty"`
	MaxOrderMessageReference string `protobuf:"bytes,19,opt,name=MaxOrderMessageReference,proto3" json:"MaxOrderMessageReference,omitempty"`
}

func (x *CThostFtdcTraderOfferField) Reset() {
	*x = CThostFtdcTraderOfferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTraderOfferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTraderOfferField) ProtoMessage() {}

func (x *CThostFtdcTraderOfferField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTraderOfferField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTraderOfferField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{39}
}

func (x *CThostFtdcTraderOfferField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcTraderOfferField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetTraderConnectStatus() int32 {
	if x != nil {
		return x.TraderConnectStatus
	}
	return 0
}

func (x *CThostFtdcTraderOfferField) GetConnectRequestDate() string {
	if x != nil {
		return x.ConnectRequestDate
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetConnectRequestTime() string {
	if x != nil {
		return x.ConnectRequestTime
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetLastReportDate() string {
	if x != nil {
		return x.LastReportDate
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetLastReportTime() string {
	if x != nil {
		return x.LastReportTime
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetConnectDate() string {
	if x != nil {
		return x.ConnectDate
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetConnectTime() string {
	if x != nil {
		return x.ConnectTime
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetMaxTradeID() string {
	if x != nil {
		return x.MaxTradeID
	}
	return ""
}

func (x *CThostFtdcTraderOfferField) GetMaxOrderMessageReference() string {
	if x != nil {
		return x.MaxOrderMessageReference
	}
	return ""
}

type CThostFtdcSettlementInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay   string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID int32  `protobuf:"varint,2,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	BrokerID     string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	SequenceNo   int32  `protobuf:"varint,5,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	Content      string `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	AccountID    string `protobuf:"bytes,7,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID   string `protobuf:"bytes,8,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcSettlementInfoField) Reset() {
	*x = CThostFtdcSettlementInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSettlementInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSettlementInfoField) ProtoMessage() {}

func (x *CThostFtdcSettlementInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSettlementInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSettlementInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{40}
}

func (x *CThostFtdcSettlementInfoField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcSettlementInfoField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcSettlementInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSettlementInfoField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSettlementInfoField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcSettlementInfoField) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CThostFtdcSettlementInfoField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcSettlementInfoField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcInstrumentMarginRateAdjustField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID             string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange            int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                 string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID               string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	HedgeFlag                int32   `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	LongMarginRatioByMoney   float64 `protobuf:"fixed64,6,opt,name=LongMarginRatioByMoney,proto3" json:"LongMarginRatioByMoney,omitempty"`
	LongMarginRatioByVolume  float64 `protobuf:"fixed64,7,opt,name=LongMarginRatioByVolume,proto3" json:"LongMarginRatioByVolume,omitempty"`
	ShortMarginRatioByMoney  float64 `protobuf:"fixed64,8,opt,name=ShortMarginRatioByMoney,proto3" json:"ShortMarginRatioByMoney,omitempty"`
	ShortMarginRatioByVolume float64 `protobuf:"fixed64,9,opt,name=ShortMarginRatioByVolume,proto3" json:"ShortMarginRatioByVolume,omitempty"`
	IsRelative               int32   `protobuf:"varint,10,opt,name=IsRelative,proto3" json:"IsRelative,omitempty"`
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) Reset() {
	*x = CThostFtdcInstrumentMarginRateAdjustField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentMarginRateAdjustField) ProtoMessage() {}

func (x *CThostFtdcInstrumentMarginRateAdjustField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentMarginRateAdjustField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentMarginRateAdjustField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{41}
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.LongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateAdjustField) GetIsRelative() int32 {
	if x != nil {
		return x.IsRelative
	}
	return 0
}

type CThostFtdcExchangeMarginRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                 string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID             string  `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag                int32   `protobuf:"varint,3,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	LongMarginRatioByMoney   float64 `protobuf:"fixed64,4,opt,name=LongMarginRatioByMoney,proto3" json:"LongMarginRatioByMoney,omitempty"`
	LongMarginRatioByVolume  float64 `protobuf:"fixed64,5,opt,name=LongMarginRatioByVolume,proto3" json:"LongMarginRatioByVolume,omitempty"`
	ShortMarginRatioByMoney  float64 `protobuf:"fixed64,6,opt,name=ShortMarginRatioByMoney,proto3" json:"ShortMarginRatioByMoney,omitempty"`
	ShortMarginRatioByVolume float64 `protobuf:"fixed64,7,opt,name=ShortMarginRatioByVolume,proto3" json:"ShortMarginRatioByVolume,omitempty"`
	ExchangeID               string  `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcExchangeMarginRateField) Reset() {
	*x = CThostFtdcExchangeMarginRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeMarginRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeMarginRateField) ProtoMessage() {}

func (x *CThostFtdcExchangeMarginRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeMarginRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeMarginRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{42}
}

func (x *CThostFtdcExchangeMarginRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcExchangeMarginRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcExchangeMarginRateField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateField) GetLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.LongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateField) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateField) GetShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateField) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcExchangeMarginRateAdjustField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                     string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID                 string  `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag                    int32   `protobuf:"varint,3,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	LongMarginRatioByMoney       float64 `protobuf:"fixed64,4,opt,name=LongMarginRatioByMoney,proto3" json:"LongMarginRatioByMoney,omitempty"`
	LongMarginRatioByVolume      float64 `protobuf:"fixed64,5,opt,name=LongMarginRatioByVolume,proto3" json:"LongMarginRatioByVolume,omitempty"`
	ShortMarginRatioByMoney      float64 `protobuf:"fixed64,6,opt,name=ShortMarginRatioByMoney,proto3" json:"ShortMarginRatioByMoney,omitempty"`
	ShortMarginRatioByVolume     float64 `protobuf:"fixed64,7,opt,name=ShortMarginRatioByVolume,proto3" json:"ShortMarginRatioByVolume,omitempty"`
	ExchLongMarginRatioByMoney   float64 `protobuf:"fixed64,8,opt,name=ExchLongMarginRatioByMoney,proto3" json:"ExchLongMarginRatioByMoney,omitempty"`
	ExchLongMarginRatioByVolume  float64 `protobuf:"fixed64,9,opt,name=ExchLongMarginRatioByVolume,proto3" json:"ExchLongMarginRatioByVolume,omitempty"`
	ExchShortMarginRatioByMoney  float64 `protobuf:"fixed64,10,opt,name=ExchShortMarginRatioByMoney,proto3" json:"ExchShortMarginRatioByMoney,omitempty"`
	ExchShortMarginRatioByVolume float64 `protobuf:"fixed64,11,opt,name=ExchShortMarginRatioByVolume,proto3" json:"ExchShortMarginRatioByVolume,omitempty"`
	NoLongMarginRatioByMoney     float64 `protobuf:"fixed64,12,opt,name=NoLongMarginRatioByMoney,proto3" json:"NoLongMarginRatioByMoney,omitempty"`
	NoLongMarginRatioByVolume    float64 `protobuf:"fixed64,13,opt,name=NoLongMarginRatioByVolume,proto3" json:"NoLongMarginRatioByVolume,omitempty"`
	NoShortMarginRatioByMoney    float64 `protobuf:"fixed64,14,opt,name=NoShortMarginRatioByMoney,proto3" json:"NoShortMarginRatioByMoney,omitempty"`
	NoShortMarginRatioByVolume   float64 `protobuf:"fixed64,15,opt,name=NoShortMarginRatioByVolume,proto3" json:"NoShortMarginRatioByVolume,omitempty"`
}

func (x *CThostFtdcExchangeMarginRateAdjustField) Reset() {
	*x = CThostFtdcExchangeMarginRateAdjustField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeMarginRateAdjustField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeMarginRateAdjustField) ProtoMessage() {}

func (x *CThostFtdcExchangeMarginRateAdjustField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeMarginRateAdjustField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeMarginRateAdjustField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{43}
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.LongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetExchLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.ExchLongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetExchLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.ExchLongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetExchShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ExchShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetExchShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ExchShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetNoLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.NoLongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetNoLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.NoLongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetNoShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.NoShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcExchangeMarginRateAdjustField) GetNoShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.NoShortMarginRatioByVolume
	}
	return 0
}

type CThostFtdcExchangeRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID         string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	FromCurrencyID   string  `protobuf:"bytes,2,opt,name=FromCurrencyID,proto3" json:"FromCurrencyID,omitempty"`
	FromCurrencyUnit float64 `protobuf:"fixed64,3,opt,name=FromCurrencyUnit,proto3" json:"FromCurrencyUnit,omitempty"`
	ToCurrencyID     string  `protobuf:"bytes,4,opt,name=ToCurrencyID,proto3" json:"ToCurrencyID,omitempty"`
	ExchangeRate     float64 `protobuf:"fixed64,5,opt,name=ExchangeRate,proto3" json:"ExchangeRate,omitempty"`
}

func (x *CThostFtdcExchangeRateField) Reset() {
	*x = CThostFtdcExchangeRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeRateField) ProtoMessage() {}

func (x *CThostFtdcExchangeRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{44}
}

func (x *CThostFtdcExchangeRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcExchangeRateField) GetFromCurrencyID() string {
	if x != nil {
		return x.FromCurrencyID
	}
	return ""
}

func (x *CThostFtdcExchangeRateField) GetFromCurrencyUnit() float64 {
	if x != nil {
		return x.FromCurrencyUnit
	}
	return 0
}

func (x *CThostFtdcExchangeRateField) GetToCurrencyID() string {
	if x != nil {
		return x.ToCurrencyID
	}
	return ""
}

func (x *CThostFtdcExchangeRateField) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

type CThostFtdcSettlementRefField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay   string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID int32  `protobuf:"varint,2,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
}

func (x *CThostFtdcSettlementRefField) Reset() {
	*x = CThostFtdcSettlementRefField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSettlementRefField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSettlementRefField) ProtoMessage() {}

func (x *CThostFtdcSettlementRefField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSettlementRefField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSettlementRefField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{45}
}

func (x *CThostFtdcSettlementRefField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcSettlementRefField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

type CThostFtdcCurrentTimeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrDate     string `protobuf:"bytes,1,opt,name=CurrDate,proto3" json:"CurrDate,omitempty"`
	CurrTime     string `protobuf:"bytes,2,opt,name=CurrTime,proto3" json:"CurrTime,omitempty"`
	CurrMillisec int32  `protobuf:"varint,3,opt,name=CurrMillisec,proto3" json:"CurrMillisec,omitempty"`
	ActionDay    string `protobuf:"bytes,4,opt,name=ActionDay,proto3" json:"ActionDay,omitempty"`
}

func (x *CThostFtdcCurrentTimeField) Reset() {
	*x = CThostFtdcCurrentTimeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCurrentTimeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCurrentTimeField) ProtoMessage() {}

func (x *CThostFtdcCurrentTimeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCurrentTimeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCurrentTimeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{46}
}

func (x *CThostFtdcCurrentTimeField) GetCurrDate() string {
	if x != nil {
		return x.CurrDate
	}
	return ""
}

func (x *CThostFtdcCurrentTimeField) GetCurrTime() string {
	if x != nil {
		return x.CurrTime
	}
	return ""
}

func (x *CThostFtdcCurrentTimeField) GetCurrMillisec() int32 {
	if x != nil {
		return x.CurrMillisec
	}
	return 0
}

func (x *CThostFtdcCurrentTimeField) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

type CThostFtdcCommPhaseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay  string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	CommPhaseNo int32  `protobuf:"varint,2,opt,name=CommPhaseNo,proto3" json:"CommPhaseNo,omitempty"`
	SystemID    string `protobuf:"bytes,3,opt,name=SystemID,proto3" json:"SystemID,omitempty"`
}

func (x *CThostFtdcCommPhaseField) Reset() {
	*x = CThostFtdcCommPhaseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCommPhaseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCommPhaseField) ProtoMessage() {}

func (x *CThostFtdcCommPhaseField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCommPhaseField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCommPhaseField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{47}
}

func (x *CThostFtdcCommPhaseField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcCommPhaseField) GetCommPhaseNo() int32 {
	if x != nil {
		return x.CommPhaseNo
	}
	return 0
}

func (x *CThostFtdcCommPhaseField) GetSystemID() string {
	if x != nil {
		return x.SystemID
	}
	return ""
}

type CThostFtdcLoginInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontID              int32  `protobuf:"varint,1,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID            int32  `protobuf:"varint,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	BrokerID             string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID               string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LoginDate            string `protobuf:"bytes,5,opt,name=LoginDate,proto3" json:"LoginDate,omitempty"`
	LoginTime            string `protobuf:"bytes,6,opt,name=LoginTime,proto3" json:"LoginTime,omitempty"`
	IPAddress            string `protobuf:"bytes,7,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	UserProductInfo      string `protobuf:"bytes,8,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	InterfaceProductInfo string `protobuf:"bytes,9,opt,name=InterfaceProductInfo,proto3" json:"InterfaceProductInfo,omitempty"`
	ProtocolInfo         string `protobuf:"bytes,10,opt,name=ProtocolInfo,proto3" json:"ProtocolInfo,omitempty"`
	SystemName           []byte `protobuf:"bytes,11,opt,name=SystemName,proto3" json:"SystemName,omitempty"`
	PasswordDeprecated   string `protobuf:"bytes,12,opt,name=PasswordDeprecated,proto3" json:"PasswordDeprecated,omitempty"`
	MaxOrderRef          string `protobuf:"bytes,13,opt,name=MaxOrderRef,proto3" json:"MaxOrderRef,omitempty"`
	SHFETime             string `protobuf:"bytes,14,opt,name=SHFETime,proto3" json:"SHFETime,omitempty"`
	DCETime              string `protobuf:"bytes,15,opt,name=DCETime,proto3" json:"DCETime,omitempty"`
	CZCETime             string `protobuf:"bytes,16,opt,name=CZCETime,proto3" json:"CZCETime,omitempty"`
	FFEXTime             string `protobuf:"bytes,17,opt,name=FFEXTime,proto3" json:"FFEXTime,omitempty"`
	MacAddress           string `protobuf:"bytes,18,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	OneTimePassword      string `protobuf:"bytes,19,opt,name=OneTimePassword,proto3" json:"OneTimePassword,omitempty"`
	INETime              string `protobuf:"bytes,20,opt,name=INETime,proto3" json:"INETime,omitempty"`
	IsQryControl         int32  `protobuf:"varint,21,opt,name=IsQryControl,proto3" json:"IsQryControl,omitempty"`
	LoginRemark          string `protobuf:"bytes,22,opt,name=LoginRemark,proto3" json:"LoginRemark,omitempty"`
	Password             string `protobuf:"bytes,23,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *CThostFtdcLoginInfoField) Reset() {
	*x = CThostFtdcLoginInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcLoginInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcLoginInfoField) ProtoMessage() {}

func (x *CThostFtdcLoginInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcLoginInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcLoginInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{48}
}

func (x *CThostFtdcLoginInfoField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcLoginInfoField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcLoginInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetLoginDate() string {
	if x != nil {
		return x.LoginDate
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetInterfaceProductInfo() string {
	if x != nil {
		return x.InterfaceProductInfo
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetProtocolInfo() string {
	if x != nil {
		return x.ProtocolInfo
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetSystemName() []byte {
	if x != nil {
		return x.SystemName
	}
	return nil
}

func (x *CThostFtdcLoginInfoField) GetPasswordDeprecated() string {
	if x != nil {
		return x.PasswordDeprecated
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetMaxOrderRef() string {
	if x != nil {
		return x.MaxOrderRef
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetSHFETime() string {
	if x != nil {
		return x.SHFETime
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetDCETime() string {
	if x != nil {
		return x.DCETime
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetCZCETime() string {
	if x != nil {
		return x.CZCETime
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetFFEXTime() string {
	if x != nil {
		return x.FFEXTime
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetOneTimePassword() string {
	if x != nil {
		return x.OneTimePassword
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetINETime() string {
	if x != nil {
		return x.INETime
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetIsQryControl() int32 {
	if x != nil {
		return x.IsQryControl
	}
	return 0
}

func (x *CThostFtdcLoginInfoField) GetLoginRemark() string {
	if x != nil {
		return x.LoginRemark
	}
	return ""
}

func (x *CThostFtdcLoginInfoField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CThostFtdcLogoutAllField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontID    int32  `protobuf:"varint,1,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID  int32  `protobuf:"varint,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	SystemName []byte `protobuf:"bytes,3,opt,name=SystemName,proto3" json:"SystemName,omitempty"`
}

func (x *CThostFtdcLogoutAllField) Reset() {
	*x = CThostFtdcLogoutAllField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcLogoutAllField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcLogoutAllField) ProtoMessage() {}

func (x *CThostFtdcLogoutAllField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcLogoutAllField.ProtoReflect.Descriptor instead.
func (*CThostFtdcLogoutAllField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{49}
}

func (x *CThostFtdcLogoutAllField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcLogoutAllField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcLogoutAllField) GetSystemName() []byte {
	if x != nil {
		return x.SystemName
	}
	return nil
}

type CThostFtdcFrontStatusField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontID        int32  `protobuf:"varint,1,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	LastReportDate string `protobuf:"bytes,2,opt,name=LastReportDate,proto3" json:"LastReportDate,omitempty"`
	LastReportTime string `protobuf:"bytes,3,opt,name=LastReportTime,proto3" json:"LastReportTime,omitempty"`
	IsActive       int32  `protobuf:"varint,4,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
}

func (x *CThostFtdcFrontStatusField) Reset() {
	*x = CThostFtdcFrontStatusField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcFrontStatusField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcFrontStatusField) ProtoMessage() {}

func (x *CThostFtdcFrontStatusField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcFrontStatusField.ProtoReflect.Descriptor instead.
func (*CThostFtdcFrontStatusField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{50}
}

func (x *CThostFtdcFrontStatusField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcFrontStatusField) GetLastReportDate() string {
	if x != nil {
		return x.LastReportDate
	}
	return ""
}

func (x *CThostFtdcFrontStatusField) GetLastReportTime() string {
	if x != nil {
		return x.LastReportTime
	}
	return ""
}

func (x *CThostFtdcFrontStatusField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

type CThostFtdcUserPasswordUpdateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID    string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID      string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OldPassword string `protobuf:"bytes,3,opt,name=OldPassword,proto3" json:"OldPassword,omitempty"`
	NewPassword string `protobuf:"bytes,4,opt,name=NewPassword,proto3" json:"NewPassword,omitempty"`
}

func (x *CThostFtdcUserPasswordUpdateField) Reset() {
	*x = CThostFtdcUserPasswordUpdateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcUserPasswordUpdateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcUserPasswordUpdateField) ProtoMessage() {}

func (x *CThostFtdcUserPasswordUpdateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcUserPasswordUpdateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcUserPasswordUpdateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{51}
}

func (x *CThostFtdcUserPasswordUpdateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcUserPasswordUpdateField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcUserPasswordUpdateField) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *CThostFtdcUserPasswordUpdateField) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type CThostFtdcInputOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID        string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OrderRef            string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	UserID              string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrderPriceType      int32   `protobuf:"varint,6,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"`
	Direction           int32   `protobuf:"varint,7,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CombOffsetFlag      string  `protobuf:"bytes,8,opt,name=CombOffsetFlag,proto3" json:"CombOffsetFlag,omitempty"`
	CombHedgeFlag       string  `protobuf:"bytes,9,opt,name=CombHedgeFlag,proto3" json:"CombHedgeFlag,omitempty"`
	LimitPrice          float64 `protobuf:"fixed64,10,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeTotalOriginal int32   `protobuf:"varint,11,opt,name=VolumeTotalOriginal,proto3" json:"VolumeTotalOriginal,omitempty"`
	TimeCondition       int32   `protobuf:"varint,12,opt,name=TimeCondition,proto3" json:"TimeCondition,omitempty"`
	GTDDate             string  `protobuf:"bytes,13,opt,name=GTDDate,proto3" json:"GTDDate,omitempty"`
	VolumeCondition     int32   `protobuf:"varint,14,opt,name=VolumeCondition,proto3" json:"VolumeCondition,omitempty"`
	MinVolume           int32   `protobuf:"varint,15,opt,name=MinVolume,proto3" json:"MinVolume,omitempty"`
	ContingentCondition int32   `protobuf:"varint,16,opt,name=ContingentCondition,proto3" json:"ContingentCondition,omitempty"`
	StopPrice           float64 `protobuf:"fixed64,17,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	ForceCloseReason    int32   `protobuf:"varint,18,opt,name=ForceCloseReason,proto3" json:"ForceCloseReason,omitempty"`
	IsAutoSuspend       int32   `protobuf:"varint,19,opt,name=IsAutoSuspend,proto3" json:"IsAutoSuspend,omitempty"`
	BusinessUnit        string  `protobuf:"bytes,20,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	RequestID           int32   `protobuf:"varint,21,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	UserForceClose      int32   `protobuf:"varint,22,opt,name=UserForceClose,proto3" json:"UserForceClose,omitempty"`
	IsSwapOrder         int32   `protobuf:"varint,23,opt,name=IsSwapOrder,proto3" json:"IsSwapOrder,omitempty"`
	ExchangeID          string  `protobuf:"bytes,24,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID        string  `protobuf:"bytes,25,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID           string  `protobuf:"bytes,26,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID          string  `protobuf:"bytes,27,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	ClientID            string  `protobuf:"bytes,28,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IPAddress           string  `protobuf:"bytes,29,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string  `protobuf:"bytes,30,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputOrderField) Reset() {
	*x = CThostFtdcInputOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputOrderField) ProtoMessage() {}

func (x *CThostFtdcInputOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{52}
}

func (x *CThostFtdcInputOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetTimeCondition() int32 {
	if x != nil {
		return x.TimeCondition
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetGTDDate() string {
	if x != nil {
		return x.GTDDate
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetVolumeCondition() int32 {
	if x != nil {
		return x.VolumeCondition
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetContingentCondition() int32 {
	if x != nil {
		return x.ContingentCondition
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetForceCloseReason() int32 {
	if x != nil {
		return x.ForceCloseReason
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetUserForceClose() int32 {
	if x != nil {
		return x.UserForceClose
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetIsSwapOrder() int32 {
	if x != nil {
		return x.IsSwapOrder
	}
	return 0
}

func (x *CThostFtdcInputOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID             string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID           string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID         string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OrderRef             string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	UserID               string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrderPriceType       int32   `protobuf:"varint,6,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"`
	Direction            int32   `protobuf:"varint,7,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CombOffsetFlag       string  `protobuf:"bytes,8,opt,name=CombOffsetFlag,proto3" json:"CombOffsetFlag,omitempty"`
	CombHedgeFlag        string  `protobuf:"bytes,9,opt,name=CombHedgeFlag,proto3" json:"CombHedgeFlag,omitempty"`
	LimitPrice           float64 `protobuf:"fixed64,10,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeTotalOriginal  int32   `protobuf:"varint,11,opt,name=VolumeTotalOriginal,proto3" json:"VolumeTotalOriginal,omitempty"`
	TimeCondition        int32   `protobuf:"varint,12,opt,name=TimeCondition,proto3" json:"TimeCondition,omitempty"`
	GTDDate              string  `protobuf:"bytes,13,opt,name=GTDDate,proto3" json:"GTDDate,omitempty"`
	VolumeCondition      int32   `protobuf:"varint,14,opt,name=VolumeCondition,proto3" json:"VolumeCondition,omitempty"`
	MinVolume            int32   `protobuf:"varint,15,opt,name=MinVolume,proto3" json:"MinVolume,omitempty"`
	ContingentCondition  int32   `protobuf:"varint,16,opt,name=ContingentCondition,proto3" json:"ContingentCondition,omitempty"`
	StopPrice            float64 `protobuf:"fixed64,17,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	ForceCloseReason     int32   `protobuf:"varint,18,opt,name=ForceCloseReason,proto3" json:"ForceCloseReason,omitempty"`
	IsAutoSuspend        int32   `protobuf:"varint,19,opt,name=IsAutoSuspend,proto3" json:"IsAutoSuspend,omitempty"`
	BusinessUnit         string  `protobuf:"bytes,20,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	RequestID            int32   `protobuf:"varint,21,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	OrderLocalID         string  `protobuf:"bytes,22,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ExchangeID           string  `protobuf:"bytes,23,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID        string  `protobuf:"bytes,24,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID             string  `protobuf:"bytes,25,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID       string  `protobuf:"bytes,26,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID             string  `protobuf:"bytes,27,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID            int32   `protobuf:"varint,28,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderSubmitStatus    int32   `protobuf:"varint,29,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	NotifySequence       int32   `protobuf:"varint,30,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay           string  `protobuf:"bytes,31,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID         int32   `protobuf:"varint,32,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	OrderSysID           string  `protobuf:"bytes,33,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	OrderSource          int32   `protobuf:"varint,34,opt,name=OrderSource,proto3" json:"OrderSource,omitempty"`
	OrderStatus          int32   `protobuf:"varint,35,opt,name=OrderStatus,proto3" json:"OrderStatus,omitempty"`
	OrderType            int32   `protobuf:"varint,36,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	VolumeTraded         int32   `protobuf:"varint,37,opt,name=VolumeTraded,proto3" json:"VolumeTraded,omitempty"`
	VolumeTotal          int32   `protobuf:"varint,38,opt,name=VolumeTotal,proto3" json:"VolumeTotal,omitempty"`
	InsertDate           string  `protobuf:"bytes,39,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime           string  `protobuf:"bytes,40,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	ActiveTime           string  `protobuf:"bytes,41,opt,name=ActiveTime,proto3" json:"ActiveTime,omitempty"`
	SuspendTime          string  `protobuf:"bytes,42,opt,name=SuspendTime,proto3" json:"SuspendTime,omitempty"`
	UpdateTime           string  `protobuf:"bytes,43,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	CancelTime           string  `protobuf:"bytes,44,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	ActiveTraderID       string  `protobuf:"bytes,45,opt,name=ActiveTraderID,proto3" json:"ActiveTraderID,omitempty"`
	ClearingPartID       string  `protobuf:"bytes,46,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo           int32   `protobuf:"varint,47,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	FrontID              int32   `protobuf:"varint,48,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID            int32   `protobuf:"varint,49,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	UserProductInfo      string  `protobuf:"bytes,50,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	StatusMsg            []byte  `protobuf:"bytes,51,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	UserForceClose       int32   `protobuf:"varint,52,opt,name=UserForceClose,proto3" json:"UserForceClose,omitempty"`
	ActiveUserID         string  `protobuf:"bytes,53,opt,name=ActiveUserID,proto3" json:"ActiveUserID,omitempty"`
	BrokerOrderSeq       int32   `protobuf:"varint,54,opt,name=BrokerOrderSeq,proto3" json:"BrokerOrderSeq,omitempty"`
	RelativeOrderSysID   string  `protobuf:"bytes,55,opt,name=RelativeOrderSysID,proto3" json:"RelativeOrderSysID,omitempty"`
	ZCETotalTradedVolume int32   `protobuf:"varint,56,opt,name=ZCETotalTradedVolume,proto3" json:"ZCETotalTradedVolume,omitempty"`
	IsSwapOrder          int32   `protobuf:"varint,57,opt,name=IsSwapOrder,proto3" json:"IsSwapOrder,omitempty"`
	BranchID             string  `protobuf:"bytes,58,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID         string  `protobuf:"bytes,59,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID            string  `protobuf:"bytes,60,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID           string  `protobuf:"bytes,61,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	IPAddress            string  `protobuf:"bytes,62,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress           string  `protobuf:"bytes,63,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcOrderField) Reset() {
	*x = CThostFtdcOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOrderField) ProtoMessage() {}

func (x *CThostFtdcOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{53}
}

func (x *CThostFtdcOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CThostFtdcOrderField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcOrderField) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *CThostFtdcOrderField) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *CThostFtdcOrderField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcOrderField) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *CThostFtdcOrderField) GetTimeCondition() int32 {
	if x != nil {
		return x.TimeCondition
	}
	return 0
}

func (x *CThostFtdcOrderField) GetGTDDate() string {
	if x != nil {
		return x.GTDDate
	}
	return ""
}

func (x *CThostFtdcOrderField) GetVolumeCondition() int32 {
	if x != nil {
		return x.VolumeCondition
	}
	return 0
}

func (x *CThostFtdcOrderField) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *CThostFtdcOrderField) GetContingentCondition() int32 {
	if x != nil {
		return x.ContingentCondition
	}
	return 0
}

func (x *CThostFtdcOrderField) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CThostFtdcOrderField) GetForceCloseReason() int32 {
	if x != nil {
		return x.ForceCloseReason
	}
	return 0
}

func (x *CThostFtdcOrderField) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *CThostFtdcOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcOrderField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcOrderField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcOrderField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcOrderField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcOrderField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcOrderField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetOrderSource() int32 {
	if x != nil {
		return x.OrderSource
	}
	return 0
}

func (x *CThostFtdcOrderField) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *CThostFtdcOrderField) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *CThostFtdcOrderField) GetVolumeTraded() int32 {
	if x != nil {
		return x.VolumeTraded
	}
	return 0
}

func (x *CThostFtdcOrderField) GetVolumeTotal() int32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *CThostFtdcOrderField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcOrderField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcOrderField) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *CThostFtdcOrderField) GetSuspendTime() string {
	if x != nil {
		return x.SuspendTime
	}
	return ""
}

func (x *CThostFtdcOrderField) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CThostFtdcOrderField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcOrderField) GetActiveTraderID() string {
	if x != nil {
		return x.ActiveTraderID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcOrderField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcOrderField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcOrderField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcOrderField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcOrderField) GetUserForceClose() int32 {
	if x != nil {
		return x.UserForceClose
	}
	return 0
}

func (x *CThostFtdcOrderField) GetActiveUserID() string {
	if x != nil {
		return x.ActiveUserID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetBrokerOrderSeq() int32 {
	if x != nil {
		return x.BrokerOrderSeq
	}
	return 0
}

func (x *CThostFtdcOrderField) GetRelativeOrderSysID() string {
	if x != nil {
		return x.RelativeOrderSysID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetZCETotalTradedVolume() int32 {
	if x != nil {
		return x.ZCETotalTradedVolume
	}
	return 0
}

func (x *CThostFtdcOrderField) GetIsSwapOrder() int32 {
	if x != nil {
		return x.IsSwapOrder
	}
	return 0
}

func (x *CThostFtdcOrderField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcExchangeOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderPriceType      int32   `protobuf:"varint,1,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"`
	Direction           int32   `protobuf:"varint,2,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CombOffsetFlag      string  `protobuf:"bytes,3,opt,name=CombOffsetFlag,proto3" json:"CombOffsetFlag,omitempty"`
	CombHedgeFlag       string  `protobuf:"bytes,4,opt,name=CombHedgeFlag,proto3" json:"CombHedgeFlag,omitempty"`
	LimitPrice          float64 `protobuf:"fixed64,5,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeTotalOriginal int32   `protobuf:"varint,6,opt,name=VolumeTotalOriginal,proto3" json:"VolumeTotalOriginal,omitempty"`
	TimeCondition       int32   `protobuf:"varint,7,opt,name=TimeCondition,proto3" json:"TimeCondition,omitempty"`
	GTDDate             string  `protobuf:"bytes,8,opt,name=GTDDate,proto3" json:"GTDDate,omitempty"`
	VolumeCondition     int32   `protobuf:"varint,9,opt,name=VolumeCondition,proto3" json:"VolumeCondition,omitempty"`
	MinVolume           int32   `protobuf:"varint,10,opt,name=MinVolume,proto3" json:"MinVolume,omitempty"`
	ContingentCondition int32   `protobuf:"varint,11,opt,name=ContingentCondition,proto3" json:"ContingentCondition,omitempty"`
	StopPrice           float64 `protobuf:"fixed64,12,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	ForceCloseReason    int32   `protobuf:"varint,13,opt,name=ForceCloseReason,proto3" json:"ForceCloseReason,omitempty"`
	IsAutoSuspend       int32   `protobuf:"varint,14,opt,name=IsAutoSuspend,proto3" json:"IsAutoSuspend,omitempty"`
	BusinessUnit        string  `protobuf:"bytes,15,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	RequestID           int32   `protobuf:"varint,16,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	OrderLocalID        string  `protobuf:"bytes,17,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ExchangeID          string  `protobuf:"bytes,18,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID       string  `protobuf:"bytes,19,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID            string  `protobuf:"bytes,20,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID      string  `protobuf:"bytes,21,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID            string  `protobuf:"bytes,22,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID           int32   `protobuf:"varint,23,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderSubmitStatus   int32   `protobuf:"varint,24,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	NotifySequence      int32   `protobuf:"varint,25,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay          string  `protobuf:"bytes,26,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID        int32   `protobuf:"varint,27,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	OrderSysID          string  `protobuf:"bytes,28,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	OrderSource         int32   `protobuf:"varint,29,opt,name=OrderSource,proto3" json:"OrderSource,omitempty"`
	OrderStatus         int32   `protobuf:"varint,30,opt,name=OrderStatus,proto3" json:"OrderStatus,omitempty"`
	OrderType           int32   `protobuf:"varint,31,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	VolumeTraded        int32   `protobuf:"varint,32,opt,name=VolumeTraded,proto3" json:"VolumeTraded,omitempty"`
	VolumeTotal         int32   `protobuf:"varint,33,opt,name=VolumeTotal,proto3" json:"VolumeTotal,omitempty"`
	InsertDate          string  `protobuf:"bytes,34,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime          string  `protobuf:"bytes,35,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	ActiveTime          string  `protobuf:"bytes,36,opt,name=ActiveTime,proto3" json:"ActiveTime,omitempty"`
	SuspendTime         string  `protobuf:"bytes,37,opt,name=SuspendTime,proto3" json:"SuspendTime,omitempty"`
	UpdateTime          string  `protobuf:"bytes,38,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	CancelTime          string  `protobuf:"bytes,39,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	ActiveTraderID      string  `protobuf:"bytes,40,opt,name=ActiveTraderID,proto3" json:"ActiveTraderID,omitempty"`
	ClearingPartID      string  `protobuf:"bytes,41,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo          int32   `protobuf:"varint,42,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	BranchID            string  `protobuf:"bytes,43,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	IPAddress           string  `protobuf:"bytes,44,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string  `protobuf:"bytes,45,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeOrderField) Reset() {
	*x = CThostFtdcExchangeOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeOrderField) ProtoMessage() {}

func (x *CThostFtdcExchangeOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{54}
}

func (x *CThostFtdcExchangeOrderField) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetTimeCondition() int32 {
	if x != nil {
		return x.TimeCondition
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetGTDDate() string {
	if x != nil {
		return x.GTDDate
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetVolumeCondition() int32 {
	if x != nil {
		return x.VolumeCondition
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetContingentCondition() int32 {
	if x != nil {
		return x.ContingentCondition
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetForceCloseReason() int32 {
	if x != nil {
		return x.ForceCloseReason
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetOrderSource() int32 {
	if x != nil {
		return x.OrderSource
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetVolumeTraded() int32 {
	if x != nil {
		return x.VolumeTraded
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetVolumeTotal() int32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetSuspendTime() string {
	if x != nil {
		return x.SuspendTime
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetActiveTraderID() string {
	if x != nil {
		return x.ActiveTraderID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExchangeOrderField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcExchangeOrderInsertErrorField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID string `protobuf:"bytes,2,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	TraderID      string `protobuf:"bytes,3,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID     int32  `protobuf:"varint,4,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderLocalID  string `protobuf:"bytes,5,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ErrorID       int32  `protobuf:"varint,6,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg      []byte `protobuf:"bytes,7,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcExchangeOrderInsertErrorField) Reset() {
	*x = CThostFtdcExchangeOrderInsertErrorField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeOrderInsertErrorField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeOrderInsertErrorField) ProtoMessage() {}

func (x *CThostFtdcExchangeOrderInsertErrorField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeOrderInsertErrorField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeOrderInsertErrorField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{55}
}

func (x *CThostFtdcExchangeOrderInsertErrorField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderInsertErrorField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderInsertErrorField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderInsertErrorField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderInsertErrorField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderInsertErrorField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderInsertErrorField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcInputOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OrderActionRef int32   `protobuf:"varint,3,opt,name=OrderActionRef,proto3" json:"OrderActionRef,omitempty"`
	OrderRef       string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	RequestID      int32   `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID        int32   `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID      int32   `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID     string  `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID     string  `protobuf:"bytes,9,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	ActionFlag     int32   `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	LimitPrice     float64 `protobuf:"fixed64,11,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeChange   int32   `protobuf:"varint,12,opt,name=VolumeChange,proto3" json:"VolumeChange,omitempty"`
	UserID         string  `protobuf:"bytes,13,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InstrumentID   string  `protobuf:"bytes,14,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestUnitID   string  `protobuf:"bytes,15,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress      string  `protobuf:"bytes,16,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress     string  `protobuf:"bytes,17,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputOrderActionField) Reset() {
	*x = CThostFtdcInputOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputOrderActionField) ProtoMessage() {}

func (x *CThostFtdcInputOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{56}
}

func (x *CThostFtdcInputOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *CThostFtdcInputOrderActionField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcInputOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcInputOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcInputOrderActionField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcInputOrderActionField) GetVolumeChange() int32 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *CThostFtdcInputOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID        string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OrderActionRef    int32   `protobuf:"varint,3,opt,name=OrderActionRef,proto3" json:"OrderActionRef,omitempty"`
	OrderRef          string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	RequestID         int32   `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID           int32   `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID         int32   `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID        string  `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID        string  `protobuf:"bytes,9,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	ActionFlag        int32   `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	LimitPrice        float64 `protobuf:"fixed64,11,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeChange      int32   `protobuf:"varint,12,opt,name=VolumeChange,proto3" json:"VolumeChange,omitempty"`
	ActionDate        string  `protobuf:"bytes,13,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string  `protobuf:"bytes,14,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string  `protobuf:"bytes,15,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32   `protobuf:"varint,16,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderLocalID      string  `protobuf:"bytes,17,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ActionLocalID     string  `protobuf:"bytes,18,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string  `protobuf:"bytes,19,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string  `protobuf:"bytes,20,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string  `protobuf:"bytes,21,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32   `protobuf:"varint,22,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string  `protobuf:"bytes,23,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StatusMsg         []byte  `protobuf:"bytes,24,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	InstrumentID      string  `protobuf:"bytes,25,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BranchID          string  `protobuf:"bytes,26,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID      string  `protobuf:"bytes,27,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress         string  `protobuf:"bytes,28,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string  `protobuf:"bytes,29,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcOrderActionField) Reset() {
	*x = CThostFtdcOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOrderActionField) ProtoMessage() {}

func (x *CThostFtdcOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{57}
}

func (x *CThostFtdcOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetVolumeChange() int32 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcExchangeOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID        string  `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID        string  `protobuf:"bytes,2,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	ActionFlag        int32   `protobuf:"varint,3,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	LimitPrice        float64 `protobuf:"fixed64,4,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeChange      int32   `protobuf:"varint,5,opt,name=VolumeChange,proto3" json:"VolumeChange,omitempty"`
	ActionDate        string  `protobuf:"bytes,6,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string  `protobuf:"bytes,7,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string  `protobuf:"bytes,8,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32   `protobuf:"varint,9,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderLocalID      string  `protobuf:"bytes,10,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ActionLocalID     string  `protobuf:"bytes,11,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string  `protobuf:"bytes,12,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string  `protobuf:"bytes,13,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string  `protobuf:"bytes,14,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32   `protobuf:"varint,15,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string  `protobuf:"bytes,16,opt,name=UserID,proto3" json:"UserID,omitempty"`
	BranchID          string  `protobuf:"bytes,17,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	IPAddress         string  `protobuf:"bytes,18,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string  `protobuf:"bytes,19,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeOrderActionField) Reset() {
	*x = CThostFtdcExchangeOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeOrderActionField) ProtoMessage() {}

func (x *CThostFtdcExchangeOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{58}
}

func (x *CThostFtdcExchangeOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcExchangeOrderActionField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcExchangeOrderActionField) GetVolumeChange() int32 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *CThostFtdcExchangeOrderActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderActionField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcExchangeOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcExchangeOrderActionErrorField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID    string `protobuf:"bytes,2,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	TraderID      string `protobuf:"bytes,3,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID     int32  `protobuf:"varint,4,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderLocalID  string `protobuf:"bytes,5,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ActionLocalID string `protobuf:"bytes,6,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ErrorID       int32  `protobuf:"varint,7,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg      []byte `protobuf:"bytes,8,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcExchangeOrderActionErrorField) Reset() {
	*x = CThostFtdcExchangeOrderActionErrorField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeOrderActionErrorField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeOrderActionErrorField) ProtoMessage() {}

func (x *CThostFtdcExchangeOrderActionErrorField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeOrderActionErrorField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeOrderActionErrorField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{59}
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcExchangeOrderActionErrorField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcExchangeTradeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID     string  `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TradeID        string  `protobuf:"bytes,2,opt,name=TradeID,proto3" json:"TradeID,omitempty"`
	Direction      int32   `protobuf:"varint,3,opt,name=Direction,proto3" json:"Direction,omitempty"`
	OrderSysID     string  `protobuf:"bytes,4,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	ParticipantID  string  `protobuf:"bytes,5,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string  `protobuf:"bytes,6,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	TradingRole    int32   `protobuf:"varint,7,opt,name=TradingRole,proto3" json:"TradingRole,omitempty"`
	ExchangeInstID string  `protobuf:"bytes,8,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	OffsetFlag     int32   `protobuf:"varint,9,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag      int32   `protobuf:"varint,10,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	Price          float64 `protobuf:"fixed64,11,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume         int32   `protobuf:"varint,12,opt,name=Volume,proto3" json:"Volume,omitempty"`
	TradeDate      string  `protobuf:"bytes,13,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string  `protobuf:"bytes,14,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	TradeType      int32   `protobuf:"varint,15,opt,name=TradeType,proto3" json:"TradeType,omitempty"`
	PriceSource    int32   `protobuf:"varint,16,opt,name=PriceSource,proto3" json:"PriceSource,omitempty"`
	TraderID       string  `protobuf:"bytes,17,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	OrderLocalID   string  `protobuf:"bytes,18,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ClearingPartID string  `protobuf:"bytes,19,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	BusinessUnit   string  `protobuf:"bytes,20,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	SequenceNo     int32   `protobuf:"varint,21,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	TradeSource    int32   `protobuf:"varint,22,opt,name=TradeSource,proto3" json:"TradeSource,omitempty"`
}

func (x *CThostFtdcExchangeTradeField) Reset() {
	*x = CThostFtdcExchangeTradeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeTradeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeTradeField) ProtoMessage() {}

func (x *CThostFtdcExchangeTradeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeTradeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeTradeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{60}
}

func (x *CThostFtdcExchangeTradeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetTradingRole() int32 {
	if x != nil {
		return x.TradingRole
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetPriceSource() int32 {
	if x != nil {
		return x.PriceSource
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeTradeField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExchangeTradeField) GetTradeSource() int32 {
	if x != nil {
		return x.TradeSource
	}
	return 0
}

type CThostFtdcTradeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID   string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OrderRef       string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	UserID         string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ExchangeID     string  `protobuf:"bytes,6,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TradeID        string  `protobuf:"bytes,7,opt,name=TradeID,proto3" json:"TradeID,omitempty"`
	Direction      int32   `protobuf:"varint,8,opt,name=Direction,proto3" json:"Direction,omitempty"`
	OrderSysID     string  `protobuf:"bytes,9,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	ParticipantID  string  `protobuf:"bytes,10,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string  `protobuf:"bytes,11,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	TradingRole    int32   `protobuf:"varint,12,opt,name=TradingRole,proto3" json:"TradingRole,omitempty"`
	ExchangeInstID string  `protobuf:"bytes,13,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	OffsetFlag     int32   `protobuf:"varint,14,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag      int32   `protobuf:"varint,15,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	Price          float64 `protobuf:"fixed64,16,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume         int32   `protobuf:"varint,17,opt,name=Volume,proto3" json:"Volume,omitempty"`
	TradeDate      string  `protobuf:"bytes,18,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string  `protobuf:"bytes,19,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	TradeType      int32   `protobuf:"varint,20,opt,name=TradeType,proto3" json:"TradeType,omitempty"`
	PriceSource    int32   `protobuf:"varint,21,opt,name=PriceSource,proto3" json:"PriceSource,omitempty"`
	TraderID       string  `protobuf:"bytes,22,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	OrderLocalID   string  `protobuf:"bytes,23,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ClearingPartID string  `protobuf:"bytes,24,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	BusinessUnit   string  `protobuf:"bytes,25,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	SequenceNo     int32   `protobuf:"varint,26,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	TradingDay     string  `protobuf:"bytes,27,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID   int32   `protobuf:"varint,28,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	BrokerOrderSeq int32   `protobuf:"varint,29,opt,name=BrokerOrderSeq,proto3" json:"BrokerOrderSeq,omitempty"`
	TradeSource    int32   `protobuf:"varint,30,opt,name=TradeSource,proto3" json:"TradeSource,omitempty"`
	InvestUnitID   string  `protobuf:"bytes,31,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcTradeField) Reset() {
	*x = CThostFtdcTradeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradeField) ProtoMessage() {}

func (x *CThostFtdcTradeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{61}
}

func (x *CThostFtdcTradeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcTradeField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcTradeField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetTradingRole() int32 {
	if x != nil {
		return x.TradingRole
	}
	return 0
}

func (x *CThostFtdcTradeField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcTradeField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcTradeField) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CThostFtdcTradeField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcTradeField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcTradeField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcTradeField) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *CThostFtdcTradeField) GetPriceSource() int32 {
	if x != nil {
		return x.PriceSource
	}
	return 0
}

func (x *CThostFtdcTradeField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcTradeField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcTradeField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcTradeField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcTradeField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcTradeField) GetBrokerOrderSeq() int32 {
	if x != nil {
		return x.BrokerOrderSeq
	}
	return 0
}

func (x *CThostFtdcTradeField) GetTradeSource() int32 {
	if x != nil {
		return x.TradeSource
	}
	return 0
}

func (x *CThostFtdcTradeField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcUserSessionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontID              int32  `protobuf:"varint,1,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID            int32  `protobuf:"varint,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	BrokerID             string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID               string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LoginDate            string `protobuf:"bytes,5,opt,name=LoginDate,proto3" json:"LoginDate,omitempty"`
	LoginTime            string `protobuf:"bytes,6,opt,name=LoginTime,proto3" json:"LoginTime,omitempty"`
	IPAddress            string `protobuf:"bytes,7,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	UserProductInfo      string `protobuf:"bytes,8,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	InterfaceProductInfo string `protobuf:"bytes,9,opt,name=InterfaceProductInfo,proto3" json:"InterfaceProductInfo,omitempty"`
	ProtocolInfo         string `protobuf:"bytes,10,opt,name=ProtocolInfo,proto3" json:"ProtocolInfo,omitempty"`
	MacAddress           string `protobuf:"bytes,11,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	LoginRemark          string `protobuf:"bytes,12,opt,name=LoginRemark,proto3" json:"LoginRemark,omitempty"`
}

func (x *CThostFtdcUserSessionField) Reset() {
	*x = CThostFtdcUserSessionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcUserSessionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcUserSessionField) ProtoMessage() {}

func (x *CThostFtdcUserSessionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcUserSessionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcUserSessionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{62}
}

func (x *CThostFtdcUserSessionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcUserSessionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcUserSessionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetLoginDate() string {
	if x != nil {
		return x.LoginDate
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetLoginTime() string {
	if x != nil {
		return x.LoginTime
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetInterfaceProductInfo() string {
	if x != nil {
		return x.InterfaceProductInfo
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetProtocolInfo() string {
	if x != nil {
		return x.ProtocolInfo
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcUserSessionField) GetLoginRemark() string {
	if x != nil {
		return x.LoginRemark
	}
	return ""
}

type CThostFtdcQueryMaxOrderVolumeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	Direction    int32  `protobuf:"varint,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	OffsetFlag   int32  `protobuf:"varint,5,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag    int32  `protobuf:"varint,6,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	MaxVolume    int32  `protobuf:"varint,7,opt,name=MaxVolume,proto3" json:"MaxVolume,omitempty"`
	ExchangeID   string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,9,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQueryMaxOrderVolumeField) Reset() {
	*x = CThostFtdcQueryMaxOrderVolumeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQueryMaxOrderVolumeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQueryMaxOrderVolumeField) ProtoMessage() {}

func (x *CThostFtdcQueryMaxOrderVolumeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQueryMaxOrderVolumeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQueryMaxOrderVolumeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{63}
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetMaxVolume() int32 {
	if x != nil {
		return x.MaxVolume
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcSettlementInfoConfirmField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ConfirmDate  string `protobuf:"bytes,3,opt,name=ConfirmDate,proto3" json:"ConfirmDate,omitempty"`
	ConfirmTime  string `protobuf:"bytes,4,opt,name=ConfirmTime,proto3" json:"ConfirmTime,omitempty"`
	SettlementID int32  `protobuf:"varint,5,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	AccountID    string `protobuf:"bytes,6,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID   string `protobuf:"bytes,7,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcSettlementInfoConfirmField) Reset() {
	*x = CThostFtdcSettlementInfoConfirmField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSettlementInfoConfirmField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSettlementInfoConfirmField) ProtoMessage() {}

func (x *CThostFtdcSettlementInfoConfirmField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSettlementInfoConfirmField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSettlementInfoConfirmField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{64}
}

func (x *CThostFtdcSettlementInfoConfirmField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSettlementInfoConfirmField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSettlementInfoConfirmField) GetConfirmDate() string {
	if x != nil {
		return x.ConfirmDate
	}
	return ""
}

func (x *CThostFtdcSettlementInfoConfirmField) GetConfirmTime() string {
	if x != nil {
		return x.ConfirmTime
	}
	return ""
}

func (x *CThostFtdcSettlementInfoConfirmField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcSettlementInfoConfirmField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcSettlementInfoConfirmField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcSyncDepositField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositSeqNo string  `protobuf:"bytes,1,opt,name=DepositSeqNo,proto3" json:"DepositSeqNo,omitempty"`
	BrokerID     string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	Deposit      float64 `protobuf:"fixed64,4,opt,name=Deposit,proto3" json:"Deposit,omitempty"`
	IsForce      int32   `protobuf:"varint,5,opt,name=IsForce,proto3" json:"IsForce,omitempty"`
	CurrencyID   string  `protobuf:"bytes,6,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcSyncDepositField) Reset() {
	*x = CThostFtdcSyncDepositField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncDepositField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncDepositField) ProtoMessage() {}

func (x *CThostFtdcSyncDepositField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncDepositField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncDepositField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{65}
}

func (x *CThostFtdcSyncDepositField) GetDepositSeqNo() string {
	if x != nil {
		return x.DepositSeqNo
	}
	return ""
}

func (x *CThostFtdcSyncDepositField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncDepositField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncDepositField) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *CThostFtdcSyncDepositField) GetIsForce() int32 {
	if x != nil {
		return x.IsForce
	}
	return 0
}

func (x *CThostFtdcSyncDepositField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcSyncFundMortgageField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MortgageSeqNo  string  `protobuf:"bytes,1,opt,name=MortgageSeqNo,proto3" json:"MortgageSeqNo,omitempty"`
	BrokerID       string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	FromCurrencyID string  `protobuf:"bytes,4,opt,name=FromCurrencyID,proto3" json:"FromCurrencyID,omitempty"`
	MortgageAmount float64 `protobuf:"fixed64,5,opt,name=MortgageAmount,proto3" json:"MortgageAmount,omitempty"`
	ToCurrencyID   string  `protobuf:"bytes,6,opt,name=ToCurrencyID,proto3" json:"ToCurrencyID,omitempty"`
}

func (x *CThostFtdcSyncFundMortgageField) Reset() {
	*x = CThostFtdcSyncFundMortgageField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncFundMortgageField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncFundMortgageField) ProtoMessage() {}

func (x *CThostFtdcSyncFundMortgageField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncFundMortgageField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncFundMortgageField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{66}
}

func (x *CThostFtdcSyncFundMortgageField) GetMortgageSeqNo() string {
	if x != nil {
		return x.MortgageSeqNo
	}
	return ""
}

func (x *CThostFtdcSyncFundMortgageField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncFundMortgageField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncFundMortgageField) GetFromCurrencyID() string {
	if x != nil {
		return x.FromCurrencyID
	}
	return ""
}

func (x *CThostFtdcSyncFundMortgageField) GetMortgageAmount() float64 {
	if x != nil {
		return x.MortgageAmount
	}
	return 0
}

func (x *CThostFtdcSyncFundMortgageField) GetToCurrencyID() string {
	if x != nil {
		return x.ToCurrencyID
	}
	return ""
}

type CThostFtdcBrokerSyncField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (x *CThostFtdcBrokerSyncField) Reset() {
	*x = CThostFtdcBrokerSyncField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerSyncField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerSyncField) ProtoMessage() {}

func (x *CThostFtdcBrokerSyncField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerSyncField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerSyncField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{67}
}

func (x *CThostFtdcBrokerSyncField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

type CThostFtdcSyncingInvestorField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorID         string `protobuf:"bytes,1,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	BrokerID           string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorGroupID    string `protobuf:"bytes,3,opt,name=InvestorGroupID,proto3" json:"InvestorGroupID,omitempty"`
	InvestorName       []byte `protobuf:"bytes,4,opt,name=InvestorName,proto3" json:"InvestorName,omitempty"`
	IdentifiedCardType int32  `protobuf:"varint,5,opt,name=IdentifiedCardType,proto3" json:"IdentifiedCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,6,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	IsActive           int32  `protobuf:"varint,7,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	Telephone          string `protobuf:"bytes,8,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	Address            string `protobuf:"bytes,9,opt,name=Address,proto3" json:"Address,omitempty"`
	OpenDate           string `protobuf:"bytes,10,opt,name=OpenDate,proto3" json:"OpenDate,omitempty"`
	Mobile             string `protobuf:"bytes,11,opt,name=Mobile,proto3" json:"Mobile,omitempty"`
	CommModelID        string `protobuf:"bytes,12,opt,name=CommModelID,proto3" json:"CommModelID,omitempty"`
	MarginModelID      string `protobuf:"bytes,13,opt,name=MarginModelID,proto3" json:"MarginModelID,omitempty"`
}

func (x *CThostFtdcSyncingInvestorField) Reset() {
	*x = CThostFtdcSyncingInvestorField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingInvestorField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingInvestorField) ProtoMessage() {}

func (x *CThostFtdcSyncingInvestorField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingInvestorField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingInvestorField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{68}
}

func (x *CThostFtdcSyncingInvestorField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetInvestorGroupID() string {
	if x != nil {
		return x.InvestorGroupID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetInvestorName() []byte {
	if x != nil {
		return x.InvestorName
	}
	return nil
}

func (x *CThostFtdcSyncingInvestorField) GetIdentifiedCardType() int32 {
	if x != nil {
		return x.IdentifiedCardType
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetCommModelID() string {
	if x != nil {
		return x.CommModelID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorField) GetMarginModelID() string {
	if x != nil {
		return x.MarginModelID
	}
	return ""
}

type CThostFtdcSyncingTradingCodeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorID   string `protobuf:"bytes,1,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	BrokerID     string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ExchangeID   string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ClientID     string `protobuf:"bytes,4,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IsActive     int32  `protobuf:"varint,5,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	ClientIDType int32  `protobuf:"varint,6,opt,name=ClientIDType,proto3" json:"ClientIDType,omitempty"`
}

func (x *CThostFtdcSyncingTradingCodeField) Reset() {
	*x = CThostFtdcSyncingTradingCodeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingTradingCodeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingTradingCodeField) ProtoMessage() {}

func (x *CThostFtdcSyncingTradingCodeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingTradingCodeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingTradingCodeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{69}
}

func (x *CThostFtdcSyncingTradingCodeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncingTradingCodeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingTradingCodeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcSyncingTradingCodeField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcSyncingTradingCodeField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *CThostFtdcSyncingTradingCodeField) GetClientIDType() int32 {
	if x != nil {
		return x.ClientIDType
	}
	return 0
}

type CThostFtdcSyncingInvestorGroupField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorGroupID   string `protobuf:"bytes,2,opt,name=InvestorGroupID,proto3" json:"InvestorGroupID,omitempty"`
	InvestorGroupName []byte `protobuf:"bytes,3,opt,name=InvestorGroupName,proto3" json:"InvestorGroupName,omitempty"`
}

func (x *CThostFtdcSyncingInvestorGroupField) Reset() {
	*x = CThostFtdcSyncingInvestorGroupField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingInvestorGroupField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingInvestorGroupField) ProtoMessage() {}

func (x *CThostFtdcSyncingInvestorGroupField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingInvestorGroupField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingInvestorGroupField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{70}
}

func (x *CThostFtdcSyncingInvestorGroupField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorGroupField) GetInvestorGroupID() string {
	if x != nil {
		return x.InvestorGroupID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorGroupField) GetInvestorGroupName() []byte {
	if x != nil {
		return x.InvestorGroupName
	}
	return nil
}

type CThostFtdcSyncingTradingAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                       string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID                      string  `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	PreMortgage                    float64 `protobuf:"fixed64,3,opt,name=PreMortgage,proto3" json:"PreMortgage,omitempty"`
	PreCredit                      float64 `protobuf:"fixed64,4,opt,name=PreCredit,proto3" json:"PreCredit,omitempty"`
	PreDeposit                     float64 `protobuf:"fixed64,5,opt,name=PreDeposit,proto3" json:"PreDeposit,omitempty"`
	PreBalance                     float64 `protobuf:"fixed64,6,opt,name=PreBalance,proto3" json:"PreBalance,omitempty"`
	PreMargin                      float64 `protobuf:"fixed64,7,opt,name=PreMargin,proto3" json:"PreMargin,omitempty"`
	InterestBase                   float64 `protobuf:"fixed64,8,opt,name=InterestBase,proto3" json:"InterestBase,omitempty"`
	Interest                       float64 `protobuf:"fixed64,9,opt,name=Interest,proto3" json:"Interest,omitempty"`
	Deposit                        float64 `protobuf:"fixed64,10,opt,name=Deposit,proto3" json:"Deposit,omitempty"`
	Withdraw                       float64 `protobuf:"fixed64,11,opt,name=Withdraw,proto3" json:"Withdraw,omitempty"`
	FrozenMargin                   float64 `protobuf:"fixed64,12,opt,name=FrozenMargin,proto3" json:"FrozenMargin,omitempty"`
	FrozenCash                     float64 `protobuf:"fixed64,13,opt,name=FrozenCash,proto3" json:"FrozenCash,omitempty"`
	FrozenCommission               float64 `protobuf:"fixed64,14,opt,name=FrozenCommission,proto3" json:"FrozenCommission,omitempty"`
	CurrMargin                     float64 `protobuf:"fixed64,15,opt,name=CurrMargin,proto3" json:"CurrMargin,omitempty"`
	CashIn                         float64 `protobuf:"fixed64,16,opt,name=CashIn,proto3" json:"CashIn,omitempty"`
	Commission                     float64 `protobuf:"fixed64,17,opt,name=Commission,proto3" json:"Commission,omitempty"`
	CloseProfit                    float64 `protobuf:"fixed64,18,opt,name=CloseProfit,proto3" json:"CloseProfit,omitempty"`
	PositionProfit                 float64 `protobuf:"fixed64,19,opt,name=PositionProfit,proto3" json:"PositionProfit,omitempty"`
	Balance                        float64 `protobuf:"fixed64,20,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Available                      float64 `protobuf:"fixed64,21,opt,name=Available,proto3" json:"Available,omitempty"`
	WithdrawQuota                  float64 `protobuf:"fixed64,22,opt,name=WithdrawQuota,proto3" json:"WithdrawQuota,omitempty"`
	Reserve                        float64 `protobuf:"fixed64,23,opt,name=Reserve,proto3" json:"Reserve,omitempty"`
	TradingDay                     string  `protobuf:"bytes,24,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID                   int32   `protobuf:"varint,25,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	Credit                         float64 `protobuf:"fixed64,26,opt,name=Credit,proto3" json:"Credit,omitempty"`
	Mortgage                       float64 `protobuf:"fixed64,27,opt,name=Mortgage,proto3" json:"Mortgage,omitempty"`
	ExchangeMargin                 float64 `protobuf:"fixed64,28,opt,name=ExchangeMargin,proto3" json:"ExchangeMargin,omitempty"`
	DeliveryMargin                 float64 `protobuf:"fixed64,29,opt,name=DeliveryMargin,proto3" json:"DeliveryMargin,omitempty"`
	ExchangeDeliveryMargin         float64 `protobuf:"fixed64,30,opt,name=ExchangeDeliveryMargin,proto3" json:"ExchangeDeliveryMargin,omitempty"`
	ReserveBalance                 float64 `protobuf:"fixed64,31,opt,name=ReserveBalance,proto3" json:"ReserveBalance,omitempty"`
	CurrencyID                     string  `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	PreFundMortgageIn              float64 `protobuf:"fixed64,33,opt,name=PreFundMortgageIn,proto3" json:"PreFundMortgageIn,omitempty"`
	PreFundMortgageOut             float64 `protobuf:"fixed64,34,opt,name=PreFundMortgageOut,proto3" json:"PreFundMortgageOut,omitempty"`
	FundMortgageIn                 float64 `protobuf:"fixed64,35,opt,name=FundMortgageIn,proto3" json:"FundMortgageIn,omitempty"`
	FundMortgageOut                float64 `protobuf:"fixed64,36,opt,name=FundMortgageOut,proto3" json:"FundMortgageOut,omitempty"`
	FundMortgageAvailable          float64 `protobuf:"fixed64,37,opt,name=FundMortgageAvailable,proto3" json:"FundMortgageAvailable,omitempty"`
	MortgageableFund               float64 `protobuf:"fixed64,38,opt,name=MortgageableFund,proto3" json:"MortgageableFund,omitempty"`
	SpecProductMargin              float64 `protobuf:"fixed64,39,opt,name=SpecProductMargin,proto3" json:"SpecProductMargin,omitempty"`
	SpecProductFrozenMargin        float64 `protobuf:"fixed64,40,opt,name=SpecProductFrozenMargin,proto3" json:"SpecProductFrozenMargin,omitempty"`
	SpecProductCommission          float64 `protobuf:"fixed64,41,opt,name=SpecProductCommission,proto3" json:"SpecProductCommission,omitempty"`
	SpecProductFrozenCommission    float64 `protobuf:"fixed64,42,opt,name=SpecProductFrozenCommission,proto3" json:"SpecProductFrozenCommission,omitempty"`
	SpecProductPositionProfit      float64 `protobuf:"fixed64,43,opt,name=SpecProductPositionProfit,proto3" json:"SpecProductPositionProfit,omitempty"`
	SpecProductCloseProfit         float64 `protobuf:"fixed64,44,opt,name=SpecProductCloseProfit,proto3" json:"SpecProductCloseProfit,omitempty"`
	SpecProductPositionProfitByAlg float64 `protobuf:"fixed64,45,opt,name=SpecProductPositionProfitByAlg,proto3" json:"SpecProductPositionProfitByAlg,omitempty"`
	SpecProductExchangeMargin      float64 `protobuf:"fixed64,46,opt,name=SpecProductExchangeMargin,proto3" json:"SpecProductExchangeMargin,omitempty"`
	FrozenSwap                     float64 `protobuf:"fixed64,47,opt,name=FrozenSwap,proto3" json:"FrozenSwap,omitempty"`
	RemainSwap                     float64 `protobuf:"fixed64,48,opt,name=RemainSwap,proto3" json:"RemainSwap,omitempty"`
}

func (x *CThostFtdcSyncingTradingAccountField) Reset() {
	*x = CThostFtdcSyncingTradingAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingTradingAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingTradingAccountField) ProtoMessage() {}

func (x *CThostFtdcSyncingTradingAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingTradingAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingTradingAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{71}
}

func (x *CThostFtdcSyncingTradingAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingTradingAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcSyncingTradingAccountField) GetPreMortgage() float64 {
	if x != nil {
		return x.PreMortgage
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetPreCredit() float64 {
	if x != nil {
		return x.PreCredit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetPreDeposit() float64 {
	if x != nil {
		return x.PreDeposit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetInterestBase() float64 {
	if x != nil {
		return x.InterestBase
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetCurrMargin() float64 {
	if x != nil {
		return x.CurrMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetWithdrawQuota() float64 {
	if x != nil {
		return x.WithdrawQuota
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcSyncingTradingAccountField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetCredit() float64 {
	if x != nil {
		return x.Credit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetMortgage() float64 {
	if x != nil {
		return x.Mortgage
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetDeliveryMargin() float64 {
	if x != nil {
		return x.DeliveryMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetExchangeDeliveryMargin() float64 {
	if x != nil {
		return x.ExchangeDeliveryMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetReserveBalance() float64 {
	if x != nil {
		return x.ReserveBalance
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcSyncingTradingAccountField) GetPreFundMortgageIn() float64 {
	if x != nil {
		return x.PreFundMortgageIn
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetPreFundMortgageOut() float64 {
	if x != nil {
		return x.PreFundMortgageOut
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetFundMortgageIn() float64 {
	if x != nil {
		return x.FundMortgageIn
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetFundMortgageOut() float64 {
	if x != nil {
		return x.FundMortgageOut
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetFundMortgageAvailable() float64 {
	if x != nil {
		return x.FundMortgageAvailable
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetMortgageableFund() float64 {
	if x != nil {
		return x.MortgageableFund
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductMargin() float64 {
	if x != nil {
		return x.SpecProductMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductFrozenMargin() float64 {
	if x != nil {
		return x.SpecProductFrozenMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductCommission() float64 {
	if x != nil {
		return x.SpecProductCommission
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductFrozenCommission() float64 {
	if x != nil {
		return x.SpecProductFrozenCommission
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductPositionProfit() float64 {
	if x != nil {
		return x.SpecProductPositionProfit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductCloseProfit() float64 {
	if x != nil {
		return x.SpecProductCloseProfit
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductPositionProfitByAlg() float64 {
	if x != nil {
		return x.SpecProductPositionProfitByAlg
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetSpecProductExchangeMargin() float64 {
	if x != nil {
		return x.SpecProductExchangeMargin
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetFrozenSwap() float64 {
	if x != nil {
		return x.FrozenSwap
	}
	return 0
}

func (x *CThostFtdcSyncingTradingAccountField) GetRemainSwap() float64 {
	if x != nil {
		return x.RemainSwap
	}
	return 0
}

type CThostFtdcSyncingInvestorPositionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID       string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BrokerID           string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	PosiDirection      int32   `protobuf:"varint,4,opt,name=PosiDirection,proto3" json:"PosiDirection,omitempty"`
	HedgeFlag          int32   `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	PositionDate       int32   `protobuf:"varint,6,opt,name=PositionDate,proto3" json:"PositionDate,omitempty"`
	YdPosition         int32   `protobuf:"varint,7,opt,name=YdPosition,proto3" json:"YdPosition,omitempty"`
	Position           int32   `protobuf:"varint,8,opt,name=Position,proto3" json:"Position,omitempty"`
	LongFrozen         int32   `protobuf:"varint,9,opt,name=LongFrozen,proto3" json:"LongFrozen,omitempty"`
	ShortFrozen        int32   `protobuf:"varint,10,opt,name=ShortFrozen,proto3" json:"ShortFrozen,omitempty"`
	LongFrozenAmount   float64 `protobuf:"fixed64,11,opt,name=LongFrozenAmount,proto3" json:"LongFrozenAmount,omitempty"`
	ShortFrozenAmount  float64 `protobuf:"fixed64,12,opt,name=ShortFrozenAmount,proto3" json:"ShortFrozenAmount,omitempty"`
	OpenVolume         int32   `protobuf:"varint,13,opt,name=OpenVolume,proto3" json:"OpenVolume,omitempty"`
	CloseVolume        int32   `protobuf:"varint,14,opt,name=CloseVolume,proto3" json:"CloseVolume,omitempty"`
	OpenAmount         float64 `protobuf:"fixed64,15,opt,name=OpenAmount,proto3" json:"OpenAmount,omitempty"`
	CloseAmount        float64 `protobuf:"fixed64,16,opt,name=CloseAmount,proto3" json:"CloseAmount,omitempty"`
	PositionCost       float64 `protobuf:"fixed64,17,opt,name=PositionCost,proto3" json:"PositionCost,omitempty"`
	PreMargin          float64 `protobuf:"fixed64,18,opt,name=PreMargin,proto3" json:"PreMargin,omitempty"`
	UseMargin          float64 `protobuf:"fixed64,19,opt,name=UseMargin,proto3" json:"UseMargin,omitempty"`
	FrozenMargin       float64 `protobuf:"fixed64,20,opt,name=FrozenMargin,proto3" json:"FrozenMargin,omitempty"`
	FrozenCash         float64 `protobuf:"fixed64,21,opt,name=FrozenCash,proto3" json:"FrozenCash,omitempty"`
	FrozenCommission   float64 `protobuf:"fixed64,22,opt,name=FrozenCommission,proto3" json:"FrozenCommission,omitempty"`
	CashIn             float64 `protobuf:"fixed64,23,opt,name=CashIn,proto3" json:"CashIn,omitempty"`
	Commission         float64 `protobuf:"fixed64,24,opt,name=Commission,proto3" json:"Commission,omitempty"`
	CloseProfit        float64 `protobuf:"fixed64,25,opt,name=CloseProfit,proto3" json:"CloseProfit,omitempty"`
	PositionProfit     float64 `protobuf:"fixed64,26,opt,name=PositionProfit,proto3" json:"PositionProfit,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,27,opt,name=PreSettlementPrice,proto3" json:"PreSettlementPrice,omitempty"`
	SettlementPrice    float64 `protobuf:"fixed64,28,opt,name=SettlementPrice,proto3" json:"SettlementPrice,omitempty"`
	TradingDay         string  `protobuf:"bytes,29,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID       int32   `protobuf:"varint,30,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	OpenCost           float64 `protobuf:"fixed64,31,opt,name=OpenCost,proto3" json:"OpenCost,omitempty"`
	ExchangeMargin     float64 `protobuf:"fixed64,32,opt,name=ExchangeMargin,proto3" json:"ExchangeMargin,omitempty"`
	CombPosition       int32   `protobuf:"varint,33,opt,name=CombPosition,proto3" json:"CombPosition,omitempty"`
	CombLongFrozen     int32   `protobuf:"varint,34,opt,name=CombLongFrozen,proto3" json:"CombLongFrozen,omitempty"`
	CombShortFrozen    int32   `protobuf:"varint,35,opt,name=CombShortFrozen,proto3" json:"CombShortFrozen,omitempty"`
	CloseProfitByDate  float64 `protobuf:"fixed64,36,opt,name=CloseProfitByDate,proto3" json:"CloseProfitByDate,omitempty"`
	CloseProfitByTrade float64 `protobuf:"fixed64,37,opt,name=CloseProfitByTrade,proto3" json:"CloseProfitByTrade,omitempty"`
	TodayPosition      int32   `protobuf:"varint,38,opt,name=TodayPosition,proto3" json:"TodayPosition,omitempty"`
	MarginRateByMoney  float64 `protobuf:"fixed64,39,opt,name=MarginRateByMoney,proto3" json:"MarginRateByMoney,omitempty"`
	MarginRateByVolume float64 `protobuf:"fixed64,40,opt,name=MarginRateByVolume,proto3" json:"MarginRateByVolume,omitempty"`
	StrikeFrozen       int32   `protobuf:"varint,41,opt,name=StrikeFrozen,proto3" json:"StrikeFrozen,omitempty"`
	StrikeFrozenAmount float64 `protobuf:"fixed64,42,opt,name=StrikeFrozenAmount,proto3" json:"StrikeFrozenAmount,omitempty"`
	AbandonFrozen      int32   `protobuf:"varint,43,opt,name=AbandonFrozen,proto3" json:"AbandonFrozen,omitempty"`
	ExchangeID         string  `protobuf:"bytes,44,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	YdStrikeFrozen     int32   `protobuf:"varint,45,opt,name=YdStrikeFrozen,proto3" json:"YdStrikeFrozen,omitempty"`
	InvestUnitID       string  `protobuf:"bytes,46,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	PositionCostOffset float64 `protobuf:"fixed64,47,opt,name=PositionCostOffset,proto3" json:"PositionCostOffset,omitempty"`
}

func (x *CThostFtdcSyncingInvestorPositionField) Reset() {
	*x = CThostFtdcSyncingInvestorPositionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingInvestorPositionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingInvestorPositionField) ProtoMessage() {}

func (x *CThostFtdcSyncingInvestorPositionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingInvestorPositionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingInvestorPositionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{72}
}

func (x *CThostFtdcSyncingInvestorPositionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorPositionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorPositionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPosiDirection() int32 {
	if x != nil {
		return x.PosiDirection
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPositionDate() int32 {
	if x != nil {
		return x.PositionDate
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetYdPosition() int32 {
	if x != nil {
		return x.YdPosition
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetLongFrozen() int32 {
	if x != nil {
		return x.LongFrozen
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetShortFrozen() int32 {
	if x != nil {
		return x.ShortFrozen
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetLongFrozenAmount() float64 {
	if x != nil {
		return x.LongFrozenAmount
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetShortFrozenAmount() float64 {
	if x != nil {
		return x.ShortFrozenAmount
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetOpenVolume() int32 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCloseVolume() int32 {
	if x != nil {
		return x.CloseVolume
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetOpenAmount() float64 {
	if x != nil {
		return x.OpenAmount
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCloseAmount() float64 {
	if x != nil {
		return x.CloseAmount
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPositionCost() float64 {
	if x != nil {
		return x.PositionCost
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPreMargin() float64 {
	if x != nil {
		return x.PreMargin
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetUseMargin() float64 {
	if x != nil {
		return x.UseMargin
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorPositionField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetOpenCost() float64 {
	if x != nil {
		return x.OpenCost
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetExchangeMargin() float64 {
	if x != nil {
		return x.ExchangeMargin
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCombPosition() int32 {
	if x != nil {
		return x.CombPosition
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCombLongFrozen() int32 {
	if x != nil {
		return x.CombLongFrozen
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCombShortFrozen() int32 {
	if x != nil {
		return x.CombShortFrozen
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCloseProfitByDate() float64 {
	if x != nil {
		return x.CloseProfitByDate
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetCloseProfitByTrade() float64 {
	if x != nil {
		return x.CloseProfitByTrade
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetTodayPosition() int32 {
	if x != nil {
		return x.TodayPosition
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetMarginRateByMoney() float64 {
	if x != nil {
		return x.MarginRateByMoney
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetMarginRateByVolume() float64 {
	if x != nil {
		return x.MarginRateByVolume
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetStrikeFrozen() int32 {
	if x != nil {
		return x.StrikeFrozen
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetStrikeFrozenAmount() float64 {
	if x != nil {
		return x.StrikeFrozenAmount
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetAbandonFrozen() int32 {
	if x != nil {
		return x.AbandonFrozen
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorPositionField) GetYdStrikeFrozen() int32 {
	if x != nil {
		return x.YdStrikeFrozen
	}
	return 0
}

func (x *CThostFtdcSyncingInvestorPositionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcSyncingInvestorPositionField) GetPositionCostOffset() float64 {
	if x != nil {
		return x.PositionCostOffset
	}
	return 0
}

type CThostFtdcSyncingInstrumentMarginRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID             string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange            int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                 string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID               string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	HedgeFlag                int32   `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	LongMarginRatioByMoney   float64 `protobuf:"fixed64,6,opt,name=LongMarginRatioByMoney,proto3" json:"LongMarginRatioByMoney,omitempty"`
	LongMarginRatioByVolume  float64 `protobuf:"fixed64,7,opt,name=LongMarginRatioByVolume,proto3" json:"LongMarginRatioByVolume,omitempty"`
	ShortMarginRatioByMoney  float64 `protobuf:"fixed64,8,opt,name=ShortMarginRatioByMoney,proto3" json:"ShortMarginRatioByMoney,omitempty"`
	ShortMarginRatioByVolume float64 `protobuf:"fixed64,9,opt,name=ShortMarginRatioByVolume,proto3" json:"ShortMarginRatioByVolume,omitempty"`
	IsRelative               int32   `protobuf:"varint,10,opt,name=IsRelative,proto3" json:"IsRelative,omitempty"`
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) Reset() {
	*x = CThostFtdcSyncingInstrumentMarginRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingInstrumentMarginRateField) ProtoMessage() {}

func (x *CThostFtdcSyncingInstrumentMarginRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingInstrumentMarginRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingInstrumentMarginRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{73}
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.LongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentMarginRateField) GetIsRelative() int32 {
	if x != nil {
		return x.IsRelative
	}
	return 0
}

type CThostFtdcSyncingInstrumentCommissionRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID            string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange           int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID              string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OpenRatioByMoney        float64 `protobuf:"fixed64,5,opt,name=OpenRatioByMoney,proto3" json:"OpenRatioByMoney,omitempty"`
	OpenRatioByVolume       float64 `protobuf:"fixed64,6,opt,name=OpenRatioByVolume,proto3" json:"OpenRatioByVolume,omitempty"`
	CloseRatioByMoney       float64 `protobuf:"fixed64,7,opt,name=CloseRatioByMoney,proto3" json:"CloseRatioByMoney,omitempty"`
	CloseRatioByVolume      float64 `protobuf:"fixed64,8,opt,name=CloseRatioByVolume,proto3" json:"CloseRatioByVolume,omitempty"`
	CloseTodayRatioByMoney  float64 `protobuf:"fixed64,9,opt,name=CloseTodayRatioByMoney,proto3" json:"CloseTodayRatioByMoney,omitempty"`
	CloseTodayRatioByVolume float64 `protobuf:"fixed64,10,opt,name=CloseTodayRatioByVolume,proto3" json:"CloseTodayRatioByVolume,omitempty"`
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) Reset() {
	*x = CThostFtdcSyncingInstrumentCommissionRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingInstrumentCommissionRateField) ProtoMessage() {}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingInstrumentCommissionRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingInstrumentCommissionRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{74}
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetOpenRatioByMoney() float64 {
	if x != nil {
		return x.OpenRatioByMoney
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetOpenRatioByVolume() float64 {
	if x != nil {
		return x.OpenRatioByVolume
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetCloseRatioByMoney() float64 {
	if x != nil {
		return x.CloseRatioByMoney
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetCloseRatioByVolume() float64 {
	if x != nil {
		return x.CloseRatioByVolume
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetCloseTodayRatioByMoney() float64 {
	if x != nil {
		return x.CloseTodayRatioByMoney
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentCommissionRateField) GetCloseTodayRatioByVolume() float64 {
	if x != nil {
		return x.CloseTodayRatioByVolume
	}
	return 0
}

type CThostFtdcSyncingInstrumentTradingRightField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID  string `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange int32  `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID      string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	TradingRight  int32  `protobuf:"varint,5,opt,name=TradingRight,proto3" json:"TradingRight,omitempty"`
}

func (x *CThostFtdcSyncingInstrumentTradingRightField) Reset() {
	*x = CThostFtdcSyncingInstrumentTradingRightField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncingInstrumentTradingRightField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncingInstrumentTradingRightField) ProtoMessage() {}

func (x *CThostFtdcSyncingInstrumentTradingRightField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncingInstrumentTradingRightField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncingInstrumentTradingRightField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{75}
}

func (x *CThostFtdcSyncingInstrumentTradingRightField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentTradingRightField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcSyncingInstrumentTradingRightField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentTradingRightField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncingInstrumentTradingRightField) GetTradingRight() int32 {
	if x != nil {
		return x.TradingRight
	}
	return 0
}

type CThostFtdcQryOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID      string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID      string `protobuf:"bytes,5,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	InsertTimeStart string `protobuf:"bytes,6,opt,name=InsertTimeStart,proto3" json:"InsertTimeStart,omitempty"`
	InsertTimeEnd   string `protobuf:"bytes,7,opt,name=InsertTimeEnd,proto3" json:"InsertTimeEnd,omitempty"`
	InvestUnitID    string `protobuf:"bytes,8,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryOrderField) Reset() {
	*x = CThostFtdcQryOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryOrderField) ProtoMessage() {}

func (x *CThostFtdcQryOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{76}
}

func (x *CThostFtdcQryOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryOrderField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcQryOrderField) GetInsertTimeStart() string {
	if x != nil {
		return x.InsertTimeStart
	}
	return ""
}

func (x *CThostFtdcQryOrderField) GetInsertTimeEnd() string {
	if x != nil {
		return x.InsertTimeEnd
	}
	return ""
}

func (x *CThostFtdcQryOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryTradeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID   string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID     string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TradeID        string `protobuf:"bytes,5,opt,name=TradeID,proto3" json:"TradeID,omitempty"`
	TradeTimeStart string `protobuf:"bytes,6,opt,name=TradeTimeStart,proto3" json:"TradeTimeStart,omitempty"`
	TradeTimeEnd   string `protobuf:"bytes,7,opt,name=TradeTimeEnd,proto3" json:"TradeTimeEnd,omitempty"`
	InvestUnitID   string `protobuf:"bytes,8,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryTradeField) Reset() {
	*x = CThostFtdcQryTradeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTradeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTradeField) ProtoMessage() {}

func (x *CThostFtdcQryTradeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTradeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTradeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{77}
}

func (x *CThostFtdcQryTradeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryTradeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryTradeField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryTradeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryTradeField) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *CThostFtdcQryTradeField) GetTradeTimeStart() string {
	if x != nil {
		return x.TradeTimeStart
	}
	return ""
}

func (x *CThostFtdcQryTradeField) GetTradeTimeEnd() string {
	if x != nil {
		return x.TradeTimeEnd
	}
	return ""
}

func (x *CThostFtdcQryTradeField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryInvestorPositionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryInvestorPositionField) Reset() {
	*x = CThostFtdcQryInvestorPositionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInvestorPositionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInvestorPositionField) ProtoMessage() {}

func (x *CThostFtdcQryInvestorPositionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInvestorPositionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInvestorPositionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{78}
}

func (x *CThostFtdcQryInvestorPositionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryTradingAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	CurrencyID string `protobuf:"bytes,3,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	BizType    int32  `protobuf:"varint,4,opt,name=BizType,proto3" json:"BizType,omitempty"`
	AccountID  string `protobuf:"bytes,5,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (x *CThostFtdcQryTradingAccountField) Reset() {
	*x = CThostFtdcQryTradingAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTradingAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTradingAccountField) ProtoMessage() {}

func (x *CThostFtdcQryTradingAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTradingAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTradingAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{79}
}

func (x *CThostFtdcQryTradingAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryTradingAccountField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryTradingAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcQryTradingAccountField) GetBizType() int32 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *CThostFtdcQryTradingAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type CThostFtdcQryInvestorField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQryInvestorField) Reset() {
	*x = CThostFtdcQryInvestorField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInvestorField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInvestorField) ProtoMessage() {}

func (x *CThostFtdcQryInvestorField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInvestorField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInvestorField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{80}
}

func (x *CThostFtdcQryInvestorField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInvestorField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcQryTradingCodeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID   string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ClientID     string `protobuf:"bytes,4,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ClientIDType int32  `protobuf:"varint,5,opt,name=ClientIDType,proto3" json:"ClientIDType,omitempty"`
	InvestUnitID string `protobuf:"bytes,6,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryTradingCodeField) Reset() {
	*x = CThostFtdcQryTradingCodeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTradingCodeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTradingCodeField) ProtoMessage() {}

func (x *CThostFtdcQryTradingCodeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTradingCodeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTradingCodeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{81}
}

func (x *CThostFtdcQryTradingCodeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryTradingCodeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryTradingCodeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryTradingCodeField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryTradingCodeField) GetClientIDType() int32 {
	if x != nil {
		return x.ClientIDType
	}
	return 0
}

func (x *CThostFtdcQryTradingCodeField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryInvestorGroupField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (x *CThostFtdcQryInvestorGroupField) Reset() {
	*x = CThostFtdcQryInvestorGroupField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInvestorGroupField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInvestorGroupField) ProtoMessage() {}

func (x *CThostFtdcQryInvestorGroupField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInvestorGroupField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInvestorGroupField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{82}
}

func (x *CThostFtdcQryInvestorGroupField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

type CThostFtdcQryInstrumentMarginRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag    int32  `protobuf:"varint,4,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ExchangeID   string `protobuf:"bytes,5,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,6,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryInstrumentMarginRateField) Reset() {
	*x = CThostFtdcQryInstrumentMarginRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInstrumentMarginRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInstrumentMarginRateField) ProtoMessage() {}

func (x *CThostFtdcQryInstrumentMarginRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInstrumentMarginRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInstrumentMarginRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{83}
}

func (x *CThostFtdcQryInstrumentMarginRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentMarginRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentMarginRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentMarginRateField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcQryInstrumentMarginRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentMarginRateField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryInstrumentCommissionRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryInstrumentCommissionRateField) Reset() {
	*x = CThostFtdcQryInstrumentCommissionRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInstrumentCommissionRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInstrumentCommissionRateField) ProtoMessage() {}

func (x *CThostFtdcQryInstrumentCommissionRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInstrumentCommissionRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInstrumentCommissionRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{84}
}

func (x *CThostFtdcQryInstrumentCommissionRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentCommissionRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentCommissionRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentCommissionRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentCommissionRateField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryInstrumentTradingRightField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcQryInstrumentTradingRightField) Reset() {
	*x = CThostFtdcQryInstrumentTradingRightField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInstrumentTradingRightField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInstrumentTradingRightField) ProtoMessage() {}

func (x *CThostFtdcQryInstrumentTradingRightField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInstrumentTradingRightField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInstrumentTradingRightField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{85}
}

func (x *CThostFtdcQryInstrumentTradingRightField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentTradingRightField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentTradingRightField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcQryBrokerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (x *CThostFtdcQryBrokerField) Reset() {
	*x = CThostFtdcQryBrokerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBrokerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBrokerField) ProtoMessage() {}

func (x *CThostFtdcQryBrokerField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBrokerField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBrokerField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{86}
}

func (x *CThostFtdcQryBrokerField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

type CThostFtdcQryTraderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID string `protobuf:"bytes,2,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	TraderID      string `protobuf:"bytes,3,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryTraderField) Reset() {
	*x = CThostFtdcQryTraderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTraderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTraderField) ProtoMessage() {}

func (x *CThostFtdcQryTraderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTraderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTraderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{87}
}

func (x *CThostFtdcQryTraderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryTraderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryTraderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcQrySuperUserFunctionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcQrySuperUserFunctionField) Reset() {
	*x = CThostFtdcQrySuperUserFunctionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySuperUserFunctionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySuperUserFunctionField) ProtoMessage() {}

func (x *CThostFtdcQrySuperUserFunctionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySuperUserFunctionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySuperUserFunctionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{88}
}

func (x *CThostFtdcQrySuperUserFunctionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcQryUserSessionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontID   int32  `protobuf:"varint,1,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID int32  `protobuf:"varint,2,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	BrokerID  string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID    string `protobuf:"bytes,4,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcQryUserSessionField) Reset() {
	*x = CThostFtdcQryUserSessionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryUserSessionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryUserSessionField) ProtoMessage() {}

func (x *CThostFtdcQryUserSessionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryUserSessionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryUserSessionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{89}
}

func (x *CThostFtdcQryUserSessionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcQryUserSessionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcQryUserSessionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryUserSessionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcQryPartBrokerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	BrokerID      string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ParticipantID string `protobuf:"bytes,3,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
}

func (x *CThostFtdcQryPartBrokerField) Reset() {
	*x = CThostFtdcQryPartBrokerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryPartBrokerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryPartBrokerField) ProtoMessage() {}

func (x *CThostFtdcQryPartBrokerField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryPartBrokerField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryPartBrokerField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{90}
}

func (x *CThostFtdcQryPartBrokerField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryPartBrokerField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryPartBrokerField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

type CThostFtdcQryFrontStatusField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontID int32 `protobuf:"varint,1,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
}

func (x *CThostFtdcQryFrontStatusField) Reset() {
	*x = CThostFtdcQryFrontStatusField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryFrontStatusField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryFrontStatusField) ProtoMessage() {}

func (x *CThostFtdcQryFrontStatusField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryFrontStatusField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryFrontStatusField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{91}
}

func (x *CThostFtdcQryFrontStatusField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

type CThostFtdcQryExchangeOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID  string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,3,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ExchangeID     string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID       string `protobuf:"bytes,5,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeOrderField) Reset() {
	*x = CThostFtdcQryExchangeOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeOrderField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{92}
}

func (x *CThostFtdcQryExchangeOrderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeOrderField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcQryExchangeOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeOrderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcQryOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryOrderActionField) Reset() {
	*x = CThostFtdcQryOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{93}
}

func (x *CThostFtdcQryOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryExchangeOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID      string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeID    string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID      string `protobuf:"bytes,4,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeOrderActionField) Reset() {
	*x = CThostFtdcQryExchangeOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{94}
}

func (x *CThostFtdcQryExchangeOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcQrySuperUserField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcQrySuperUserField) Reset() {
	*x = CThostFtdcQrySuperUserField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySuperUserField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySuperUserField) ProtoMessage() {}

func (x *CThostFtdcQrySuperUserField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySuperUserField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySuperUserField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{95}
}

func (x *CThostFtdcQrySuperUserField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcQryExchangeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryExchangeField) Reset() {
	*x = CThostFtdcQryExchangeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{96}
}

func (x *CThostFtdcQryExchangeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryProductField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID    string `protobuf:"bytes,1,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ProductClass int32  `protobuf:"varint,2,opt,name=ProductClass,proto3" json:"ProductClass,omitempty"`
	ExchangeID   string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryProductField) Reset() {
	*x = CThostFtdcQryProductField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryProductField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryProductField) ProtoMessage() {}

func (x *CThostFtdcQryProductField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryProductField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryProductField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{97}
}

func (x *CThostFtdcQryProductField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcQryProductField) GetProductClass() int32 {
	if x != nil {
		return x.ProductClass
	}
	return 0
}

func (x *CThostFtdcQryProductField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryInstrumentField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID   string `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID     string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,3,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ProductID      string `protobuf:"bytes,4,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
}

func (x *CThostFtdcQryInstrumentField) Reset() {
	*x = CThostFtdcQryInstrumentField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInstrumentField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInstrumentField) ProtoMessage() {}

func (x *CThostFtdcQryInstrumentField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInstrumentField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInstrumentField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{98}
}

func (x *CThostFtdcQryInstrumentField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type CThostFtdcQryDepthMarketDataField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID string `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryDepthMarketDataField) Reset() {
	*x = CThostFtdcQryDepthMarketDataField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryDepthMarketDataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryDepthMarketDataField) ProtoMessage() {}

func (x *CThostFtdcQryDepthMarketDataField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryDepthMarketDataField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryDepthMarketDataField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{99}
}

func (x *CThostFtdcQryDepthMarketDataField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryDepthMarketDataField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryBrokerUserField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcQryBrokerUserField) Reset() {
	*x = CThostFtdcQryBrokerUserField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBrokerUserField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBrokerUserField) ProtoMessage() {}

func (x *CThostFtdcQryBrokerUserField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBrokerUserField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBrokerUserField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{100}
}

func (x *CThostFtdcQryBrokerUserField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryBrokerUserField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcQryBrokerUserFunctionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcQryBrokerUserFunctionField) Reset() {
	*x = CThostFtdcQryBrokerUserFunctionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBrokerUserFunctionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBrokerUserFunctionField) ProtoMessage() {}

func (x *CThostFtdcQryBrokerUserFunctionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBrokerUserFunctionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBrokerUserFunctionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{101}
}

func (x *CThostFtdcQryBrokerUserFunctionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryBrokerUserFunctionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcQryTraderOfferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID string `protobuf:"bytes,2,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	TraderID      string `protobuf:"bytes,3,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryTraderOfferField) Reset() {
	*x = CThostFtdcQryTraderOfferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTraderOfferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTraderOfferField) ProtoMessage() {}

func (x *CThostFtdcQryTraderOfferField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTraderOfferField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTraderOfferField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{102}
}

func (x *CThostFtdcQryTraderOfferField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryTraderOfferField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryTraderOfferField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcQrySyncDepositField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	DepositSeqNo string `protobuf:"bytes,2,opt,name=DepositSeqNo,proto3" json:"DepositSeqNo,omitempty"`
}

func (x *CThostFtdcQrySyncDepositField) Reset() {
	*x = CThostFtdcQrySyncDepositField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySyncDepositField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySyncDepositField) ProtoMessage() {}

func (x *CThostFtdcQrySyncDepositField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySyncDepositField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySyncDepositField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{103}
}

func (x *CThostFtdcQrySyncDepositField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySyncDepositField) GetDepositSeqNo() string {
	if x != nil {
		return x.DepositSeqNo
	}
	return ""
}

type CThostFtdcQrySettlementInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	TradingDay string `protobuf:"bytes,3,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	AccountID  string `protobuf:"bytes,4,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID string `protobuf:"bytes,5,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcQrySettlementInfoField) Reset() {
	*x = CThostFtdcQrySettlementInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySettlementInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySettlementInfoField) ProtoMessage() {}

func (x *CThostFtdcQrySettlementInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySettlementInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySettlementInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{104}
}

func (x *CThostFtdcQrySettlementInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySettlementInfoField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQrySettlementInfoField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcQrySettlementInfoField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcQrySettlementInfoField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcQryExchangeMarginRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID string `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag    int32  `protobuf:"varint,3,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryExchangeMarginRateField) Reset() {
	*x = CThostFtdcQryExchangeMarginRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeMarginRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeMarginRateField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeMarginRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeMarginRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeMarginRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{105}
}

func (x *CThostFtdcQryExchangeMarginRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryExchangeMarginRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryExchangeMarginRateField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcQryExchangeMarginRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryExchangeMarginRateAdjustField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID string `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag    int32  `protobuf:"varint,3,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
}

func (x *CThostFtdcQryExchangeMarginRateAdjustField) Reset() {
	*x = CThostFtdcQryExchangeMarginRateAdjustField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeMarginRateAdjustField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeMarginRateAdjustField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeMarginRateAdjustField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeMarginRateAdjustField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeMarginRateAdjustField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{106}
}

func (x *CThostFtdcQryExchangeMarginRateAdjustField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryExchangeMarginRateAdjustField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryExchangeMarginRateAdjustField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

type CThostFtdcQryExchangeRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	FromCurrencyID string `protobuf:"bytes,2,opt,name=FromCurrencyID,proto3" json:"FromCurrencyID,omitempty"`
	ToCurrencyID   string `protobuf:"bytes,3,opt,name=ToCurrencyID,proto3" json:"ToCurrencyID,omitempty"`
}

func (x *CThostFtdcQryExchangeRateField) Reset() {
	*x = CThostFtdcQryExchangeRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeRateField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{107}
}

func (x *CThostFtdcQryExchangeRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryExchangeRateField) GetFromCurrencyID() string {
	if x != nil {
		return x.FromCurrencyID
	}
	return ""
}

func (x *CThostFtdcQryExchangeRateField) GetToCurrencyID() string {
	if x != nil {
		return x.ToCurrencyID
	}
	return ""
}

type CThostFtdcQrySyncFundMortgageField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	MortgageSeqNo string `protobuf:"bytes,2,opt,name=MortgageSeqNo,proto3" json:"MortgageSeqNo,omitempty"`
}

func (x *CThostFtdcQrySyncFundMortgageField) Reset() {
	*x = CThostFtdcQrySyncFundMortgageField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySyncFundMortgageField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySyncFundMortgageField) ProtoMessage() {}

func (x *CThostFtdcQrySyncFundMortgageField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySyncFundMortgageField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySyncFundMortgageField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{108}
}

func (x *CThostFtdcQrySyncFundMortgageField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySyncFundMortgageField) GetMortgageSeqNo() string {
	if x != nil {
		return x.MortgageSeqNo
	}
	return ""
}

type CThostFtdcQryHisOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID      string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID      string `protobuf:"bytes,5,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	InsertTimeStart string `protobuf:"bytes,6,opt,name=InsertTimeStart,proto3" json:"InsertTimeStart,omitempty"`
	InsertTimeEnd   string `protobuf:"bytes,7,opt,name=InsertTimeEnd,proto3" json:"InsertTimeEnd,omitempty"`
	TradingDay      string `protobuf:"bytes,8,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID    int32  `protobuf:"varint,9,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
}

func (x *CThostFtdcQryHisOrderField) Reset() {
	*x = CThostFtdcQryHisOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryHisOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryHisOrderField) ProtoMessage() {}

func (x *CThostFtdcQryHisOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryHisOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryHisOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{109}
}

func (x *CThostFtdcQryHisOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetInsertTimeStart() string {
	if x != nil {
		return x.InsertTimeStart
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetInsertTimeEnd() string {
	if x != nil {
		return x.InsertTimeEnd
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcQryHisOrderField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

type CThostFtdcOptionInstrMiniMarginField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID  string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID      string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	MinMargin     float64 `protobuf:"fixed64,5,opt,name=MinMargin,proto3" json:"MinMargin,omitempty"`
	ValueMethod   int32   `protobuf:"varint,6,opt,name=ValueMethod,proto3" json:"ValueMethod,omitempty"`
	IsRelative    int32   `protobuf:"varint,7,opt,name=IsRelative,proto3" json:"IsRelative,omitempty"`
}

func (x *CThostFtdcOptionInstrMiniMarginField) Reset() {
	*x = CThostFtdcOptionInstrMiniMarginField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionInstrMiniMarginField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionInstrMiniMarginField) ProtoMessage() {}

func (x *CThostFtdcOptionInstrMiniMarginField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionInstrMiniMarginField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionInstrMiniMarginField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{110}
}

func (x *CThostFtdcOptionInstrMiniMarginField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionInstrMiniMarginField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcOptionInstrMiniMarginField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionInstrMiniMarginField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionInstrMiniMarginField) GetMinMargin() float64 {
	if x != nil {
		return x.MinMargin
	}
	return 0
}

func (x *CThostFtdcOptionInstrMiniMarginField) GetValueMethod() int32 {
	if x != nil {
		return x.ValueMethod
	}
	return 0
}

func (x *CThostFtdcOptionInstrMiniMarginField) GetIsRelative() int32 {
	if x != nil {
		return x.IsRelative
	}
	return 0
}

type CThostFtdcOptionInstrMarginAdjustField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID              string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange             int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                  string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID                string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	SShortMarginRatioByMoney  float64 `protobuf:"fixed64,5,opt,name=SShortMarginRatioByMoney,proto3" json:"SShortMarginRatioByMoney,omitempty"`
	SShortMarginRatioByVolume float64 `protobuf:"fixed64,6,opt,name=SShortMarginRatioByVolume,proto3" json:"SShortMarginRatioByVolume,omitempty"`
	HShortMarginRatioByMoney  float64 `protobuf:"fixed64,7,opt,name=HShortMarginRatioByMoney,proto3" json:"HShortMarginRatioByMoney,omitempty"`
	HShortMarginRatioByVolume float64 `protobuf:"fixed64,8,opt,name=HShortMarginRatioByVolume,proto3" json:"HShortMarginRatioByVolume,omitempty"`
	AShortMarginRatioByMoney  float64 `protobuf:"fixed64,9,opt,name=AShortMarginRatioByMoney,proto3" json:"AShortMarginRatioByMoney,omitempty"`
	AShortMarginRatioByVolume float64 `protobuf:"fixed64,10,opt,name=AShortMarginRatioByVolume,proto3" json:"AShortMarginRatioByVolume,omitempty"`
	IsRelative                int32   `protobuf:"varint,11,opt,name=IsRelative,proto3" json:"IsRelative,omitempty"`
	MShortMarginRatioByMoney  float64 `protobuf:"fixed64,12,opt,name=MShortMarginRatioByMoney,proto3" json:"MShortMarginRatioByMoney,omitempty"`
	MShortMarginRatioByVolume float64 `protobuf:"fixed64,13,opt,name=MShortMarginRatioByVolume,proto3" json:"MShortMarginRatioByVolume,omitempty"`
}

func (x *CThostFtdcOptionInstrMarginAdjustField) Reset() {
	*x = CThostFtdcOptionInstrMarginAdjustField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionInstrMarginAdjustField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionInstrMarginAdjustField) ProtoMessage() {}

func (x *CThostFtdcOptionInstrMarginAdjustField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionInstrMarginAdjustField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionInstrMarginAdjustField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{111}
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetSShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.SShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetSShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.SShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetHShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.HShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetHShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.HShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetAShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.AShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetAShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.AShortMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetIsRelative() int32 {
	if x != nil {
		return x.IsRelative
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetMShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.MShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrMarginAdjustField) GetMShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.MShortMarginRatioByVolume
	}
	return 0
}

type CThostFtdcOptionInstrCommRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID            string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange           int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID              string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OpenRatioByMoney        float64 `protobuf:"fixed64,5,opt,name=OpenRatioByMoney,proto3" json:"OpenRatioByMoney,omitempty"`
	OpenRatioByVolume       float64 `protobuf:"fixed64,6,opt,name=OpenRatioByVolume,proto3" json:"OpenRatioByVolume,omitempty"`
	CloseRatioByMoney       float64 `protobuf:"fixed64,7,opt,name=CloseRatioByMoney,proto3" json:"CloseRatioByMoney,omitempty"`
	CloseRatioByVolume      float64 `protobuf:"fixed64,8,opt,name=CloseRatioByVolume,proto3" json:"CloseRatioByVolume,omitempty"`
	CloseTodayRatioByMoney  float64 `protobuf:"fixed64,9,opt,name=CloseTodayRatioByMoney,proto3" json:"CloseTodayRatioByMoney,omitempty"`
	CloseTodayRatioByVolume float64 `protobuf:"fixed64,10,opt,name=CloseTodayRatioByVolume,proto3" json:"CloseTodayRatioByVolume,omitempty"`
	StrikeRatioByMoney      float64 `protobuf:"fixed64,11,opt,name=StrikeRatioByMoney,proto3" json:"StrikeRatioByMoney,omitempty"`
	StrikeRatioByVolume     float64 `protobuf:"fixed64,12,opt,name=StrikeRatioByVolume,proto3" json:"StrikeRatioByVolume,omitempty"`
	ExchangeID              string  `protobuf:"bytes,13,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID            string  `protobuf:"bytes,14,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcOptionInstrCommRateField) Reset() {
	*x = CThostFtdcOptionInstrCommRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionInstrCommRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionInstrCommRateField) ProtoMessage() {}

func (x *CThostFtdcOptionInstrCommRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionInstrCommRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionInstrCommRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{112}
}

func (x *CThostFtdcOptionInstrCommRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionInstrCommRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionInstrCommRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionInstrCommRateField) GetOpenRatioByMoney() float64 {
	if x != nil {
		return x.OpenRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetOpenRatioByVolume() float64 {
	if x != nil {
		return x.OpenRatioByVolume
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetCloseRatioByMoney() float64 {
	if x != nil {
		return x.CloseRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetCloseRatioByVolume() float64 {
	if x != nil {
		return x.CloseRatioByVolume
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetCloseTodayRatioByMoney() float64 {
	if x != nil {
		return x.CloseTodayRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetCloseTodayRatioByVolume() float64 {
	if x != nil {
		return x.CloseTodayRatioByVolume
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetStrikeRatioByMoney() float64 {
	if x != nil {
		return x.StrikeRatioByMoney
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetStrikeRatioByVolume() float64 {
	if x != nil {
		return x.StrikeRatioByVolume
	}
	return 0
}

func (x *CThostFtdcOptionInstrCommRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcOptionInstrCommRateField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcOptionInstrTradeCostField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag       int32   `protobuf:"varint,4,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	FixedMargin     float64 `protobuf:"fixed64,5,opt,name=FixedMargin,proto3" json:"FixedMargin,omitempty"`
	MiniMargin      float64 `protobuf:"fixed64,6,opt,name=MiniMargin,proto3" json:"MiniMargin,omitempty"`
	Royalty         float64 `protobuf:"fixed64,7,opt,name=Royalty,proto3" json:"Royalty,omitempty"`
	ExchFixedMargin float64 `protobuf:"fixed64,8,opt,name=ExchFixedMargin,proto3" json:"ExchFixedMargin,omitempty"`
	ExchMiniMargin  float64 `protobuf:"fixed64,9,opt,name=ExchMiniMargin,proto3" json:"ExchMiniMargin,omitempty"`
	ExchangeID      string  `protobuf:"bytes,10,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID    string  `protobuf:"bytes,11,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcOptionInstrTradeCostField) Reset() {
	*x = CThostFtdcOptionInstrTradeCostField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionInstrTradeCostField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionInstrTradeCostField) ProtoMessage() {}

func (x *CThostFtdcOptionInstrTradeCostField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionInstrTradeCostField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionInstrTradeCostField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{113}
}

func (x *CThostFtdcOptionInstrTradeCostField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionInstrTradeCostField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionInstrTradeCostField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionInstrTradeCostField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradeCostField) GetFixedMargin() float64 {
	if x != nil {
		return x.FixedMargin
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradeCostField) GetMiniMargin() float64 {
	if x != nil {
		return x.MiniMargin
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradeCostField) GetRoyalty() float64 {
	if x != nil {
		return x.Royalty
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradeCostField) GetExchFixedMargin() float64 {
	if x != nil {
		return x.ExchFixedMargin
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradeCostField) GetExchMiniMargin() float64 {
	if x != nil {
		return x.ExchMiniMargin
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradeCostField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcOptionInstrTradeCostField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryOptionInstrTradeCostField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag       int32   `protobuf:"varint,4,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	InputPrice      float64 `protobuf:"fixed64,5,opt,name=InputPrice,proto3" json:"InputPrice,omitempty"`
	UnderlyingPrice float64 `protobuf:"fixed64,6,opt,name=UnderlyingPrice,proto3" json:"UnderlyingPrice,omitempty"`
	ExchangeID      string  `protobuf:"bytes,7,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID    string  `protobuf:"bytes,8,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryOptionInstrTradeCostField) Reset() {
	*x = CThostFtdcQryOptionInstrTradeCostField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryOptionInstrTradeCostField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryOptionInstrTradeCostField) ProtoMessage() {}

func (x *CThostFtdcQryOptionInstrTradeCostField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryOptionInstrTradeCostField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryOptionInstrTradeCostField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{114}
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetInputPrice() float64 {
	if x != nil {
		return x.InputPrice
	}
	return 0
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetUnderlyingPrice() float64 {
	if x != nil {
		return x.UnderlyingPrice
	}
	return 0
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrTradeCostField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryOptionInstrCommRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryOptionInstrCommRateField) Reset() {
	*x = CThostFtdcQryOptionInstrCommRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryOptionInstrCommRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryOptionInstrCommRateField) ProtoMessage() {}

func (x *CThostFtdcQryOptionInstrCommRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryOptionInstrCommRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryOptionInstrCommRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{115}
}

func (x *CThostFtdcQryOptionInstrCommRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrCommRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrCommRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrCommRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrCommRateField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcIndexPriceField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID string  `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ClosePrice   float64 `protobuf:"fixed64,3,opt,name=ClosePrice,proto3" json:"ClosePrice,omitempty"`
}

func (x *CThostFtdcIndexPriceField) Reset() {
	*x = CThostFtdcIndexPriceField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcIndexPriceField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcIndexPriceField) ProtoMessage() {}

func (x *CThostFtdcIndexPriceField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcIndexPriceField.ProtoReflect.Descriptor instead.
func (*CThostFtdcIndexPriceField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{116}
}

func (x *CThostFtdcIndexPriceField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcIndexPriceField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcIndexPriceField) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

type CThostFtdcInputExecOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID        string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExecOrderRef        string `protobuf:"bytes,4,opt,name=ExecOrderRef,proto3" json:"ExecOrderRef,omitempty"`
	UserID              string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Volume              int32  `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	RequestID           int32  `protobuf:"varint,7,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit        string `protobuf:"bytes,8,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OffsetFlag          int32  `protobuf:"varint,9,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag           int32  `protobuf:"varint,10,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ActionType          int32  `protobuf:"varint,11,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	PosiDirection       int32  `protobuf:"varint,12,opt,name=PosiDirection,proto3" json:"PosiDirection,omitempty"`
	ReservePositionFlag int32  `protobuf:"varint,13,opt,name=ReservePositionFlag,proto3" json:"ReservePositionFlag,omitempty"`
	CloseFlag           int32  `protobuf:"varint,14,opt,name=CloseFlag,proto3" json:"CloseFlag,omitempty"`
	ExchangeID          string `protobuf:"bytes,15,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID        string `protobuf:"bytes,16,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID           string `protobuf:"bytes,17,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID          string `protobuf:"bytes,18,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	ClientID            string `protobuf:"bytes,19,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IPAddress           string `protobuf:"bytes,20,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string `protobuf:"bytes,21,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputExecOrderField) Reset() {
	*x = CThostFtdcInputExecOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputExecOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputExecOrderField) ProtoMessage() {}

func (x *CThostFtdcInputExecOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputExecOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputExecOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{117}
}

func (x *CThostFtdcInputExecOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetExecOrderRef() string {
	if x != nil {
		return x.ExecOrderRef
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetPosiDirection() int32 {
	if x != nil {
		return x.PosiDirection
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetReservePositionFlag() int32 {
	if x != nil {
		return x.ReservePositionFlag
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetCloseFlag() int32 {
	if x != nil {
		return x.CloseFlag
	}
	return 0
}

func (x *CThostFtdcInputExecOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputExecOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcInputExecOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID           string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExecOrderActionRef int32  `protobuf:"varint,3,opt,name=ExecOrderActionRef,proto3" json:"ExecOrderActionRef,omitempty"`
	ExecOrderRef       string `protobuf:"bytes,4,opt,name=ExecOrderRef,proto3" json:"ExecOrderRef,omitempty"`
	RequestID          int32  `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID            int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID          int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID         string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExecOrderSysID     string `protobuf:"bytes,9,opt,name=ExecOrderSysID,proto3" json:"ExecOrderSysID,omitempty"`
	ActionFlag         int32  `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	UserID             string `protobuf:"bytes,11,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InstrumentID       string `protobuf:"bytes,12,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestUnitID       string `protobuf:"bytes,13,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress          string `protobuf:"bytes,14,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress         string `protobuf:"bytes,15,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputExecOrderActionField) Reset() {
	*x = CThostFtdcInputExecOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputExecOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputExecOrderActionField) ProtoMessage() {}

func (x *CThostFtdcInputExecOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputExecOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputExecOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{118}
}

func (x *CThostFtdcInputExecOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetExecOrderActionRef() int32 {
	if x != nil {
		return x.ExecOrderActionRef
	}
	return 0
}

func (x *CThostFtdcInputExecOrderActionField) GetExecOrderRef() string {
	if x != nil {
		return x.ExecOrderRef
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputExecOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcInputExecOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcInputExecOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetExecOrderSysID() string {
	if x != nil {
		return x.ExecOrderSysID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcInputExecOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputExecOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcExecOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID        string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExecOrderRef        string `protobuf:"bytes,4,opt,name=ExecOrderRef,proto3" json:"ExecOrderRef,omitempty"`
	UserID              string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Volume              int32  `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	RequestID           int32  `protobuf:"varint,7,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit        string `protobuf:"bytes,8,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OffsetFlag          int32  `protobuf:"varint,9,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag           int32  `protobuf:"varint,10,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ActionType          int32  `protobuf:"varint,11,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	PosiDirection       int32  `protobuf:"varint,12,opt,name=PosiDirection,proto3" json:"PosiDirection,omitempty"`
	ReservePositionFlag int32  `protobuf:"varint,13,opt,name=ReservePositionFlag,proto3" json:"ReservePositionFlag,omitempty"`
	CloseFlag           int32  `protobuf:"varint,14,opt,name=CloseFlag,proto3" json:"CloseFlag,omitempty"`
	ExecOrderLocalID    string `protobuf:"bytes,15,opt,name=ExecOrderLocalID,proto3" json:"ExecOrderLocalID,omitempty"`
	ExchangeID          string `protobuf:"bytes,16,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID       string `protobuf:"bytes,17,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID            string `protobuf:"bytes,18,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID      string `protobuf:"bytes,19,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID            string `protobuf:"bytes,20,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID           int32  `protobuf:"varint,21,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderSubmitStatus   int32  `protobuf:"varint,22,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	NotifySequence      int32  `protobuf:"varint,23,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay          string `protobuf:"bytes,24,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID        int32  `protobuf:"varint,25,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	ExecOrderSysID      string `protobuf:"bytes,26,opt,name=ExecOrderSysID,proto3" json:"ExecOrderSysID,omitempty"`
	InsertDate          string `protobuf:"bytes,27,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime          string `protobuf:"bytes,28,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	CancelTime          string `protobuf:"bytes,29,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	ExecResult          int32  `protobuf:"varint,30,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	ClearingPartID      string `protobuf:"bytes,31,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo          int32  `protobuf:"varint,32,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	FrontID             int32  `protobuf:"varint,33,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID           int32  `protobuf:"varint,34,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	UserProductInfo     string `protobuf:"bytes,35,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	StatusMsg           []byte `protobuf:"bytes,36,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	ActiveUserID        string `protobuf:"bytes,37,opt,name=ActiveUserID,proto3" json:"ActiveUserID,omitempty"`
	BrokerExecOrderSeq  int32  `protobuf:"varint,38,opt,name=BrokerExecOrderSeq,proto3" json:"BrokerExecOrderSeq,omitempty"`
	BranchID            string `protobuf:"bytes,39,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID        string `protobuf:"bytes,40,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID           string `protobuf:"bytes,41,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID          string `protobuf:"bytes,42,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	IPAddress           string `protobuf:"bytes,43,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string `protobuf:"bytes,44,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExecOrderField) Reset() {
	*x = CThostFtdcExecOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExecOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExecOrderField) ProtoMessage() {}

func (x *CThostFtdcExecOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExecOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExecOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{119}
}

func (x *CThostFtdcExecOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetExecOrderRef() string {
	if x != nil {
		return x.ExecOrderRef
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetPosiDirection() int32 {
	if x != nil {
		return x.PosiDirection
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetReservePositionFlag() int32 {
	if x != nil {
		return x.ReservePositionFlag
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetCloseFlag() int32 {
	if x != nil {
		return x.CloseFlag
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetExecOrderLocalID() string {
	if x != nil {
		return x.ExecOrderLocalID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetExecOrderSysID() string {
	if x != nil {
		return x.ExecOrderSysID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetExecResult() int32 {
	if x != nil {
		return x.ExecResult
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcExecOrderField) GetActiveUserID() string {
	if x != nil {
		return x.ActiveUserID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetBrokerExecOrderSeq() int32 {
	if x != nil {
		return x.BrokerExecOrderSeq
	}
	return 0
}

func (x *CThostFtdcExecOrderField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExecOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcExecOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID           string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExecOrderActionRef int32  `protobuf:"varint,3,opt,name=ExecOrderActionRef,proto3" json:"ExecOrderActionRef,omitempty"`
	ExecOrderRef       string `protobuf:"bytes,4,opt,name=ExecOrderRef,proto3" json:"ExecOrderRef,omitempty"`
	RequestID          int32  `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID            int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID          int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID         string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExecOrderSysID     string `protobuf:"bytes,9,opt,name=ExecOrderSysID,proto3" json:"ExecOrderSysID,omitempty"`
	ActionFlag         int32  `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	ActionDate         string `protobuf:"bytes,11,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime         string `protobuf:"bytes,12,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID           string `protobuf:"bytes,13,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID          int32  `protobuf:"varint,14,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	ExecOrderLocalID   string `protobuf:"bytes,15,opt,name=ExecOrderLocalID,proto3" json:"ExecOrderLocalID,omitempty"`
	ActionLocalID      string `protobuf:"bytes,16,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID      string `protobuf:"bytes,17,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID           string `protobuf:"bytes,18,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit       string `protobuf:"bytes,19,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus  int32  `protobuf:"varint,20,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID             string `protobuf:"bytes,21,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ActionType         int32  `protobuf:"varint,22,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	StatusMsg          []byte `protobuf:"bytes,23,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	InstrumentID       string `protobuf:"bytes,24,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BranchID           string `protobuf:"bytes,25,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID       string `protobuf:"bytes,26,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress          string `protobuf:"bytes,27,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress         string `protobuf:"bytes,28,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExecOrderActionField) Reset() {
	*x = CThostFtdcExecOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExecOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExecOrderActionField) ProtoMessage() {}

func (x *CThostFtdcExecOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExecOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExecOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{120}
}

func (x *CThostFtdcExecOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetExecOrderActionRef() int32 {
	if x != nil {
		return x.ExecOrderActionRef
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetExecOrderRef() string {
	if x != nil {
		return x.ExecOrderRef
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetExecOrderSysID() string {
	if x != nil {
		return x.ExecOrderSysID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetExecOrderLocalID() string {
	if x != nil {
		return x.ExecOrderLocalID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *CThostFtdcExecOrderActionField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcExecOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExecOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryExecOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID      string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExecOrderSysID  string `protobuf:"bytes,5,opt,name=ExecOrderSysID,proto3" json:"ExecOrderSysID,omitempty"`
	InsertTimeStart string `protobuf:"bytes,6,opt,name=InsertTimeStart,proto3" json:"InsertTimeStart,omitempty"`
	InsertTimeEnd   string `protobuf:"bytes,7,opt,name=InsertTimeEnd,proto3" json:"InsertTimeEnd,omitempty"`
}

func (x *CThostFtdcQryExecOrderField) Reset() {
	*x = CThostFtdcQryExecOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExecOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExecOrderField) ProtoMessage() {}

func (x *CThostFtdcQryExecOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExecOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExecOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{121}
}

func (x *CThostFtdcQryExecOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryExecOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryExecOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryExecOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExecOrderField) GetExecOrderSysID() string {
	if x != nil {
		return x.ExecOrderSysID
	}
	return ""
}

func (x *CThostFtdcQryExecOrderField) GetInsertTimeStart() string {
	if x != nil {
		return x.InsertTimeStart
	}
	return ""
}

func (x *CThostFtdcQryExecOrderField) GetInsertTimeEnd() string {
	if x != nil {
		return x.InsertTimeEnd
	}
	return ""
}

type CThostFtdcExchangeExecOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume              int32  `protobuf:"varint,1,opt,name=Volume,proto3" json:"Volume,omitempty"`
	RequestID           int32  `protobuf:"varint,2,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit        string `protobuf:"bytes,3,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OffsetFlag          int32  `protobuf:"varint,4,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag           int32  `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ActionType          int32  `protobuf:"varint,6,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	PosiDirection       int32  `protobuf:"varint,7,opt,name=PosiDirection,proto3" json:"PosiDirection,omitempty"`
	ReservePositionFlag int32  `protobuf:"varint,8,opt,name=ReservePositionFlag,proto3" json:"ReservePositionFlag,omitempty"`
	CloseFlag           int32  `protobuf:"varint,9,opt,name=CloseFlag,proto3" json:"CloseFlag,omitempty"`
	ExecOrderLocalID    string `protobuf:"bytes,10,opt,name=ExecOrderLocalID,proto3" json:"ExecOrderLocalID,omitempty"`
	ExchangeID          string `protobuf:"bytes,11,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID       string `protobuf:"bytes,12,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID            string `protobuf:"bytes,13,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID      string `protobuf:"bytes,14,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID            string `protobuf:"bytes,15,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID           int32  `protobuf:"varint,16,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderSubmitStatus   int32  `protobuf:"varint,17,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	NotifySequence      int32  `protobuf:"varint,18,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay          string `protobuf:"bytes,19,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID        int32  `protobuf:"varint,20,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	ExecOrderSysID      string `protobuf:"bytes,21,opt,name=ExecOrderSysID,proto3" json:"ExecOrderSysID,omitempty"`
	InsertDate          string `protobuf:"bytes,22,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime          string `protobuf:"bytes,23,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	CancelTime          string `protobuf:"bytes,24,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	ExecResult          int32  `protobuf:"varint,25,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	ClearingPartID      string `protobuf:"bytes,26,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo          int32  `protobuf:"varint,27,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	BranchID            string `protobuf:"bytes,28,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	IPAddress           string `protobuf:"bytes,29,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string `protobuf:"bytes,30,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeExecOrderField) Reset() {
	*x = CThostFtdcExchangeExecOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeExecOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeExecOrderField) ProtoMessage() {}

func (x *CThostFtdcExchangeExecOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeExecOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeExecOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{122}
}

func (x *CThostFtdcExchangeExecOrderField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetPosiDirection() int32 {
	if x != nil {
		return x.PosiDirection
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetReservePositionFlag() int32 {
	if x != nil {
		return x.ReservePositionFlag
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetCloseFlag() int32 {
	if x != nil {
		return x.CloseFlag
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetExecOrderLocalID() string {
	if x != nil {
		return x.ExecOrderLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetExecOrderSysID() string {
	if x != nil {
		return x.ExecOrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetExecResult() int32 {
	if x != nil {
		return x.ExecResult
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryExchangeExecOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID  string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,3,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ExchangeID     string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID       string `protobuf:"bytes,5,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeExecOrderField) Reset() {
	*x = CThostFtdcQryExchangeExecOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeExecOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeExecOrderField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeExecOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeExecOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeExecOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{123}
}

func (x *CThostFtdcQryExchangeExecOrderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeExecOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeExecOrderField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcQryExchangeExecOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeExecOrderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcQryExecOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryExecOrderActionField) Reset() {
	*x = CThostFtdcQryExecOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExecOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExecOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryExecOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExecOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExecOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{124}
}

func (x *CThostFtdcQryExecOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryExecOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryExecOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcExchangeExecOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID        string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExecOrderSysID    string `protobuf:"bytes,2,opt,name=ExecOrderSysID,proto3" json:"ExecOrderSysID,omitempty"`
	ActionFlag        int32  `protobuf:"varint,3,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	ActionDate        string `protobuf:"bytes,4,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string `protobuf:"bytes,5,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string `protobuf:"bytes,6,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32  `protobuf:"varint,7,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	ExecOrderLocalID  string `protobuf:"bytes,8,opt,name=ExecOrderLocalID,proto3" json:"ExecOrderLocalID,omitempty"`
	ActionLocalID     string `protobuf:"bytes,9,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string `protobuf:"bytes,10,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string `protobuf:"bytes,11,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string `protobuf:"bytes,12,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32  `protobuf:"varint,13,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ActionType        int32  `protobuf:"varint,15,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	BranchID          string `protobuf:"bytes,16,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	IPAddress         string `protobuf:"bytes,17,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string `protobuf:"bytes,18,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ExchangeInstID    string `protobuf:"bytes,19,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	Volume            int32  `protobuf:"varint,20,opt,name=Volume,proto3" json:"Volume,omitempty"`
}

func (x *CThostFtdcExchangeExecOrderActionField) Reset() {
	*x = CThostFtdcExchangeExecOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeExecOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeExecOrderActionField) ProtoMessage() {}

func (x *CThostFtdcExchangeExecOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeExecOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeExecOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{125}
}

func (x *CThostFtdcExchangeExecOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetExecOrderSysID() string {
	if x != nil {
		return x.ExecOrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderActionField) GetExecOrderLocalID() string {
	if x != nil {
		return x.ExecOrderLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *CThostFtdcExchangeExecOrderActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeExecOrderActionField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

type CThostFtdcQryExchangeExecOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID      string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeID    string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID      string `protobuf:"bytes,4,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeExecOrderActionField) Reset() {
	*x = CThostFtdcQryExchangeExecOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeExecOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeExecOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeExecOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeExecOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeExecOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{126}
}

func (x *CThostFtdcQryExchangeExecOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeExecOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeExecOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeExecOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcErrExecOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID        string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExecOrderRef        string `protobuf:"bytes,4,opt,name=ExecOrderRef,proto3" json:"ExecOrderRef,omitempty"`
	UserID              string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Volume              int32  `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	RequestID           int32  `protobuf:"varint,7,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit        string `protobuf:"bytes,8,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OffsetFlag          int32  `protobuf:"varint,9,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag           int32  `protobuf:"varint,10,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ActionType          int32  `protobuf:"varint,11,opt,name=ActionType,proto3" json:"ActionType,omitempty"`
	PosiDirection       int32  `protobuf:"varint,12,opt,name=PosiDirection,proto3" json:"PosiDirection,omitempty"`
	ReservePositionFlag int32  `protobuf:"varint,13,opt,name=ReservePositionFlag,proto3" json:"ReservePositionFlag,omitempty"`
	CloseFlag           int32  `protobuf:"varint,14,opt,name=CloseFlag,proto3" json:"CloseFlag,omitempty"`
	ExchangeID          string `protobuf:"bytes,15,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID        string `protobuf:"bytes,16,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID           string `protobuf:"bytes,17,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID          string `protobuf:"bytes,18,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	ClientID            string `protobuf:"bytes,19,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IPAddress           string `protobuf:"bytes,20,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string `protobuf:"bytes,21,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ErrorID             int32  `protobuf:"varint,22,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg            []byte `protobuf:"bytes,23,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcErrExecOrderField) Reset() {
	*x = CThostFtdcErrExecOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcErrExecOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcErrExecOrderField) ProtoMessage() {}

func (x *CThostFtdcErrExecOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcErrExecOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcErrExecOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{127}
}

func (x *CThostFtdcErrExecOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetExecOrderRef() string {
	if x != nil {
		return x.ExecOrderRef
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetActionType() int32 {
	if x != nil {
		return x.ActionType
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetPosiDirection() int32 {
	if x != nil {
		return x.PosiDirection
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetReservePositionFlag() int32 {
	if x != nil {
		return x.ReservePositionFlag
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetCloseFlag() int32 {
	if x != nil {
		return x.CloseFlag
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcErrExecOrderField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcErrExecOrderField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcQryErrExecOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQryErrExecOrderField) Reset() {
	*x = CThostFtdcQryErrExecOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryErrExecOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryErrExecOrderField) ProtoMessage() {}

func (x *CThostFtdcQryErrExecOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryErrExecOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryErrExecOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{128}
}

func (x *CThostFtdcQryErrExecOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryErrExecOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcErrExecOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID           string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExecOrderActionRef int32  `protobuf:"varint,3,opt,name=ExecOrderActionRef,proto3" json:"ExecOrderActionRef,omitempty"`
	ExecOrderRef       string `protobuf:"bytes,4,opt,name=ExecOrderRef,proto3" json:"ExecOrderRef,omitempty"`
	RequestID          int32  `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID            int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID          int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID         string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExecOrderSysID     string `protobuf:"bytes,9,opt,name=ExecOrderSysID,proto3" json:"ExecOrderSysID,omitempty"`
	ActionFlag         int32  `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	UserID             string `protobuf:"bytes,11,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InstrumentID       string `protobuf:"bytes,12,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestUnitID       string `protobuf:"bytes,13,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress          string `protobuf:"bytes,14,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress         string `protobuf:"bytes,15,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ErrorID            int32  `protobuf:"varint,16,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg           []byte `protobuf:"bytes,17,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcErrExecOrderActionField) Reset() {
	*x = CThostFtdcErrExecOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcErrExecOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcErrExecOrderActionField) ProtoMessage() {}

func (x *CThostFtdcErrExecOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcErrExecOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcErrExecOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{129}
}

func (x *CThostFtdcErrExecOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetExecOrderActionRef() int32 {
	if x != nil {
		return x.ExecOrderActionRef
	}
	return 0
}

func (x *CThostFtdcErrExecOrderActionField) GetExecOrderRef() string {
	if x != nil {
		return x.ExecOrderRef
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcErrExecOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcErrExecOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcErrExecOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetExecOrderSysID() string {
	if x != nil {
		return x.ExecOrderSysID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcErrExecOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcErrExecOrderActionField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcErrExecOrderActionField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcQryErrExecOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQryErrExecOrderActionField) Reset() {
	*x = CThostFtdcQryErrExecOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryErrExecOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryErrExecOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryErrExecOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryErrExecOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryErrExecOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{130}
}

func (x *CThostFtdcQryErrExecOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryErrExecOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcOptionInstrTradingRightField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID  string `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange int32  `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID      string `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	Direction     int32  `protobuf:"varint,5,opt,name=Direction,proto3" json:"Direction,omitempty"`
	TradingRight  int32  `protobuf:"varint,6,opt,name=TradingRight,proto3" json:"TradingRight,omitempty"`
}

func (x *CThostFtdcOptionInstrTradingRightField) Reset() {
	*x = CThostFtdcOptionInstrTradingRightField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionInstrTradingRightField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionInstrTradingRightField) ProtoMessage() {}

func (x *CThostFtdcOptionInstrTradingRightField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionInstrTradingRightField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionInstrTradingRightField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{131}
}

func (x *CThostFtdcOptionInstrTradingRightField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionInstrTradingRightField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradingRightField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionInstrTradingRightField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionInstrTradingRightField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcOptionInstrTradingRightField) GetTradingRight() int32 {
	if x != nil {
		return x.TradingRight
	}
	return 0
}

type CThostFtdcQryOptionInstrTradingRightField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	Direction    int32  `protobuf:"varint,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
}

func (x *CThostFtdcQryOptionInstrTradingRightField) Reset() {
	*x = CThostFtdcQryOptionInstrTradingRightField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryOptionInstrTradingRightField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryOptionInstrTradingRightField) ProtoMessage() {}

func (x *CThostFtdcQryOptionInstrTradingRightField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryOptionInstrTradingRightField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryOptionInstrTradingRightField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{132}
}

func (x *CThostFtdcQryOptionInstrTradingRightField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrTradingRightField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrTradingRightField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryOptionInstrTradingRightField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

type CThostFtdcInputForQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ForQuoteRef  string `protobuf:"bytes,4,opt,name=ForQuoteRef,proto3" json:"ForQuoteRef,omitempty"`
	UserID       string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ExchangeID   string `protobuf:"bytes,6,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,7,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress    string `protobuf:"bytes,8,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress   string `protobuf:"bytes,9,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputForQuoteField) Reset() {
	*x = CThostFtdcInputForQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputForQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputForQuoteField) ProtoMessage() {}

func (x *CThostFtdcInputForQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputForQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputForQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{133}
}

func (x *CThostFtdcInputForQuoteField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetForQuoteRef() string {
	if x != nil {
		return x.ForQuoteRef
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputForQuoteField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcForQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID         string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID       string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID     string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ForQuoteRef      string `protobuf:"bytes,4,opt,name=ForQuoteRef,proto3" json:"ForQuoteRef,omitempty"`
	UserID           string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ForQuoteLocalID  string `protobuf:"bytes,6,opt,name=ForQuoteLocalID,proto3" json:"ForQuoteLocalID,omitempty"`
	ExchangeID       string `protobuf:"bytes,7,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID    string `protobuf:"bytes,8,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID         string `protobuf:"bytes,9,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID   string `protobuf:"bytes,10,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID         string `protobuf:"bytes,11,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID        int32  `protobuf:"varint,12,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	InsertDate       string `protobuf:"bytes,13,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime       string `protobuf:"bytes,14,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	ForQuoteStatus   int32  `protobuf:"varint,15,opt,name=ForQuoteStatus,proto3" json:"ForQuoteStatus,omitempty"`
	FrontID          int32  `protobuf:"varint,16,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID        int32  `protobuf:"varint,17,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	StatusMsg        []byte `protobuf:"bytes,18,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	ActiveUserID     string `protobuf:"bytes,19,opt,name=ActiveUserID,proto3" json:"ActiveUserID,omitempty"`
	BrokerForQutoSeq int32  `protobuf:"varint,20,opt,name=BrokerForQutoSeq,proto3" json:"BrokerForQutoSeq,omitempty"`
	InvestUnitID     string `protobuf:"bytes,21,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress        string `protobuf:"bytes,22,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress       string `protobuf:"bytes,23,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcForQuoteField) Reset() {
	*x = CThostFtdcForQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcForQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcForQuoteField) ProtoMessage() {}

func (x *CThostFtdcForQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcForQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcForQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{134}
}

func (x *CThostFtdcForQuoteField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetForQuoteRef() string {
	if x != nil {
		return x.ForQuoteRef
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetForQuoteLocalID() string {
	if x != nil {
		return x.ForQuoteLocalID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcForQuoteField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetForQuoteStatus() int32 {
	if x != nil {
		return x.ForQuoteStatus
	}
	return 0
}

func (x *CThostFtdcForQuoteField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcForQuoteField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcForQuoteField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcForQuoteField) GetActiveUserID() string {
	if x != nil {
		return x.ActiveUserID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetBrokerForQutoSeq() int32 {
	if x != nil {
		return x.BrokerForQutoSeq
	}
	return 0
}

func (x *CThostFtdcForQuoteField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcForQuoteField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryForQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID      string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InsertTimeStart string `protobuf:"bytes,5,opt,name=InsertTimeStart,proto3" json:"InsertTimeStart,omitempty"`
	InsertTimeEnd   string `protobuf:"bytes,6,opt,name=InsertTimeEnd,proto3" json:"InsertTimeEnd,omitempty"`
	InvestUnitID    string `protobuf:"bytes,7,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryForQuoteField) Reset() {
	*x = CThostFtdcQryForQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryForQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryForQuoteField) ProtoMessage() {}

func (x *CThostFtdcQryForQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryForQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryForQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{135}
}

func (x *CThostFtdcQryForQuoteField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryForQuoteField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryForQuoteField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryForQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryForQuoteField) GetInsertTimeStart() string {
	if x != nil {
		return x.InsertTimeStart
	}
	return ""
}

func (x *CThostFtdcQryForQuoteField) GetInsertTimeEnd() string {
	if x != nil {
		return x.InsertTimeEnd
	}
	return ""
}

func (x *CThostFtdcQryForQuoteField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcExchangeForQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForQuoteLocalID string `protobuf:"bytes,1,opt,name=ForQuoteLocalID,proto3" json:"ForQuoteLocalID,omitempty"`
	ExchangeID      string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID   string `protobuf:"bytes,3,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID        string `protobuf:"bytes,4,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID  string `protobuf:"bytes,5,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID        string `protobuf:"bytes,6,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID       int32  `protobuf:"varint,7,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	InsertDate      string `protobuf:"bytes,8,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime      string `protobuf:"bytes,9,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	ForQuoteStatus  int32  `protobuf:"varint,10,opt,name=ForQuoteStatus,proto3" json:"ForQuoteStatus,omitempty"`
	IPAddress       string `protobuf:"bytes,11,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress      string `protobuf:"bytes,12,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeForQuoteField) Reset() {
	*x = CThostFtdcExchangeForQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeForQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeForQuoteField) ProtoMessage() {}

func (x *CThostFtdcExchangeForQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeForQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeForQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{136}
}

func (x *CThostFtdcExchangeForQuoteField) GetForQuoteLocalID() string {
	if x != nil {
		return x.ForQuoteLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeForQuoteField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetForQuoteStatus() int32 {
	if x != nil {
		return x.ForQuoteStatus
	}
	return 0
}

func (x *CThostFtdcExchangeForQuoteField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeForQuoteField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryExchangeForQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID  string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,3,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ExchangeID     string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID       string `protobuf:"bytes,5,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeForQuoteField) Reset() {
	*x = CThostFtdcQryExchangeForQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeForQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeForQuoteField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeForQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeForQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeForQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{137}
}

func (x *CThostFtdcQryExchangeForQuoteField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeForQuoteField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeForQuoteField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcQryExchangeForQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeForQuoteField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcInputQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID  string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	QuoteRef      string  `protobuf:"bytes,4,opt,name=QuoteRef,proto3" json:"QuoteRef,omitempty"`
	UserID        string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AskPrice      float64 `protobuf:"fixed64,6,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	BidPrice      float64 `protobuf:"fixed64,7,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	AskVolume     int32   `protobuf:"varint,8,opt,name=AskVolume,proto3" json:"AskVolume,omitempty"`
	BidVolume     int32   `protobuf:"varint,9,opt,name=BidVolume,proto3" json:"BidVolume,omitempty"`
	RequestID     int32   `protobuf:"varint,10,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit  string  `protobuf:"bytes,11,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	AskOffsetFlag int32   `protobuf:"varint,12,opt,name=AskOffsetFlag,proto3" json:"AskOffsetFlag,omitempty"`
	BidOffsetFlag int32   `protobuf:"varint,13,opt,name=BidOffsetFlag,proto3" json:"BidOffsetFlag,omitempty"`
	AskHedgeFlag  int32   `protobuf:"varint,14,opt,name=AskHedgeFlag,proto3" json:"AskHedgeFlag,omitempty"`
	BidHedgeFlag  int32   `protobuf:"varint,15,opt,name=BidHedgeFlag,proto3" json:"BidHedgeFlag,omitempty"`
	AskOrderRef   string  `protobuf:"bytes,16,opt,name=AskOrderRef,proto3" json:"AskOrderRef,omitempty"`
	BidOrderRef   string  `protobuf:"bytes,17,opt,name=BidOrderRef,proto3" json:"BidOrderRef,omitempty"`
	ForQuoteSysID string  `protobuf:"bytes,18,opt,name=ForQuoteSysID,proto3" json:"ForQuoteSysID,omitempty"`
	ExchangeID    string  `protobuf:"bytes,19,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID  string  `protobuf:"bytes,20,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	ClientID      string  `protobuf:"bytes,21,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IPAddress     string  `protobuf:"bytes,22,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress    string  `protobuf:"bytes,23,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputQuoteField) Reset() {
	*x = CThostFtdcInputQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputQuoteField) ProtoMessage() {}

func (x *CThostFtdcInputQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{138}
}

func (x *CThostFtdcInputQuoteField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetQuoteRef() string {
	if x != nil {
		return x.QuoteRef
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetAskVolume() int32 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetBidVolume() int32 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetAskOffsetFlag() int32 {
	if x != nil {
		return x.AskOffsetFlag
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetBidOffsetFlag() int32 {
	if x != nil {
		return x.BidOffsetFlag
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetAskHedgeFlag() int32 {
	if x != nil {
		return x.AskHedgeFlag
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetBidHedgeFlag() int32 {
	if x != nil {
		return x.BidHedgeFlag
	}
	return 0
}

func (x *CThostFtdcInputQuoteField) GetAskOrderRef() string {
	if x != nil {
		return x.AskOrderRef
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetBidOrderRef() string {
	if x != nil {
		return x.BidOrderRef
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetForQuoteSysID() string {
	if x != nil {
		return x.ForQuoteSysID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputQuoteField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcInputQuoteActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	QuoteActionRef int32  `protobuf:"varint,3,opt,name=QuoteActionRef,proto3" json:"QuoteActionRef,omitempty"`
	QuoteRef       string `protobuf:"bytes,4,opt,name=QuoteRef,proto3" json:"QuoteRef,omitempty"`
	RequestID      int32  `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID        int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID      int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID     string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	QuoteSysID     string `protobuf:"bytes,9,opt,name=QuoteSysID,proto3" json:"QuoteSysID,omitempty"`
	ActionFlag     int32  `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	UserID         string `protobuf:"bytes,11,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InstrumentID   string `protobuf:"bytes,12,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestUnitID   string `protobuf:"bytes,13,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	ClientID       string `protobuf:"bytes,14,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IPAddress      string `protobuf:"bytes,15,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress     string `protobuf:"bytes,16,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputQuoteActionField) Reset() {
	*x = CThostFtdcInputQuoteActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputQuoteActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputQuoteActionField) ProtoMessage() {}

func (x *CThostFtdcInputQuoteActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputQuoteActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputQuoteActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{139}
}

func (x *CThostFtdcInputQuoteActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetQuoteActionRef() int32 {
	if x != nil {
		return x.QuoteActionRef
	}
	return 0
}

func (x *CThostFtdcInputQuoteActionField) GetQuoteRef() string {
	if x != nil {
		return x.QuoteRef
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputQuoteActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcInputQuoteActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcInputQuoteActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetQuoteSysID() string {
	if x != nil {
		return x.QuoteSysID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcInputQuoteActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputQuoteActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID        string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID      string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	QuoteRef          string  `protobuf:"bytes,4,opt,name=QuoteRef,proto3" json:"QuoteRef,omitempty"`
	UserID            string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AskPrice          float64 `protobuf:"fixed64,6,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	BidPrice          float64 `protobuf:"fixed64,7,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	AskVolume         int32   `protobuf:"varint,8,opt,name=AskVolume,proto3" json:"AskVolume,omitempty"`
	BidVolume         int32   `protobuf:"varint,9,opt,name=BidVolume,proto3" json:"BidVolume,omitempty"`
	RequestID         int32   `protobuf:"varint,10,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit      string  `protobuf:"bytes,11,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	AskOffsetFlag     int32   `protobuf:"varint,12,opt,name=AskOffsetFlag,proto3" json:"AskOffsetFlag,omitempty"`
	BidOffsetFlag     int32   `protobuf:"varint,13,opt,name=BidOffsetFlag,proto3" json:"BidOffsetFlag,omitempty"`
	AskHedgeFlag      int32   `protobuf:"varint,14,opt,name=AskHedgeFlag,proto3" json:"AskHedgeFlag,omitempty"`
	BidHedgeFlag      int32   `protobuf:"varint,15,opt,name=BidHedgeFlag,proto3" json:"BidHedgeFlag,omitempty"`
	QuoteLocalID      string  `protobuf:"bytes,16,opt,name=QuoteLocalID,proto3" json:"QuoteLocalID,omitempty"`
	ExchangeID        string  `protobuf:"bytes,17,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID     string  `protobuf:"bytes,18,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string  `protobuf:"bytes,19,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID    string  `protobuf:"bytes,20,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID          string  `protobuf:"bytes,21,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32   `protobuf:"varint,22,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	NotifySequence    int32   `protobuf:"varint,23,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	OrderSubmitStatus int32   `protobuf:"varint,24,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	TradingDay        string  `protobuf:"bytes,25,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID      int32   `protobuf:"varint,26,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	QuoteSysID        string  `protobuf:"bytes,27,opt,name=QuoteSysID,proto3" json:"QuoteSysID,omitempty"`
	InsertDate        string  `protobuf:"bytes,28,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime        string  `protobuf:"bytes,29,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	CancelTime        string  `protobuf:"bytes,30,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	QuoteStatus       int32   `protobuf:"varint,31,opt,name=QuoteStatus,proto3" json:"QuoteStatus,omitempty"`
	ClearingPartID    string  `protobuf:"bytes,32,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo        int32   `protobuf:"varint,33,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	AskOrderSysID     string  `protobuf:"bytes,34,opt,name=AskOrderSysID,proto3" json:"AskOrderSysID,omitempty"`
	BidOrderSysID     string  `protobuf:"bytes,35,opt,name=BidOrderSysID,proto3" json:"BidOrderSysID,omitempty"`
	FrontID           int32   `protobuf:"varint,36,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID         int32   `protobuf:"varint,37,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	UserProductInfo   string  `protobuf:"bytes,38,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	StatusMsg         []byte  `protobuf:"bytes,39,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	ActiveUserID      string  `protobuf:"bytes,40,opt,name=ActiveUserID,proto3" json:"ActiveUserID,omitempty"`
	BrokerQuoteSeq    int32   `protobuf:"varint,41,opt,name=BrokerQuoteSeq,proto3" json:"BrokerQuoteSeq,omitempty"`
	AskOrderRef       string  `protobuf:"bytes,42,opt,name=AskOrderRef,proto3" json:"AskOrderRef,omitempty"`
	BidOrderRef       string  `protobuf:"bytes,43,opt,name=BidOrderRef,proto3" json:"BidOrderRef,omitempty"`
	ForQuoteSysID     string  `protobuf:"bytes,44,opt,name=ForQuoteSysID,proto3" json:"ForQuoteSysID,omitempty"`
	BranchID          string  `protobuf:"bytes,45,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID      string  `protobuf:"bytes,46,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID         string  `protobuf:"bytes,47,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID        string  `protobuf:"bytes,48,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	IPAddress         string  `protobuf:"bytes,49,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string  `protobuf:"bytes,50,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcQuoteField) Reset() {
	*x = CThostFtdcQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQuoteField) ProtoMessage() {}

func (x *CThostFtdcQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{140}
}

func (x *CThostFtdcQuoteField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetQuoteRef() string {
	if x != nil {
		return x.QuoteRef
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetAskVolume() int32 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetBidVolume() int32 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetAskOffsetFlag() int32 {
	if x != nil {
		return x.AskOffsetFlag
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetBidOffsetFlag() int32 {
	if x != nil {
		return x.BidOffsetFlag
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetAskHedgeFlag() int32 {
	if x != nil {
		return x.AskHedgeFlag
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetBidHedgeFlag() int32 {
	if x != nil {
		return x.BidHedgeFlag
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetQuoteLocalID() string {
	if x != nil {
		return x.QuoteLocalID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetQuoteSysID() string {
	if x != nil {
		return x.QuoteSysID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetQuoteStatus() int32 {
	if x != nil {
		return x.QuoteStatus
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetAskOrderSysID() string {
	if x != nil {
		return x.AskOrderSysID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetBidOrderSysID() string {
	if x != nil {
		return x.BidOrderSysID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcQuoteField) GetActiveUserID() string {
	if x != nil {
		return x.ActiveUserID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetBrokerQuoteSeq() int32 {
	if x != nil {
		return x.BrokerQuoteSeq
	}
	return 0
}

func (x *CThostFtdcQuoteField) GetAskOrderRef() string {
	if x != nil {
		return x.AskOrderRef
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetBidOrderRef() string {
	if x != nil {
		return x.BidOrderRef
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetForQuoteSysID() string {
	if x != nil {
		return x.ForQuoteSysID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcQuoteField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQuoteActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID        string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	QuoteActionRef    int32  `protobuf:"varint,3,opt,name=QuoteActionRef,proto3" json:"QuoteActionRef,omitempty"`
	QuoteRef          string `protobuf:"bytes,4,opt,name=QuoteRef,proto3" json:"QuoteRef,omitempty"`
	RequestID         int32  `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID           int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID         int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID        string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	QuoteSysID        string `protobuf:"bytes,9,opt,name=QuoteSysID,proto3" json:"QuoteSysID,omitempty"`
	ActionFlag        int32  `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	ActionDate        string `protobuf:"bytes,11,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string `protobuf:"bytes,12,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string `protobuf:"bytes,13,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32  `protobuf:"varint,14,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	QuoteLocalID      string `protobuf:"bytes,15,opt,name=QuoteLocalID,proto3" json:"QuoteLocalID,omitempty"`
	ActionLocalID     string `protobuf:"bytes,16,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string `protobuf:"bytes,17,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string `protobuf:"bytes,18,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string `protobuf:"bytes,19,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32  `protobuf:"varint,20,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string `protobuf:"bytes,21,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StatusMsg         []byte `protobuf:"bytes,22,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	InstrumentID      string `protobuf:"bytes,23,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BranchID          string `protobuf:"bytes,24,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID      string `protobuf:"bytes,25,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress         string `protobuf:"bytes,26,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string `protobuf:"bytes,27,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcQuoteActionField) Reset() {
	*x = CThostFtdcQuoteActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQuoteActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQuoteActionField) ProtoMessage() {}

func (x *CThostFtdcQuoteActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQuoteActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQuoteActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{141}
}

func (x *CThostFtdcQuoteActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetQuoteActionRef() int32 {
	if x != nil {
		return x.QuoteActionRef
	}
	return 0
}

func (x *CThostFtdcQuoteActionField) GetQuoteRef() string {
	if x != nil {
		return x.QuoteRef
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcQuoteActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcQuoteActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcQuoteActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetQuoteSysID() string {
	if x != nil {
		return x.QuoteSysID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcQuoteActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcQuoteActionField) GetQuoteLocalID() string {
	if x != nil {
		return x.QuoteLocalID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcQuoteActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcQuoteActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcQuoteActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID      string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	QuoteSysID      string `protobuf:"bytes,5,opt,name=QuoteSysID,proto3" json:"QuoteSysID,omitempty"`
	InsertTimeStart string `protobuf:"bytes,6,opt,name=InsertTimeStart,proto3" json:"InsertTimeStart,omitempty"`
	InsertTimeEnd   string `protobuf:"bytes,7,opt,name=InsertTimeEnd,proto3" json:"InsertTimeEnd,omitempty"`
	InvestUnitID    string `protobuf:"bytes,8,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryQuoteField) Reset() {
	*x = CThostFtdcQryQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryQuoteField) ProtoMessage() {}

func (x *CThostFtdcQryQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{142}
}

func (x *CThostFtdcQryQuoteField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryQuoteField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryQuoteField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryQuoteField) GetQuoteSysID() string {
	if x != nil {
		return x.QuoteSysID
	}
	return ""
}

func (x *CThostFtdcQryQuoteField) GetInsertTimeStart() string {
	if x != nil {
		return x.InsertTimeStart
	}
	return ""
}

func (x *CThostFtdcQryQuoteField) GetInsertTimeEnd() string {
	if x != nil {
		return x.InsertTimeEnd
	}
	return ""
}

func (x *CThostFtdcQryQuoteField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcExchangeQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AskPrice          float64 `protobuf:"fixed64,1,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	BidPrice          float64 `protobuf:"fixed64,2,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	AskVolume         int32   `protobuf:"varint,3,opt,name=AskVolume,proto3" json:"AskVolume,omitempty"`
	BidVolume         int32   `protobuf:"varint,4,opt,name=BidVolume,proto3" json:"BidVolume,omitempty"`
	RequestID         int32   `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit      string  `protobuf:"bytes,6,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	AskOffsetFlag     int32   `protobuf:"varint,7,opt,name=AskOffsetFlag,proto3" json:"AskOffsetFlag,omitempty"`
	BidOffsetFlag     int32   `protobuf:"varint,8,opt,name=BidOffsetFlag,proto3" json:"BidOffsetFlag,omitempty"`
	AskHedgeFlag      int32   `protobuf:"varint,9,opt,name=AskHedgeFlag,proto3" json:"AskHedgeFlag,omitempty"`
	BidHedgeFlag      int32   `protobuf:"varint,10,opt,name=BidHedgeFlag,proto3" json:"BidHedgeFlag,omitempty"`
	QuoteLocalID      string  `protobuf:"bytes,11,opt,name=QuoteLocalID,proto3" json:"QuoteLocalID,omitempty"`
	ExchangeID        string  `protobuf:"bytes,12,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID     string  `protobuf:"bytes,13,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string  `protobuf:"bytes,14,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID    string  `protobuf:"bytes,15,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID          string  `protobuf:"bytes,16,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32   `protobuf:"varint,17,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	NotifySequence    int32   `protobuf:"varint,18,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	OrderSubmitStatus int32   `protobuf:"varint,19,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	TradingDay        string  `protobuf:"bytes,20,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID      int32   `protobuf:"varint,21,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	QuoteSysID        string  `protobuf:"bytes,22,opt,name=QuoteSysID,proto3" json:"QuoteSysID,omitempty"`
	InsertDate        string  `protobuf:"bytes,23,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime        string  `protobuf:"bytes,24,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	CancelTime        string  `protobuf:"bytes,25,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	QuoteStatus       int32   `protobuf:"varint,26,opt,name=QuoteStatus,proto3" json:"QuoteStatus,omitempty"`
	ClearingPartID    string  `protobuf:"bytes,27,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo        int32   `protobuf:"varint,28,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	AskOrderSysID     string  `protobuf:"bytes,29,opt,name=AskOrderSysID,proto3" json:"AskOrderSysID,omitempty"`
	BidOrderSysID     string  `protobuf:"bytes,30,opt,name=BidOrderSysID,proto3" json:"BidOrderSysID,omitempty"`
	ForQuoteSysID     string  `protobuf:"bytes,31,opt,name=ForQuoteSysID,proto3" json:"ForQuoteSysID,omitempty"`
	BranchID          string  `protobuf:"bytes,32,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	IPAddress         string  `protobuf:"bytes,33,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string  `protobuf:"bytes,34,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeQuoteField) Reset() {
	*x = CThostFtdcExchangeQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeQuoteField) ProtoMessage() {}

func (x *CThostFtdcExchangeQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{143}
}

func (x *CThostFtdcExchangeQuoteField) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetAskVolume() int32 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetBidVolume() int32 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetAskOffsetFlag() int32 {
	if x != nil {
		return x.AskOffsetFlag
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetBidOffsetFlag() int32 {
	if x != nil {
		return x.BidOffsetFlag
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetAskHedgeFlag() int32 {
	if x != nil {
		return x.AskHedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetBidHedgeFlag() int32 {
	if x != nil {
		return x.BidHedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetQuoteLocalID() string {
	if x != nil {
		return x.QuoteLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetQuoteSysID() string {
	if x != nil {
		return x.QuoteSysID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetQuoteStatus() int32 {
	if x != nil {
		return x.QuoteStatus
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteField) GetAskOrderSysID() string {
	if x != nil {
		return x.AskOrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetBidOrderSysID() string {
	if x != nil {
		return x.BidOrderSysID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetForQuoteSysID() string {
	if x != nil {
		return x.ForQuoteSysID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryExchangeQuoteField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID  string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,3,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ExchangeID     string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID       string `protobuf:"bytes,5,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeQuoteField) Reset() {
	*x = CThostFtdcQryExchangeQuoteField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeQuoteField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeQuoteField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeQuoteField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeQuoteField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeQuoteField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{144}
}

func (x *CThostFtdcQryExchangeQuoteField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeQuoteField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeQuoteField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcQryExchangeQuoteField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeQuoteField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcQryQuoteActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryQuoteActionField) Reset() {
	*x = CThostFtdcQryQuoteActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryQuoteActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryQuoteActionField) ProtoMessage() {}

func (x *CThostFtdcQryQuoteActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryQuoteActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryQuoteActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{145}
}

func (x *CThostFtdcQryQuoteActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryQuoteActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryQuoteActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcExchangeQuoteActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID        string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	QuoteSysID        string `protobuf:"bytes,2,opt,name=QuoteSysID,proto3" json:"QuoteSysID,omitempty"`
	ActionFlag        int32  `protobuf:"varint,3,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	ActionDate        string `protobuf:"bytes,4,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string `protobuf:"bytes,5,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string `protobuf:"bytes,6,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32  `protobuf:"varint,7,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	QuoteLocalID      string `protobuf:"bytes,8,opt,name=QuoteLocalID,proto3" json:"QuoteLocalID,omitempty"`
	ActionLocalID     string `protobuf:"bytes,9,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string `protobuf:"bytes,10,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string `protobuf:"bytes,11,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string `protobuf:"bytes,12,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32  `protobuf:"varint,13,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IPAddress         string `protobuf:"bytes,15,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string `protobuf:"bytes,16,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeQuoteActionField) Reset() {
	*x = CThostFtdcExchangeQuoteActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeQuoteActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeQuoteActionField) ProtoMessage() {}

func (x *CThostFtdcExchangeQuoteActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeQuoteActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeQuoteActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{146}
}

func (x *CThostFtdcExchangeQuoteActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetQuoteSysID() string {
	if x != nil {
		return x.QuoteSysID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteActionField) GetQuoteLocalID() string {
	if x != nil {
		return x.QuoteLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcExchangeQuoteActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeQuoteActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryExchangeQuoteActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID      string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeID    string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID      string `protobuf:"bytes,4,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeQuoteActionField) Reset() {
	*x = CThostFtdcQryExchangeQuoteActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeQuoteActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeQuoteActionField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeQuoteActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeQuoteActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeQuoteActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{147}
}

func (x *CThostFtdcQryExchangeQuoteActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeQuoteActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeQuoteActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeQuoteActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcOptionInstrDeltaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID  string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID      string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	Delta         float64 `protobuf:"fixed64,5,opt,name=Delta,proto3" json:"Delta,omitempty"`
}

func (x *CThostFtdcOptionInstrDeltaField) Reset() {
	*x = CThostFtdcOptionInstrDeltaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionInstrDeltaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionInstrDeltaField) ProtoMessage() {}

func (x *CThostFtdcOptionInstrDeltaField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionInstrDeltaField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionInstrDeltaField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{148}
}

func (x *CThostFtdcOptionInstrDeltaField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionInstrDeltaField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcOptionInstrDeltaField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionInstrDeltaField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionInstrDeltaField) GetDelta() float64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

type CThostFtdcForQuoteRspField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay    string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	InstrumentID  string `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ForQuoteSysID string `protobuf:"bytes,3,opt,name=ForQuoteSysID,proto3" json:"ForQuoteSysID,omitempty"`
	ForQuoteTime  string `protobuf:"bytes,4,opt,name=ForQuoteTime,proto3" json:"ForQuoteTime,omitempty"`
	ActionDay     string `protobuf:"bytes,5,opt,name=ActionDay,proto3" json:"ActionDay,omitempty"`
	ExchangeID    string `protobuf:"bytes,6,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcForQuoteRspField) Reset() {
	*x = CThostFtdcForQuoteRspField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcForQuoteRspField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcForQuoteRspField) ProtoMessage() {}

func (x *CThostFtdcForQuoteRspField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcForQuoteRspField.ProtoReflect.Descriptor instead.
func (*CThostFtdcForQuoteRspField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{149}
}

func (x *CThostFtdcForQuoteRspField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcForQuoteRspField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcForQuoteRspField) GetForQuoteSysID() string {
	if x != nil {
		return x.ForQuoteSysID
	}
	return ""
}

func (x *CThostFtdcForQuoteRspField) GetForQuoteTime() string {
	if x != nil {
		return x.ForQuoteTime
	}
	return ""
}

func (x *CThostFtdcForQuoteRspField) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

func (x *CThostFtdcForQuoteRspField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcStrikeOffsetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID  string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID      string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	Offset        float64 `protobuf:"fixed64,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	OffsetType    int32   `protobuf:"varint,6,opt,name=OffsetType,proto3" json:"OffsetType,omitempty"`
}

func (x *CThostFtdcStrikeOffsetField) Reset() {
	*x = CThostFtdcStrikeOffsetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcStrikeOffsetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcStrikeOffsetField) ProtoMessage() {}

func (x *CThostFtdcStrikeOffsetField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcStrikeOffsetField.ProtoReflect.Descriptor instead.
func (*CThostFtdcStrikeOffsetField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{150}
}

func (x *CThostFtdcStrikeOffsetField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcStrikeOffsetField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcStrikeOffsetField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcStrikeOffsetField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcStrikeOffsetField) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *CThostFtdcStrikeOffsetField) GetOffsetType() int32 {
	if x != nil {
		return x.OffsetType
	}
	return 0
}

type CThostFtdcQryStrikeOffsetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcQryStrikeOffsetField) Reset() {
	*x = CThostFtdcQryStrikeOffsetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryStrikeOffsetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryStrikeOffsetField) ProtoMessage() {}

func (x *CThostFtdcQryStrikeOffsetField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryStrikeOffsetField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryStrikeOffsetField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{151}
}

func (x *CThostFtdcQryStrikeOffsetField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryStrikeOffsetField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryStrikeOffsetField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcInputBatchOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OrderActionRef int32  `protobuf:"varint,3,opt,name=OrderActionRef,proto3" json:"OrderActionRef,omitempty"`
	RequestID      int32  `protobuf:"varint,4,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID        int32  `protobuf:"varint,5,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID      int32  `protobuf:"varint,6,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID     string `protobuf:"bytes,7,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	UserID         string `protobuf:"bytes,8,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InvestUnitID   string `protobuf:"bytes,9,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress      string `protobuf:"bytes,10,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress     string `protobuf:"bytes,11,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputBatchOrderActionField) Reset() {
	*x = CThostFtdcInputBatchOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputBatchOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputBatchOrderActionField) ProtoMessage() {}

func (x *CThostFtdcInputBatchOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputBatchOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputBatchOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{152}
}

func (x *CThostFtdcInputBatchOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputBatchOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputBatchOrderActionField) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *CThostFtdcInputBatchOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputBatchOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcInputBatchOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcInputBatchOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputBatchOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputBatchOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputBatchOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputBatchOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcBatchOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID        string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OrderActionRef    int32  `protobuf:"varint,3,opt,name=OrderActionRef,proto3" json:"OrderActionRef,omitempty"`
	RequestID         int32  `protobuf:"varint,4,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID           int32  `protobuf:"varint,5,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID         int32  `protobuf:"varint,6,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID        string `protobuf:"bytes,7,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ActionDate        string `protobuf:"bytes,8,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string `protobuf:"bytes,9,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string `protobuf:"bytes,10,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32  `protobuf:"varint,11,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	ActionLocalID     string `protobuf:"bytes,12,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string `protobuf:"bytes,13,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string `protobuf:"bytes,14,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string `protobuf:"bytes,15,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32  `protobuf:"varint,16,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string `protobuf:"bytes,17,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StatusMsg         []byte `protobuf:"bytes,18,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	InvestUnitID      string `protobuf:"bytes,19,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress         string `protobuf:"bytes,20,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string `protobuf:"bytes,21,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcBatchOrderActionField) Reset() {
	*x = CThostFtdcBatchOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBatchOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBatchOrderActionField) ProtoMessage() {}

func (x *CThostFtdcBatchOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBatchOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBatchOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{153}
}

func (x *CThostFtdcBatchOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *CThostFtdcBatchOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcBatchOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcBatchOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcBatchOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcBatchOrderActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcBatchOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcBatchOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcBatchOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcExchangeBatchOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID        string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ActionDate        string `protobuf:"bytes,2,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string `protobuf:"bytes,3,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string `protobuf:"bytes,4,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32  `protobuf:"varint,5,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	ActionLocalID     string `protobuf:"bytes,6,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string `protobuf:"bytes,7,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string `protobuf:"bytes,8,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string `protobuf:"bytes,9,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32  `protobuf:"varint,10,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string `protobuf:"bytes,11,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IPAddress         string `protobuf:"bytes,12,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string `protobuf:"bytes,13,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeBatchOrderActionField) Reset() {
	*x = CThostFtdcExchangeBatchOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeBatchOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeBatchOrderActionField) ProtoMessage() {}

func (x *CThostFtdcExchangeBatchOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeBatchOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeBatchOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{154}
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeBatchOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryBatchOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryBatchOrderActionField) Reset() {
	*x = CThostFtdcQryBatchOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBatchOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBatchOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryBatchOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBatchOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBatchOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{155}
}

func (x *CThostFtdcQryBatchOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryBatchOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryBatchOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcCombInstrumentGuardField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID string  `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	GuarantRatio float64 `protobuf:"fixed64,3,opt,name=GuarantRatio,proto3" json:"GuarantRatio,omitempty"`
	ExchangeID   string  `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcCombInstrumentGuardField) Reset() {
	*x = CThostFtdcCombInstrumentGuardField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCombInstrumentGuardField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCombInstrumentGuardField) ProtoMessage() {}

func (x *CThostFtdcCombInstrumentGuardField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCombInstrumentGuardField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCombInstrumentGuardField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{156}
}

func (x *CThostFtdcCombInstrumentGuardField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcCombInstrumentGuardField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcCombInstrumentGuardField) GetGuarantRatio() float64 {
	if x != nil {
		return x.GuarantRatio
	}
	return 0
}

func (x *CThostFtdcCombInstrumentGuardField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryCombInstrumentGuardField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID string `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryCombInstrumentGuardField) Reset() {
	*x = CThostFtdcQryCombInstrumentGuardField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryCombInstrumentGuardField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryCombInstrumentGuardField) ProtoMessage() {}

func (x *CThostFtdcQryCombInstrumentGuardField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryCombInstrumentGuardField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryCombInstrumentGuardField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{157}
}

func (x *CThostFtdcQryCombInstrumentGuardField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryCombInstrumentGuardField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryCombInstrumentGuardField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcInputCombActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID  string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	CombActionRef string `protobuf:"bytes,4,opt,name=CombActionRef,proto3" json:"CombActionRef,omitempty"`
	UserID        string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Direction     int32  `protobuf:"varint,6,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Volume        int32  `protobuf:"varint,7,opt,name=Volume,proto3" json:"Volume,omitempty"`
	CombDirection int32  `protobuf:"varint,8,opt,name=CombDirection,proto3" json:"CombDirection,omitempty"`
	HedgeFlag     int32  `protobuf:"varint,9,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ExchangeID    string `protobuf:"bytes,10,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	IPAddress     string `protobuf:"bytes,11,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress    string `protobuf:"bytes,12,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	InvestUnitID  string `protobuf:"bytes,13,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcInputCombActionField) Reset() {
	*x = CThostFtdcInputCombActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputCombActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputCombActionField) ProtoMessage() {}

func (x *CThostFtdcInputCombActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputCombActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputCombActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{158}
}

func (x *CThostFtdcInputCombActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetCombActionRef() string {
	if x != nil {
		return x.CombActionRef
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcInputCombActionField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcInputCombActionField) GetCombDirection() int32 {
	if x != nil {
		return x.CombDirection
	}
	return 0
}

func (x *CThostFtdcInputCombActionField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInputCombActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcInputCombActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcCombActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID      string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	CombActionRef   string `protobuf:"bytes,4,opt,name=CombActionRef,proto3" json:"CombActionRef,omitempty"`
	UserID          string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Direction       int32  `protobuf:"varint,6,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Volume          int32  `protobuf:"varint,7,opt,name=Volume,proto3" json:"Volume,omitempty"`
	CombDirection   int32  `protobuf:"varint,8,opt,name=CombDirection,proto3" json:"CombDirection,omitempty"`
	HedgeFlag       int32  `protobuf:"varint,9,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ActionLocalID   string `protobuf:"bytes,10,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ExchangeID      string `protobuf:"bytes,11,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID   string `protobuf:"bytes,12,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID        string `protobuf:"bytes,13,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID  string `protobuf:"bytes,14,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID        string `protobuf:"bytes,15,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID       int32  `protobuf:"varint,16,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	ActionStatus    int32  `protobuf:"varint,17,opt,name=ActionStatus,proto3" json:"ActionStatus,omitempty"`
	NotifySequence  int32  `protobuf:"varint,18,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay      string `protobuf:"bytes,19,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID    int32  `protobuf:"varint,20,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	SequenceNo      int32  `protobuf:"varint,21,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	FrontID         int32  `protobuf:"varint,22,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID       int32  `protobuf:"varint,23,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	UserProductInfo string `protobuf:"bytes,24,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	StatusMsg       []byte `protobuf:"bytes,25,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	IPAddress       string `protobuf:"bytes,26,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress      string `protobuf:"bytes,27,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ComTradeID      string `protobuf:"bytes,28,opt,name=ComTradeID,proto3" json:"ComTradeID,omitempty"`
	BranchID        string `protobuf:"bytes,29,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID    string `protobuf:"bytes,30,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcCombActionField) Reset() {
	*x = CThostFtdcCombActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCombActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCombActionField) ProtoMessage() {}

func (x *CThostFtdcCombActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCombActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCombActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{159}
}

func (x *CThostFtdcCombActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetCombActionRef() string {
	if x != nil {
		return x.CombActionRef
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetCombDirection() int32 {
	if x != nil {
		return x.CombDirection
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetActionStatus() int32 {
	if x != nil {
		return x.ActionStatus
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcCombActionField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcCombActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetComTradeID() string {
	if x != nil {
		return x.ComTradeID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcCombActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryCombActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryCombActionField) Reset() {
	*x = CThostFtdcQryCombActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryCombActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryCombActionField) ProtoMessage() {}

func (x *CThostFtdcQryCombActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryCombActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryCombActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{160}
}

func (x *CThostFtdcQryCombActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryCombActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryCombActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryCombActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryCombActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcExchangeCombActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction      int32  `protobuf:"varint,1,opt,name=Direction,proto3" json:"Direction,omitempty"`
	Volume         int32  `protobuf:"varint,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	CombDirection  int32  `protobuf:"varint,3,opt,name=CombDirection,proto3" json:"CombDirection,omitempty"`
	HedgeFlag      int32  `protobuf:"varint,4,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ActionLocalID  string `protobuf:"bytes,5,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ExchangeID     string `protobuf:"bytes,6,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID  string `protobuf:"bytes,7,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string `protobuf:"bytes,8,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,9,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID       string `protobuf:"bytes,10,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID      int32  `protobuf:"varint,11,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	ActionStatus   int32  `protobuf:"varint,12,opt,name=ActionStatus,proto3" json:"ActionStatus,omitempty"`
	NotifySequence int32  `protobuf:"varint,13,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay     string `protobuf:"bytes,14,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID   int32  `protobuf:"varint,15,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	SequenceNo     int32  `protobuf:"varint,16,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	IPAddress      string `protobuf:"bytes,17,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress     string `protobuf:"bytes,18,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ComTradeID     string `protobuf:"bytes,19,opt,name=ComTradeID,proto3" json:"ComTradeID,omitempty"`
	BranchID       string `protobuf:"bytes,20,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
}

func (x *CThostFtdcExchangeCombActionField) Reset() {
	*x = CThostFtdcExchangeCombActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeCombActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeCombActionField) ProtoMessage() {}

func (x *CThostFtdcExchangeCombActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeCombActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeCombActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{161}
}

func (x *CThostFtdcExchangeCombActionField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetCombDirection() int32 {
	if x != nil {
		return x.CombDirection
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetActionStatus() int32 {
	if x != nil {
		return x.ActionStatus
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExchangeCombActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetComTradeID() string {
	if x != nil {
		return x.ComTradeID
	}
	return ""
}

func (x *CThostFtdcExchangeCombActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

type CThostFtdcQryExchangeCombActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantID  string `protobuf:"bytes,1,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID       string `protobuf:"bytes,2,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,3,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	ExchangeID     string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID       string `protobuf:"bytes,5,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryExchangeCombActionField) Reset() {
	*x = CThostFtdcQryExchangeCombActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeCombActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeCombActionField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeCombActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeCombActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeCombActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{162}
}

func (x *CThostFtdcQryExchangeCombActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryExchangeCombActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcQryExchangeCombActionField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcQryExchangeCombActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryExchangeCombActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcProductExchRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID       string  `protobuf:"bytes,1,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	QuoteCurrencyID string  `protobuf:"bytes,2,opt,name=QuoteCurrencyID,proto3" json:"QuoteCurrencyID,omitempty"`
	ExchangeRate    float64 `protobuf:"fixed64,3,opt,name=ExchangeRate,proto3" json:"ExchangeRate,omitempty"`
	ExchangeID      string  `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcProductExchRateField) Reset() {
	*x = CThostFtdcProductExchRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcProductExchRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcProductExchRateField) ProtoMessage() {}

func (x *CThostFtdcProductExchRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcProductExchRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcProductExchRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{163}
}

func (x *CThostFtdcProductExchRateField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcProductExchRateField) GetQuoteCurrencyID() string {
	if x != nil {
		return x.QuoteCurrencyID
	}
	return ""
}

func (x *CThostFtdcProductExchRateField) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

func (x *CThostFtdcProductExchRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryProductExchRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ExchangeID string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryProductExchRateField) Reset() {
	*x = CThostFtdcQryProductExchRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryProductExchRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryProductExchRateField) ProtoMessage() {}

func (x *CThostFtdcQryProductExchRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryProductExchRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryProductExchRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{164}
}

func (x *CThostFtdcQryProductExchRateField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcQryProductExchRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcQryForQuoteParamField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID string `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryForQuoteParamField) Reset() {
	*x = CThostFtdcQryForQuoteParamField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryForQuoteParamField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryForQuoteParamField) ProtoMessage() {}

func (x *CThostFtdcQryForQuoteParamField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryForQuoteParamField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryForQuoteParamField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{165}
}

func (x *CThostFtdcQryForQuoteParamField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryForQuoteParamField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryForQuoteParamField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcForQuoteParamField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InstrumentID  string  `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID    string  `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	LastPrice     float64 `protobuf:"fixed64,4,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`
	PriceInterval float64 `protobuf:"fixed64,5,opt,name=PriceInterval,proto3" json:"PriceInterval,omitempty"`
}

func (x *CThostFtdcForQuoteParamField) Reset() {
	*x = CThostFtdcForQuoteParamField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcForQuoteParamField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcForQuoteParamField) ProtoMessage() {}

func (x *CThostFtdcForQuoteParamField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcForQuoteParamField.ProtoReflect.Descriptor instead.
func (*CThostFtdcForQuoteParamField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{166}
}

func (x *CThostFtdcForQuoteParamField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcForQuoteParamField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcForQuoteParamField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcForQuoteParamField) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *CThostFtdcForQuoteParamField) GetPriceInterval() float64 {
	if x != nil {
		return x.PriceInterval
	}
	return 0
}

type CThostFtdcMMOptionInstrCommRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID            string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange           int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID              string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OpenRatioByMoney        float64 `protobuf:"fixed64,5,opt,name=OpenRatioByMoney,proto3" json:"OpenRatioByMoney,omitempty"`
	OpenRatioByVolume       float64 `protobuf:"fixed64,6,opt,name=OpenRatioByVolume,proto3" json:"OpenRatioByVolume,omitempty"`
	CloseRatioByMoney       float64 `protobuf:"fixed64,7,opt,name=CloseRatioByMoney,proto3" json:"CloseRatioByMoney,omitempty"`
	CloseRatioByVolume      float64 `protobuf:"fixed64,8,opt,name=CloseRatioByVolume,proto3" json:"CloseRatioByVolume,omitempty"`
	CloseTodayRatioByMoney  float64 `protobuf:"fixed64,9,opt,name=CloseTodayRatioByMoney,proto3" json:"CloseTodayRatioByMoney,omitempty"`
	CloseTodayRatioByVolume float64 `protobuf:"fixed64,10,opt,name=CloseTodayRatioByVolume,proto3" json:"CloseTodayRatioByVolume,omitempty"`
	StrikeRatioByMoney      float64 `protobuf:"fixed64,11,opt,name=StrikeRatioByMoney,proto3" json:"StrikeRatioByMoney,omitempty"`
	StrikeRatioByVolume     float64 `protobuf:"fixed64,12,opt,name=StrikeRatioByVolume,proto3" json:"StrikeRatioByVolume,omitempty"`
}

func (x *CThostFtdcMMOptionInstrCommRateField) Reset() {
	*x = CThostFtdcMMOptionInstrCommRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMMOptionInstrCommRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMMOptionInstrCommRateField) ProtoMessage() {}

func (x *CThostFtdcMMOptionInstrCommRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMMOptionInstrCommRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMMOptionInstrCommRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{167}
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetOpenRatioByMoney() float64 {
	if x != nil {
		return x.OpenRatioByMoney
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetOpenRatioByVolume() float64 {
	if x != nil {
		return x.OpenRatioByVolume
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetCloseRatioByMoney() float64 {
	if x != nil {
		return x.CloseRatioByMoney
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetCloseRatioByVolume() float64 {
	if x != nil {
		return x.CloseRatioByVolume
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetCloseTodayRatioByMoney() float64 {
	if x != nil {
		return x.CloseTodayRatioByMoney
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetCloseTodayRatioByVolume() float64 {
	if x != nil {
		return x.CloseTodayRatioByVolume
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetStrikeRatioByMoney() float64 {
	if x != nil {
		return x.StrikeRatioByMoney
	}
	return 0
}

func (x *CThostFtdcMMOptionInstrCommRateField) GetStrikeRatioByVolume() float64 {
	if x != nil {
		return x.StrikeRatioByVolume
	}
	return 0
}

type CThostFtdcQryMMOptionInstrCommRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcQryMMOptionInstrCommRateField) Reset() {
	*x = CThostFtdcQryMMOptionInstrCommRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryMMOptionInstrCommRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryMMOptionInstrCommRateField) ProtoMessage() {}

func (x *CThostFtdcQryMMOptionInstrCommRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryMMOptionInstrCommRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryMMOptionInstrCommRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{168}
}

func (x *CThostFtdcQryMMOptionInstrCommRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryMMOptionInstrCommRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryMMOptionInstrCommRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcMMInstrumentCommissionRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID            string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange           int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID              string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OpenRatioByMoney        float64 `protobuf:"fixed64,5,opt,name=OpenRatioByMoney,proto3" json:"OpenRatioByMoney,omitempty"`
	OpenRatioByVolume       float64 `protobuf:"fixed64,6,opt,name=OpenRatioByVolume,proto3" json:"OpenRatioByVolume,omitempty"`
	CloseRatioByMoney       float64 `protobuf:"fixed64,7,opt,name=CloseRatioByMoney,proto3" json:"CloseRatioByMoney,omitempty"`
	CloseRatioByVolume      float64 `protobuf:"fixed64,8,opt,name=CloseRatioByVolume,proto3" json:"CloseRatioByVolume,omitempty"`
	CloseTodayRatioByMoney  float64 `protobuf:"fixed64,9,opt,name=CloseTodayRatioByMoney,proto3" json:"CloseTodayRatioByMoney,omitempty"`
	CloseTodayRatioByVolume float64 `protobuf:"fixed64,10,opt,name=CloseTodayRatioByVolume,proto3" json:"CloseTodayRatioByVolume,omitempty"`
}

func (x *CThostFtdcMMInstrumentCommissionRateField) Reset() {
	*x = CThostFtdcMMInstrumentCommissionRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMMInstrumentCommissionRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMMInstrumentCommissionRateField) ProtoMessage() {}

func (x *CThostFtdcMMInstrumentCommissionRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMMInstrumentCommissionRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMMInstrumentCommissionRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{169}
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetOpenRatioByMoney() float64 {
	if x != nil {
		return x.OpenRatioByMoney
	}
	return 0
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetOpenRatioByVolume() float64 {
	if x != nil {
		return x.OpenRatioByVolume
	}
	return 0
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetCloseRatioByMoney() float64 {
	if x != nil {
		return x.CloseRatioByMoney
	}
	return 0
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetCloseRatioByVolume() float64 {
	if x != nil {
		return x.CloseRatioByVolume
	}
	return 0
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetCloseTodayRatioByMoney() float64 {
	if x != nil {
		return x.CloseTodayRatioByMoney
	}
	return 0
}

func (x *CThostFtdcMMInstrumentCommissionRateField) GetCloseTodayRatioByVolume() float64 {
	if x != nil {
		return x.CloseTodayRatioByVolume
	}
	return 0
}

type CThostFtdcQryMMInstrumentCommissionRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcQryMMInstrumentCommissionRateField) Reset() {
	*x = CThostFtdcQryMMInstrumentCommissionRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryMMInstrumentCommissionRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryMMInstrumentCommissionRateField) ProtoMessage() {}

func (x *CThostFtdcQryMMInstrumentCommissionRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryMMInstrumentCommissionRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryMMInstrumentCommissionRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{170}
}

func (x *CThostFtdcQryMMInstrumentCommissionRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryMMInstrumentCommissionRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryMMInstrumentCommissionRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcInstrumentOrderCommRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID            string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange           int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID              string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	HedgeFlag               int32   `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	OrderCommByVolume       float64 `protobuf:"fixed64,6,opt,name=OrderCommByVolume,proto3" json:"OrderCommByVolume,omitempty"`
	OrderActionCommByVolume float64 `protobuf:"fixed64,7,opt,name=OrderActionCommByVolume,proto3" json:"OrderActionCommByVolume,omitempty"`
	ExchangeID              string  `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID            string  `protobuf:"bytes,9,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcInstrumentOrderCommRateField) Reset() {
	*x = CThostFtdcInstrumentOrderCommRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentOrderCommRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentOrderCommRateField) ProtoMessage() {}

func (x *CThostFtdcInstrumentOrderCommRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentOrderCommRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentOrderCommRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{171}
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetOrderCommByVolume() float64 {
	if x != nil {
		return x.OrderCommByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetOrderActionCommByVolume() float64 {
	if x != nil {
		return x.OrderActionCommByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInstrumentOrderCommRateField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryInstrumentOrderCommRateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcQryInstrumentOrderCommRateField) Reset() {
	*x = CThostFtdcQryInstrumentOrderCommRateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInstrumentOrderCommRateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInstrumentOrderCommRateField) ProtoMessage() {}

func (x *CThostFtdcQryInstrumentOrderCommRateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInstrumentOrderCommRateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInstrumentOrderCommRateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{172}
}

func (x *CThostFtdcQryInstrumentOrderCommRateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentOrderCommRateField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentOrderCommRateField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcTradeParamField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	TradeParamID    int32  `protobuf:"varint,2,opt,name=TradeParamID,proto3" json:"TradeParamID,omitempty"`
	TradeParamValue string `protobuf:"bytes,3,opt,name=TradeParamValue,proto3" json:"TradeParamValue,omitempty"`
	Memo            string `protobuf:"bytes,4,opt,name=Memo,proto3" json:"Memo,omitempty"`
}

func (x *CThostFtdcTradeParamField) Reset() {
	*x = CThostFtdcTradeParamField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradeParamField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradeParamField) ProtoMessage() {}

func (x *CThostFtdcTradeParamField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradeParamField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradeParamField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{173}
}

func (x *CThostFtdcTradeParamField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradeParamField) GetTradeParamID() int32 {
	if x != nil {
		return x.TradeParamID
	}
	return 0
}

func (x *CThostFtdcTradeParamField) GetTradeParamValue() string {
	if x != nil {
		return x.TradeParamValue
	}
	return ""
}

func (x *CThostFtdcTradeParamField) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type CThostFtdcInstrumentMarginRateULField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID             string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestorRange            int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID                 string  `protobuf:"bytes,3,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID               string  `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	HedgeFlag                int32   `protobuf:"varint,5,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	LongMarginRatioByMoney   float64 `protobuf:"fixed64,6,opt,name=LongMarginRatioByMoney,proto3" json:"LongMarginRatioByMoney,omitempty"`
	LongMarginRatioByVolume  float64 `protobuf:"fixed64,7,opt,name=LongMarginRatioByVolume,proto3" json:"LongMarginRatioByVolume,omitempty"`
	ShortMarginRatioByMoney  float64 `protobuf:"fixed64,8,opt,name=ShortMarginRatioByMoney,proto3" json:"ShortMarginRatioByMoney,omitempty"`
	ShortMarginRatioByVolume float64 `protobuf:"fixed64,9,opt,name=ShortMarginRatioByVolume,proto3" json:"ShortMarginRatioByVolume,omitempty"`
}

func (x *CThostFtdcInstrumentMarginRateULField) Reset() {
	*x = CThostFtdcInstrumentMarginRateULField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentMarginRateULField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentMarginRateULField) ProtoMessage() {}

func (x *CThostFtdcInstrumentMarginRateULField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentMarginRateULField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentMarginRateULField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{174}
}

func (x *CThostFtdcInstrumentMarginRateULField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateULField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateULField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateULField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInstrumentMarginRateULField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateULField) GetLongMarginRatioByMoney() float64 {
	if x != nil {
		return x.LongMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateULField) GetLongMarginRatioByVolume() float64 {
	if x != nil {
		return x.LongMarginRatioByVolume
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateULField) GetShortMarginRatioByMoney() float64 {
	if x != nil {
		return x.ShortMarginRatioByMoney
	}
	return 0
}

func (x *CThostFtdcInstrumentMarginRateULField) GetShortMarginRatioByVolume() float64 {
	if x != nil {
		return x.ShortMarginRatioByVolume
	}
	return 0
}

type CThostFtdcFutureLimitPosiParamField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorRange  int32  `protobuf:"varint,1,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	BrokerID       string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ProductID      string `protobuf:"bytes,4,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	SpecOpenVolume int32  `protobuf:"varint,5,opt,name=SpecOpenVolume,proto3" json:"SpecOpenVolume,omitempty"`
	ArbiOpenVolume int32  `protobuf:"varint,6,opt,name=ArbiOpenVolume,proto3" json:"ArbiOpenVolume,omitempty"`
	OpenVolume     int32  `protobuf:"varint,7,opt,name=OpenVolume,proto3" json:"OpenVolume,omitempty"`
}

func (x *CThostFtdcFutureLimitPosiParamField) Reset() {
	*x = CThostFtdcFutureLimitPosiParamField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcFutureLimitPosiParamField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcFutureLimitPosiParamField) ProtoMessage() {}

func (x *CThostFtdcFutureLimitPosiParamField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcFutureLimitPosiParamField.ProtoReflect.Descriptor instead.
func (*CThostFtdcFutureLimitPosiParamField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{175}
}

func (x *CThostFtdcFutureLimitPosiParamField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcFutureLimitPosiParamField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcFutureLimitPosiParamField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcFutureLimitPosiParamField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcFutureLimitPosiParamField) GetSpecOpenVolume() int32 {
	if x != nil {
		return x.SpecOpenVolume
	}
	return 0
}

func (x *CThostFtdcFutureLimitPosiParamField) GetArbiOpenVolume() int32 {
	if x != nil {
		return x.ArbiOpenVolume
	}
	return 0
}

func (x *CThostFtdcFutureLimitPosiParamField) GetOpenVolume() int32 {
	if x != nil {
		return x.OpenVolume
	}
	return 0
}

type CThostFtdcLoginForbiddenIPField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAddress string `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
}

func (x *CThostFtdcLoginForbiddenIPField) Reset() {
	*x = CThostFtdcLoginForbiddenIPField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcLoginForbiddenIPField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcLoginForbiddenIPField) ProtoMessage() {}

func (x *CThostFtdcLoginForbiddenIPField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcLoginForbiddenIPField.ProtoReflect.Descriptor instead.
func (*CThostFtdcLoginForbiddenIPField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{176}
}

func (x *CThostFtdcLoginForbiddenIPField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

type CThostFtdcIPListField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAddress string `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	IsWhite   int32  `protobuf:"varint,2,opt,name=IsWhite,proto3" json:"IsWhite,omitempty"`
}

func (x *CThostFtdcIPListField) Reset() {
	*x = CThostFtdcIPListField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcIPListField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcIPListField) ProtoMessage() {}

func (x *CThostFtdcIPListField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcIPListField.ProtoReflect.Descriptor instead.
func (*CThostFtdcIPListField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{177}
}

func (x *CThostFtdcIPListField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcIPListField) GetIsWhite() int32 {
	if x != nil {
		return x.IsWhite
	}
	return 0
}

type CThostFtdcInputOptionSelfCloseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID           string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID       string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OptionSelfCloseRef string `protobuf:"bytes,4,opt,name=OptionSelfCloseRef,proto3" json:"OptionSelfCloseRef,omitempty"`
	UserID             string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Volume             int32  `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	RequestID          int32  `protobuf:"varint,7,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit       string `protobuf:"bytes,8,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	HedgeFlag          int32  `protobuf:"varint,9,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	OptSelfCloseFlag   int32  `protobuf:"varint,10,opt,name=OptSelfCloseFlag,proto3" json:"OptSelfCloseFlag,omitempty"`
	ExchangeID         string `protobuf:"bytes,11,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID       string `protobuf:"bytes,12,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID          string `protobuf:"bytes,13,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID         string `protobuf:"bytes,14,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	ClientID           string `protobuf:"bytes,15,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IPAddress          string `protobuf:"bytes,16,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress         string `protobuf:"bytes,17,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputOptionSelfCloseField) Reset() {
	*x = CThostFtdcInputOptionSelfCloseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputOptionSelfCloseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputOptionSelfCloseField) ProtoMessage() {}

func (x *CThostFtdcInputOptionSelfCloseField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputOptionSelfCloseField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputOptionSelfCloseField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{178}
}

func (x *CThostFtdcInputOptionSelfCloseField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetOptionSelfCloseRef() string {
	if x != nil {
		return x.OptionSelfCloseRef
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseField) GetOptSelfCloseFlag() int32 {
	if x != nil {
		return x.OptSelfCloseFlag
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcInputOptionSelfCloseActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                 string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID               string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OptionSelfCloseActionRef int32  `protobuf:"varint,3,opt,name=OptionSelfCloseActionRef,proto3" json:"OptionSelfCloseActionRef,omitempty"`
	OptionSelfCloseRef       string `protobuf:"bytes,4,opt,name=OptionSelfCloseRef,proto3" json:"OptionSelfCloseRef,omitempty"`
	RequestID                int32  `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID                  int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID                int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID               string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OptionSelfCloseSysID     string `protobuf:"bytes,9,opt,name=OptionSelfCloseSysID,proto3" json:"OptionSelfCloseSysID,omitempty"`
	ActionFlag               int32  `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	UserID                   string `protobuf:"bytes,11,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InstrumentID             string `protobuf:"bytes,12,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestUnitID             string `protobuf:"bytes,13,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress                string `protobuf:"bytes,14,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress               string `protobuf:"bytes,15,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcInputOptionSelfCloseActionField) Reset() {
	*x = CThostFtdcInputOptionSelfCloseActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInputOptionSelfCloseActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInputOptionSelfCloseActionField) ProtoMessage() {}

func (x *CThostFtdcInputOptionSelfCloseActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInputOptionSelfCloseActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInputOptionSelfCloseActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{179}
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetOptionSelfCloseActionRef() int32 {
	if x != nil {
		return x.OptionSelfCloseActionRef
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetOptionSelfCloseRef() string {
	if x != nil {
		return x.OptionSelfCloseRef
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetOptionSelfCloseSysID() string {
	if x != nil {
		return x.OptionSelfCloseSysID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcInputOptionSelfCloseActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcOptionSelfCloseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                 string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID               string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID             string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OptionSelfCloseRef       string `protobuf:"bytes,4,opt,name=OptionSelfCloseRef,proto3" json:"OptionSelfCloseRef,omitempty"`
	UserID                   string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Volume                   int32  `protobuf:"varint,6,opt,name=Volume,proto3" json:"Volume,omitempty"`
	RequestID                int32  `protobuf:"varint,7,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit             string `protobuf:"bytes,8,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	HedgeFlag                int32  `protobuf:"varint,9,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	OptSelfCloseFlag         int32  `protobuf:"varint,10,opt,name=OptSelfCloseFlag,proto3" json:"OptSelfCloseFlag,omitempty"`
	OptionSelfCloseLocalID   string `protobuf:"bytes,11,opt,name=OptionSelfCloseLocalID,proto3" json:"OptionSelfCloseLocalID,omitempty"`
	ExchangeID               string `protobuf:"bytes,12,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID            string `protobuf:"bytes,13,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID                 string `protobuf:"bytes,14,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID           string `protobuf:"bytes,15,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID                 string `protobuf:"bytes,16,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID                int32  `protobuf:"varint,17,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderSubmitStatus        int32  `protobuf:"varint,18,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	NotifySequence           int32  `protobuf:"varint,19,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay               string `protobuf:"bytes,20,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID             int32  `protobuf:"varint,21,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	OptionSelfCloseSysID     string `protobuf:"bytes,22,opt,name=OptionSelfCloseSysID,proto3" json:"OptionSelfCloseSysID,omitempty"`
	InsertDate               string `protobuf:"bytes,23,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime               string `protobuf:"bytes,24,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	CancelTime               string `protobuf:"bytes,25,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	ExecResult               int32  `protobuf:"varint,26,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	ClearingPartID           string `protobuf:"bytes,27,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo               int32  `protobuf:"varint,28,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	FrontID                  int32  `protobuf:"varint,29,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID                int32  `protobuf:"varint,30,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	UserProductInfo          string `protobuf:"bytes,31,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	StatusMsg                []byte `protobuf:"bytes,32,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	ActiveUserID             string `protobuf:"bytes,33,opt,name=ActiveUserID,proto3" json:"ActiveUserID,omitempty"`
	BrokerOptionSelfCloseSeq int32  `protobuf:"varint,34,opt,name=BrokerOptionSelfCloseSeq,proto3" json:"BrokerOptionSelfCloseSeq,omitempty"`
	BranchID                 string `protobuf:"bytes,35,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID             string `protobuf:"bytes,36,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID                string `protobuf:"bytes,37,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID               string `protobuf:"bytes,38,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	IPAddress                string `protobuf:"bytes,39,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress               string `protobuf:"bytes,40,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcOptionSelfCloseField) Reset() {
	*x = CThostFtdcOptionSelfCloseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionSelfCloseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionSelfCloseField) ProtoMessage() {}

func (x *CThostFtdcOptionSelfCloseField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionSelfCloseField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionSelfCloseField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{180}
}

func (x *CThostFtdcOptionSelfCloseField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetOptionSelfCloseRef() string {
	if x != nil {
		return x.OptionSelfCloseRef
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetOptSelfCloseFlag() int32 {
	if x != nil {
		return x.OptSelfCloseFlag
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetOptionSelfCloseLocalID() string {
	if x != nil {
		return x.OptionSelfCloseLocalID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetOptionSelfCloseSysID() string {
	if x != nil {
		return x.OptionSelfCloseSysID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetExecResult() int32 {
	if x != nil {
		return x.ExecResult
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcOptionSelfCloseField) GetActiveUserID() string {
	if x != nil {
		return x.ActiveUserID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetBrokerOptionSelfCloseSeq() int32 {
	if x != nil {
		return x.BrokerOptionSelfCloseSeq
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcOptionSelfCloseActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                 string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID               string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OptionSelfCloseActionRef int32  `protobuf:"varint,3,opt,name=OptionSelfCloseActionRef,proto3" json:"OptionSelfCloseActionRef,omitempty"`
	OptionSelfCloseRef       string `protobuf:"bytes,4,opt,name=OptionSelfCloseRef,proto3" json:"OptionSelfCloseRef,omitempty"`
	RequestID                int32  `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID                  int32  `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID                int32  `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID               string `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OptionSelfCloseSysID     string `protobuf:"bytes,9,opt,name=OptionSelfCloseSysID,proto3" json:"OptionSelfCloseSysID,omitempty"`
	ActionFlag               int32  `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	ActionDate               string `protobuf:"bytes,11,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime               string `protobuf:"bytes,12,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID                 string `protobuf:"bytes,13,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID                int32  `protobuf:"varint,14,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OptionSelfCloseLocalID   string `protobuf:"bytes,15,opt,name=OptionSelfCloseLocalID,proto3" json:"OptionSelfCloseLocalID,omitempty"`
	ActionLocalID            string `protobuf:"bytes,16,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID            string `protobuf:"bytes,17,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID                 string `protobuf:"bytes,18,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit             string `protobuf:"bytes,19,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus        int32  `protobuf:"varint,20,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID                   string `protobuf:"bytes,21,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StatusMsg                []byte `protobuf:"bytes,22,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	InstrumentID             string `protobuf:"bytes,23,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BranchID                 string `protobuf:"bytes,24,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID             string `protobuf:"bytes,25,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress                string `protobuf:"bytes,26,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress               string `protobuf:"bytes,27,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcOptionSelfCloseActionField) Reset() {
	*x = CThostFtdcOptionSelfCloseActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOptionSelfCloseActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOptionSelfCloseActionField) ProtoMessage() {}

func (x *CThostFtdcOptionSelfCloseActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOptionSelfCloseActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOptionSelfCloseActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{181}
}

func (x *CThostFtdcOptionSelfCloseActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetOptionSelfCloseActionRef() int32 {
	if x != nil {
		return x.OptionSelfCloseActionRef
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseActionField) GetOptionSelfCloseRef() string {
	if x != nil {
		return x.OptionSelfCloseRef
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetOptionSelfCloseSysID() string {
	if x != nil {
		return x.OptionSelfCloseSysID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseActionField) GetOptionSelfCloseLocalID() string {
	if x != nil {
		return x.OptionSelfCloseLocalID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcOptionSelfCloseActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcOptionSelfCloseActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcOptionSelfCloseActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryOptionSelfCloseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID             string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID           string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID         string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID           string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OptionSelfCloseSysID string `protobuf:"bytes,5,opt,name=OptionSelfCloseSysID,proto3" json:"OptionSelfCloseSysID,omitempty"`
	InsertTimeStart      string `protobuf:"bytes,6,opt,name=InsertTimeStart,proto3" json:"InsertTimeStart,omitempty"`
	InsertTimeEnd        string `protobuf:"bytes,7,opt,name=InsertTimeEnd,proto3" json:"InsertTimeEnd,omitempty"`
}

func (x *CThostFtdcQryOptionSelfCloseField) Reset() {
	*x = CThostFtdcQryOptionSelfCloseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryOptionSelfCloseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryOptionSelfCloseField) ProtoMessage() {}

func (x *CThostFtdcQryOptionSelfCloseField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryOptionSelfCloseField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryOptionSelfCloseField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{182}
}

func (x *CThostFtdcQryOptionSelfCloseField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseField) GetOptionSelfCloseSysID() string {
	if x != nil {
		return x.OptionSelfCloseSysID
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseField) GetInsertTimeStart() string {
	if x != nil {
		return x.InsertTimeStart
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseField) GetInsertTimeEnd() string {
	if x != nil {
		return x.InsertTimeEnd
	}
	return ""
}

type CThostFtdcExchangeOptionSelfCloseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume                 int32  `protobuf:"varint,1,opt,name=Volume,proto3" json:"Volume,omitempty"`
	RequestID              int32  `protobuf:"varint,2,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	BusinessUnit           string `protobuf:"bytes,3,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	HedgeFlag              int32  `protobuf:"varint,4,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	OptSelfCloseFlag       int32  `protobuf:"varint,5,opt,name=OptSelfCloseFlag,proto3" json:"OptSelfCloseFlag,omitempty"`
	OptionSelfCloseLocalID string `protobuf:"bytes,6,opt,name=OptionSelfCloseLocalID,proto3" json:"OptionSelfCloseLocalID,omitempty"`
	ExchangeID             string `protobuf:"bytes,7,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID          string `protobuf:"bytes,8,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID               string `protobuf:"bytes,9,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID         string `protobuf:"bytes,10,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID               string `protobuf:"bytes,11,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID              int32  `protobuf:"varint,12,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderSubmitStatus      int32  `protobuf:"varint,13,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	NotifySequence         int32  `protobuf:"varint,14,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay             string `protobuf:"bytes,15,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID           int32  `protobuf:"varint,16,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	OptionSelfCloseSysID   string `protobuf:"bytes,17,opt,name=OptionSelfCloseSysID,proto3" json:"OptionSelfCloseSysID,omitempty"`
	InsertDate             string `protobuf:"bytes,18,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime             string `protobuf:"bytes,19,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	CancelTime             string `protobuf:"bytes,20,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	ExecResult             int32  `protobuf:"varint,21,opt,name=ExecResult,proto3" json:"ExecResult,omitempty"`
	ClearingPartID         string `protobuf:"bytes,22,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo             int32  `protobuf:"varint,23,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	BranchID               string `protobuf:"bytes,24,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	IPAddress              string `protobuf:"bytes,25,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress             string `protobuf:"bytes,26,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcExchangeOptionSelfCloseField) Reset() {
	*x = CThostFtdcExchangeOptionSelfCloseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeOptionSelfCloseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeOptionSelfCloseField) ProtoMessage() {}

func (x *CThostFtdcExchangeOptionSelfCloseField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeOptionSelfCloseField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeOptionSelfCloseField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{183}
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetOptSelfCloseFlag() int32 {
	if x != nil {
		return x.OptSelfCloseFlag
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetOptionSelfCloseLocalID() string {
	if x != nil {
		return x.OptionSelfCloseLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetOptionSelfCloseSysID() string {
	if x != nil {
		return x.OptionSelfCloseSysID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetExecResult() int32 {
	if x != nil {
		return x.ExecResult
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryOptionSelfCloseActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryOptionSelfCloseActionField) Reset() {
	*x = CThostFtdcQryOptionSelfCloseActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryOptionSelfCloseActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryOptionSelfCloseActionField) ProtoMessage() {}

func (x *CThostFtdcQryOptionSelfCloseActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryOptionSelfCloseActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryOptionSelfCloseActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{184}
}

func (x *CThostFtdcQryOptionSelfCloseActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryOptionSelfCloseActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcExchangeOptionSelfCloseActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID             string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OptionSelfCloseSysID   string `protobuf:"bytes,2,opt,name=OptionSelfCloseSysID,proto3" json:"OptionSelfCloseSysID,omitempty"`
	ActionFlag             int32  `protobuf:"varint,3,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	ActionDate             string `protobuf:"bytes,4,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime             string `protobuf:"bytes,5,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID               string `protobuf:"bytes,6,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID              int32  `protobuf:"varint,7,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OptionSelfCloseLocalID string `protobuf:"bytes,8,opt,name=OptionSelfCloseLocalID,proto3" json:"OptionSelfCloseLocalID,omitempty"`
	ActionLocalID          string `protobuf:"bytes,9,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID          string `protobuf:"bytes,10,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID               string `protobuf:"bytes,11,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit           string `protobuf:"bytes,12,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus      int32  `protobuf:"varint,13,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID                 string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	BranchID               string `protobuf:"bytes,15,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	IPAddress              string `protobuf:"bytes,16,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress             string `protobuf:"bytes,17,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ExchangeInstID         string `protobuf:"bytes,18,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	OptSelfCloseFlag       int32  `protobuf:"varint,19,opt,name=OptSelfCloseFlag,proto3" json:"OptSelfCloseFlag,omitempty"`
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) Reset() {
	*x = CThostFtdcExchangeOptionSelfCloseActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeOptionSelfCloseActionField) ProtoMessage() {}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeOptionSelfCloseActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeOptionSelfCloseActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{185}
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetOptionSelfCloseSysID() string {
	if x != nil {
		return x.OptionSelfCloseSysID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetOptionSelfCloseLocalID() string {
	if x != nil {
		return x.OptionSelfCloseLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcExchangeOptionSelfCloseActionField) GetOptSelfCloseFlag() int32 {
	if x != nil {
		return x.OptSelfCloseFlag
	}
	return 0
}

type CThostFtdcSyncDelaySwapField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelaySwapSeqNo string  `protobuf:"bytes,1,opt,name=DelaySwapSeqNo,proto3" json:"DelaySwapSeqNo,omitempty"`
	BrokerID       string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	FromCurrencyID string  `protobuf:"bytes,4,opt,name=FromCurrencyID,proto3" json:"FromCurrencyID,omitempty"`
	FromAmount     float64 `protobuf:"fixed64,5,opt,name=FromAmount,proto3" json:"FromAmount,omitempty"`
	FromFrozenSwap float64 `protobuf:"fixed64,6,opt,name=FromFrozenSwap,proto3" json:"FromFrozenSwap,omitempty"`
	FromRemainSwap float64 `protobuf:"fixed64,7,opt,name=FromRemainSwap,proto3" json:"FromRemainSwap,omitempty"`
	ToCurrencyID   string  `protobuf:"bytes,8,opt,name=ToCurrencyID,proto3" json:"ToCurrencyID,omitempty"`
	ToAmount       float64 `protobuf:"fixed64,9,opt,name=ToAmount,proto3" json:"ToAmount,omitempty"`
}

func (x *CThostFtdcSyncDelaySwapField) Reset() {
	*x = CThostFtdcSyncDelaySwapField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncDelaySwapField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncDelaySwapField) ProtoMessage() {}

func (x *CThostFtdcSyncDelaySwapField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncDelaySwapField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncDelaySwapField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{186}
}

func (x *CThostFtdcSyncDelaySwapField) GetDelaySwapSeqNo() string {
	if x != nil {
		return x.DelaySwapSeqNo
	}
	return ""
}

func (x *CThostFtdcSyncDelaySwapField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSyncDelaySwapField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSyncDelaySwapField) GetFromCurrencyID() string {
	if x != nil {
		return x.FromCurrencyID
	}
	return ""
}

func (x *CThostFtdcSyncDelaySwapField) GetFromAmount() float64 {
	if x != nil {
		return x.FromAmount
	}
	return 0
}

func (x *CThostFtdcSyncDelaySwapField) GetFromFrozenSwap() float64 {
	if x != nil {
		return x.FromFrozenSwap
	}
	return 0
}

func (x *CThostFtdcSyncDelaySwapField) GetFromRemainSwap() float64 {
	if x != nil {
		return x.FromRemainSwap
	}
	return 0
}

func (x *CThostFtdcSyncDelaySwapField) GetToCurrencyID() string {
	if x != nil {
		return x.ToCurrencyID
	}
	return ""
}

func (x *CThostFtdcSyncDelaySwapField) GetToAmount() float64 {
	if x != nil {
		return x.ToAmount
	}
	return 0
}

type CThostFtdcQrySyncDelaySwapField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	DelaySwapSeqNo string `protobuf:"bytes,2,opt,name=DelaySwapSeqNo,proto3" json:"DelaySwapSeqNo,omitempty"`
}

func (x *CThostFtdcQrySyncDelaySwapField) Reset() {
	*x = CThostFtdcQrySyncDelaySwapField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySyncDelaySwapField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySyncDelaySwapField) ProtoMessage() {}

func (x *CThostFtdcQrySyncDelaySwapField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySyncDelaySwapField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySyncDelaySwapField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{187}
}

func (x *CThostFtdcQrySyncDelaySwapField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySyncDelaySwapField) GetDelaySwapSeqNo() string {
	if x != nil {
		return x.DelaySwapSeqNo
	}
	return ""
}

type CThostFtdcInvestUnitField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID         string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID       string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InvestUnitID     string `protobuf:"bytes,3,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	InvestorUnitName []byte `protobuf:"bytes,4,opt,name=InvestorUnitName,proto3" json:"InvestorUnitName,omitempty"`
	InvestorGroupID  string `protobuf:"bytes,5,opt,name=InvestorGroupID,proto3" json:"InvestorGroupID,omitempty"`
	CommModelID      string `protobuf:"bytes,6,opt,name=CommModelID,proto3" json:"CommModelID,omitempty"`
	MarginModelID    string `protobuf:"bytes,7,opt,name=MarginModelID,proto3" json:"MarginModelID,omitempty"`
	AccountID        string `protobuf:"bytes,8,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID       string `protobuf:"bytes,9,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcInvestUnitField) Reset() {
	*x = CThostFtdcInvestUnitField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestUnitField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestUnitField) ProtoMessage() {}

func (x *CThostFtdcInvestUnitField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestUnitField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestUnitField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{188}
}

func (x *CThostFtdcInvestUnitField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestUnitField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestUnitField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcInvestUnitField) GetInvestorUnitName() []byte {
	if x != nil {
		return x.InvestorUnitName
	}
	return nil
}

func (x *CThostFtdcInvestUnitField) GetInvestorGroupID() string {
	if x != nil {
		return x.InvestorGroupID
	}
	return ""
}

func (x *CThostFtdcInvestUnitField) GetCommModelID() string {
	if x != nil {
		return x.CommModelID
	}
	return ""
}

func (x *CThostFtdcInvestUnitField) GetMarginModelID() string {
	if x != nil {
		return x.MarginModelID
	}
	return ""
}

func (x *CThostFtdcInvestUnitField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcInvestUnitField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcQryInvestUnitField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InvestUnitID string `protobuf:"bytes,3,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryInvestUnitField) Reset() {
	*x = CThostFtdcQryInvestUnitField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInvestUnitField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInvestUnitField) ProtoMessage() {}

func (x *CThostFtdcQryInvestUnitField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInvestUnitField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInvestUnitField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{189}
}

func (x *CThostFtdcQryInvestUnitField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInvestUnitField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInvestUnitField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcSecAgentCheckModeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorID       string `protobuf:"bytes,1,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	BrokerID         string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	CurrencyID       string `protobuf:"bytes,3,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	BrokerSecAgentID string `protobuf:"bytes,4,opt,name=BrokerSecAgentID,proto3" json:"BrokerSecAgentID,omitempty"`
	CheckSelfAccount int32  `protobuf:"varint,5,opt,name=CheckSelfAccount,proto3" json:"CheckSelfAccount,omitempty"`
}

func (x *CThostFtdcSecAgentCheckModeField) Reset() {
	*x = CThostFtdcSecAgentCheckModeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSecAgentCheckModeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSecAgentCheckModeField) ProtoMessage() {}

func (x *CThostFtdcSecAgentCheckModeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSecAgentCheckModeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSecAgentCheckModeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{190}
}

func (x *CThostFtdcSecAgentCheckModeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSecAgentCheckModeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSecAgentCheckModeField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcSecAgentCheckModeField) GetBrokerSecAgentID() string {
	if x != nil {
		return x.BrokerSecAgentID
	}
	return ""
}

func (x *CThostFtdcSecAgentCheckModeField) GetCheckSelfAccount() int32 {
	if x != nil {
		return x.CheckSelfAccount
	}
	return 0
}

type CThostFtdcSecAgentTradeInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID         string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerSecAgentID string `protobuf:"bytes,2,opt,name=BrokerSecAgentID,proto3" json:"BrokerSecAgentID,omitempty"`
	InvestorID       string `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	LongCustomerName []byte `protobuf:"bytes,4,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcSecAgentTradeInfoField) Reset() {
	*x = CThostFtdcSecAgentTradeInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSecAgentTradeInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSecAgentTradeInfoField) ProtoMessage() {}

func (x *CThostFtdcSecAgentTradeInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSecAgentTradeInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSecAgentTradeInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{191}
}

func (x *CThostFtdcSecAgentTradeInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSecAgentTradeInfoField) GetBrokerSecAgentID() string {
	if x != nil {
		return x.BrokerSecAgentID
	}
	return ""
}

func (x *CThostFtdcSecAgentTradeInfoField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcSecAgentTradeInfoField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcMarketDataField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay         string  `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	InstrumentID       string  `protobuf:"bytes,2,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID         string  `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExchangeInstID     string  `protobuf:"bytes,4,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	LastPrice          float64 `protobuf:"fixed64,5,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,6,opt,name=PreSettlementPrice,proto3" json:"PreSettlementPrice,omitempty"`
	PreClosePrice      float64 `protobuf:"fixed64,7,opt,name=PreClosePrice,proto3" json:"PreClosePrice,omitempty"`
	PreOpenInterest    float64 `protobuf:"fixed64,8,opt,name=PreOpenInterest,proto3" json:"PreOpenInterest,omitempty"`
	OpenPrice          float64 `protobuf:"fixed64,9,opt,name=OpenPrice,proto3" json:"OpenPrice,omitempty"`
	HighestPrice       float64 `protobuf:"fixed64,10,opt,name=HighestPrice,proto3" json:"HighestPrice,omitempty"`
	LowestPrice        float64 `protobuf:"fixed64,11,opt,name=LowestPrice,proto3" json:"LowestPrice,omitempty"`
	Volume             int32   `protobuf:"varint,12,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Turnover           float64 `protobuf:"fixed64,13,opt,name=Turnover,proto3" json:"Turnover,omitempty"`
	OpenInterest       float64 `protobuf:"fixed64,14,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	ClosePrice         float64 `protobuf:"fixed64,15,opt,name=ClosePrice,proto3" json:"ClosePrice,omitempty"`
	SettlementPrice    float64 `protobuf:"fixed64,16,opt,name=SettlementPrice,proto3" json:"SettlementPrice,omitempty"`
	UpperLimitPrice    float64 `protobuf:"fixed64,17,opt,name=UpperLimitPrice,proto3" json:"UpperLimitPrice,omitempty"`
	LowerLimitPrice    float64 `protobuf:"fixed64,18,opt,name=LowerLimitPrice,proto3" json:"LowerLimitPrice,omitempty"`
	PreDelta           float64 `protobuf:"fixed64,19,opt,name=PreDelta,proto3" json:"PreDelta,omitempty"`
	CurrDelta          float64 `protobuf:"fixed64,20,opt,name=CurrDelta,proto3" json:"CurrDelta,omitempty"`
	UpdateTime         string  `protobuf:"bytes,21,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	UpdateMillisec     int32   `protobuf:"varint,22,opt,name=UpdateMillisec,proto3" json:"UpdateMillisec,omitempty"`
	ActionDay          string  `protobuf:"bytes,23,opt,name=ActionDay,proto3" json:"ActionDay,omitempty"`
}

func (x *CThostFtdcMarketDataField) Reset() {
	*x = CThostFtdcMarketDataField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataField) ProtoMessage() {}

func (x *CThostFtdcMarketDataField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{192}
}

func (x *CThostFtdcMarketDataField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcMarketDataField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcMarketDataField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcMarketDataField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcMarketDataField) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetPreOpenInterest() float64 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetHighestPrice() float64 {
	if x != nil {
		return x.HighestPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetLowestPrice() float64 {
	if x != nil {
		return x.LowestPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetOpenInterest() float64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetPreDelta() float64 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetCurrDelta() float64 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CThostFtdcMarketDataField) GetUpdateMillisec() int32 {
	if x != nil {
		return x.UpdateMillisec
	}
	return 0
}

func (x *CThostFtdcMarketDataField) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

type CThostFtdcMarketDataBaseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay         string  `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PreSettlementPrice float64 `protobuf:"fixed64,2,opt,name=PreSettlementPrice,proto3" json:"PreSettlementPrice,omitempty"`
	PreClosePrice      float64 `protobuf:"fixed64,3,opt,name=PreClosePrice,proto3" json:"PreClosePrice,omitempty"`
	PreOpenInterest    float64 `protobuf:"fixed64,4,opt,name=PreOpenInterest,proto3" json:"PreOpenInterest,omitempty"`
	PreDelta           float64 `protobuf:"fixed64,5,opt,name=PreDelta,proto3" json:"PreDelta,omitempty"`
}

func (x *CThostFtdcMarketDataBaseField) Reset() {
	*x = CThostFtdcMarketDataBaseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataBaseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataBaseField) ProtoMessage() {}

func (x *CThostFtdcMarketDataBaseField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataBaseField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataBaseField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{193}
}

func (x *CThostFtdcMarketDataBaseField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcMarketDataBaseField) GetPreSettlementPrice() float64 {
	if x != nil {
		return x.PreSettlementPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataBaseField) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *CThostFtdcMarketDataBaseField) GetPreOpenInterest() float64 {
	if x != nil {
		return x.PreOpenInterest
	}
	return 0
}

func (x *CThostFtdcMarketDataBaseField) GetPreDelta() float64 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

type CThostFtdcMarketDataStaticField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenPrice       float64 `protobuf:"fixed64,1,opt,name=OpenPrice,proto3" json:"OpenPrice,omitempty"`
	HighestPrice    float64 `protobuf:"fixed64,2,opt,name=HighestPrice,proto3" json:"HighestPrice,omitempty"`
	LowestPrice     float64 `protobuf:"fixed64,3,opt,name=LowestPrice,proto3" json:"LowestPrice,omitempty"`
	ClosePrice      float64 `protobuf:"fixed64,4,opt,name=ClosePrice,proto3" json:"ClosePrice,omitempty"`
	UpperLimitPrice float64 `protobuf:"fixed64,5,opt,name=UpperLimitPrice,proto3" json:"UpperLimitPrice,omitempty"`
	LowerLimitPrice float64 `protobuf:"fixed64,6,opt,name=LowerLimitPrice,proto3" json:"LowerLimitPrice,omitempty"`
	SettlementPrice float64 `protobuf:"fixed64,7,opt,name=SettlementPrice,proto3" json:"SettlementPrice,omitempty"`
	CurrDelta       float64 `protobuf:"fixed64,8,opt,name=CurrDelta,proto3" json:"CurrDelta,omitempty"`
}

func (x *CThostFtdcMarketDataStaticField) Reset() {
	*x = CThostFtdcMarketDataStaticField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataStaticField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataStaticField) ProtoMessage() {}

func (x *CThostFtdcMarketDataStaticField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataStaticField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataStaticField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{194}
}

func (x *CThostFtdcMarketDataStaticField) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataStaticField) GetHighestPrice() float64 {
	if x != nil {
		return x.HighestPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataStaticField) GetLowestPrice() float64 {
	if x != nil {
		return x.LowestPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataStaticField) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *CThostFtdcMarketDataStaticField) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataStaticField) GetLowerLimitPrice() float64 {
	if x != nil {
		return x.LowerLimitPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataStaticField) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataStaticField) GetCurrDelta() float64 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

type CThostFtdcMarketDataLastMatchField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastPrice    float64 `protobuf:"fixed64,1,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`
	Volume       int32   `protobuf:"varint,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Turnover     float64 `protobuf:"fixed64,3,opt,name=Turnover,proto3" json:"Turnover,omitempty"`
	OpenInterest float64 `protobuf:"fixed64,4,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
}

func (x *CThostFtdcMarketDataLastMatchField) Reset() {
	*x = CThostFtdcMarketDataLastMatchField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataLastMatchField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataLastMatchField) ProtoMessage() {}

func (x *CThostFtdcMarketDataLastMatchField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataLastMatchField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataLastMatchField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{195}
}

func (x *CThostFtdcMarketDataLastMatchField) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *CThostFtdcMarketDataLastMatchField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcMarketDataLastMatchField) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *CThostFtdcMarketDataLastMatchField) GetOpenInterest() float64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

type CThostFtdcMarketDataBestPriceField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidPrice1  float64 `protobuf:"fixed64,1,opt,name=BidPrice1,proto3" json:"BidPrice1,omitempty"`
	BidVolume1 int32   `protobuf:"varint,2,opt,name=BidVolume1,proto3" json:"BidVolume1,omitempty"`
	AskPrice1  float64 `protobuf:"fixed64,3,opt,name=AskPrice1,proto3" json:"AskPrice1,omitempty"`
	AskVolume1 int32   `protobuf:"varint,4,opt,name=AskVolume1,proto3" json:"AskVolume1,omitempty"`
}

func (x *CThostFtdcMarketDataBestPriceField) Reset() {
	*x = CThostFtdcMarketDataBestPriceField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataBestPriceField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataBestPriceField) ProtoMessage() {}

func (x *CThostFtdcMarketDataBestPriceField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataBestPriceField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataBestPriceField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{196}
}

func (x *CThostFtdcMarketDataBestPriceField) GetBidPrice1() float64 {
	if x != nil {
		return x.BidPrice1
	}
	return 0
}

func (x *CThostFtdcMarketDataBestPriceField) GetBidVolume1() int32 {
	if x != nil {
		return x.BidVolume1
	}
	return 0
}

func (x *CThostFtdcMarketDataBestPriceField) GetAskPrice1() float64 {
	if x != nil {
		return x.AskPrice1
	}
	return 0
}

func (x *CThostFtdcMarketDataBestPriceField) GetAskVolume1() int32 {
	if x != nil {
		return x.AskVolume1
	}
	return 0
}

type CThostFtdcMarketDataBid23Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidPrice2  float64 `protobuf:"fixed64,1,opt,name=BidPrice2,proto3" json:"BidPrice2,omitempty"`
	BidVolume2 int32   `protobuf:"varint,2,opt,name=BidVolume2,proto3" json:"BidVolume2,omitempty"`
	BidPrice3  float64 `protobuf:"fixed64,3,opt,name=BidPrice3,proto3" json:"BidPrice3,omitempty"`
	BidVolume3 int32   `protobuf:"varint,4,opt,name=BidVolume3,proto3" json:"BidVolume3,omitempty"`
}

func (x *CThostFtdcMarketDataBid23Field) Reset() {
	*x = CThostFtdcMarketDataBid23Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataBid23Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataBid23Field) ProtoMessage() {}

func (x *CThostFtdcMarketDataBid23Field) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataBid23Field.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataBid23Field) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{197}
}

func (x *CThostFtdcMarketDataBid23Field) GetBidPrice2() float64 {
	if x != nil {
		return x.BidPrice2
	}
	return 0
}

func (x *CThostFtdcMarketDataBid23Field) GetBidVolume2() int32 {
	if x != nil {
		return x.BidVolume2
	}
	return 0
}

func (x *CThostFtdcMarketDataBid23Field) GetBidPrice3() float64 {
	if x != nil {
		return x.BidPrice3
	}
	return 0
}

func (x *CThostFtdcMarketDataBid23Field) GetBidVolume3() int32 {
	if x != nil {
		return x.BidVolume3
	}
	return 0
}

type CThostFtdcMarketDataAsk23Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AskPrice2  float64 `protobuf:"fixed64,1,opt,name=AskPrice2,proto3" json:"AskPrice2,omitempty"`
	AskVolume2 int32   `protobuf:"varint,2,opt,name=AskVolume2,proto3" json:"AskVolume2,omitempty"`
	AskPrice3  float64 `protobuf:"fixed64,3,opt,name=AskPrice3,proto3" json:"AskPrice3,omitempty"`
	AskVolume3 int32   `protobuf:"varint,4,opt,name=AskVolume3,proto3" json:"AskVolume3,omitempty"`
}

func (x *CThostFtdcMarketDataAsk23Field) Reset() {
	*x = CThostFtdcMarketDataAsk23Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataAsk23Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataAsk23Field) ProtoMessage() {}

func (x *CThostFtdcMarketDataAsk23Field) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataAsk23Field.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataAsk23Field) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{198}
}

func (x *CThostFtdcMarketDataAsk23Field) GetAskPrice2() float64 {
	if x != nil {
		return x.AskPrice2
	}
	return 0
}

func (x *CThostFtdcMarketDataAsk23Field) GetAskVolume2() int32 {
	if x != nil {
		return x.AskVolume2
	}
	return 0
}

func (x *CThostFtdcMarketDataAsk23Field) GetAskPrice3() float64 {
	if x != nil {
		return x.AskPrice3
	}
	return 0
}

func (x *CThostFtdcMarketDataAsk23Field) GetAskVolume3() int32 {
	if x != nil {
		return x.AskVolume3
	}
	return 0
}

type CThostFtdcMarketDataBid45Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidPrice4  float64 `protobuf:"fixed64,1,opt,name=BidPrice4,proto3" json:"BidPrice4,omitempty"`
	BidVolume4 int32   `protobuf:"varint,2,opt,name=BidVolume4,proto3" json:"BidVolume4,omitempty"`
	BidPrice5  float64 `protobuf:"fixed64,3,opt,name=BidPrice5,proto3" json:"BidPrice5,omitempty"`
	BidVolume5 int32   `protobuf:"varint,4,opt,name=BidVolume5,proto3" json:"BidVolume5,omitempty"`
}

func (x *CThostFtdcMarketDataBid45Field) Reset() {
	*x = CThostFtdcMarketDataBid45Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataBid45Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataBid45Field) ProtoMessage() {}

func (x *CThostFtdcMarketDataBid45Field) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataBid45Field.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataBid45Field) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{199}
}

func (x *CThostFtdcMarketDataBid45Field) GetBidPrice4() float64 {
	if x != nil {
		return x.BidPrice4
	}
	return 0
}

func (x *CThostFtdcMarketDataBid45Field) GetBidVolume4() int32 {
	if x != nil {
		return x.BidVolume4
	}
	return 0
}

func (x *CThostFtdcMarketDataBid45Field) GetBidPrice5() float64 {
	if x != nil {
		return x.BidPrice5
	}
	return 0
}

func (x *CThostFtdcMarketDataBid45Field) GetBidVolume5() int32 {
	if x != nil {
		return x.BidVolume5
	}
	return 0
}

type CThostFtdcMarketDataAsk45Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AskPrice4  float64 `protobuf:"fixed64,1,opt,name=AskPrice4,proto3" json:"AskPrice4,omitempty"`
	AskVolume4 int32   `protobuf:"varint,2,opt,name=AskVolume4,proto3" json:"AskVolume4,omitempty"`
	AskPrice5  float64 `protobuf:"fixed64,3,opt,name=AskPrice5,proto3" json:"AskPrice5,omitempty"`
	AskVolume5 int32   `protobuf:"varint,4,opt,name=AskVolume5,proto3" json:"AskVolume5,omitempty"`
}

func (x *CThostFtdcMarketDataAsk45Field) Reset() {
	*x = CThostFtdcMarketDataAsk45Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataAsk45Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataAsk45Field) ProtoMessage() {}

func (x *CThostFtdcMarketDataAsk45Field) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataAsk45Field.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataAsk45Field) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{200}
}

func (x *CThostFtdcMarketDataAsk45Field) GetAskPrice4() float64 {
	if x != nil {
		return x.AskPrice4
	}
	return 0
}

func (x *CThostFtdcMarketDataAsk45Field) GetAskVolume4() int32 {
	if x != nil {
		return x.AskVolume4
	}
	return 0
}

func (x *CThostFtdcMarketDataAsk45Field) GetAskPrice5() float64 {
	if x != nil {
		return x.AskPrice5
	}
	return 0
}

func (x *CThostFtdcMarketDataAsk45Field) GetAskVolume5() int32 {
	if x != nil {
		return x.AskVolume5
	}
	return 0
}

type CThostFtdcMarketDataUpdateTimeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID   string `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	UpdateTime     string `protobuf:"bytes,2,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	UpdateMillisec int32  `protobuf:"varint,3,opt,name=UpdateMillisec,proto3" json:"UpdateMillisec,omitempty"`
	ActionDay      string `protobuf:"bytes,4,opt,name=ActionDay,proto3" json:"ActionDay,omitempty"`
}

func (x *CThostFtdcMarketDataUpdateTimeField) Reset() {
	*x = CThostFtdcMarketDataUpdateTimeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataUpdateTimeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataUpdateTimeField) ProtoMessage() {}

func (x *CThostFtdcMarketDataUpdateTimeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataUpdateTimeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataUpdateTimeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{201}
}

func (x *CThostFtdcMarketDataUpdateTimeField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcMarketDataUpdateTimeField) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CThostFtdcMarketDataUpdateTimeField) GetUpdateMillisec() int32 {
	if x != nil {
		return x.UpdateMillisec
	}
	return 0
}

func (x *CThostFtdcMarketDataUpdateTimeField) GetActionDay() string {
	if x != nil {
		return x.ActionDay
	}
	return ""
}

type CThostFtdcMarketDataExchangeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcMarketDataExchangeField) Reset() {
	*x = CThostFtdcMarketDataExchangeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataExchangeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataExchangeField) ProtoMessage() {}

func (x *CThostFtdcMarketDataExchangeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataExchangeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataExchangeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{202}
}

func (x *CThostFtdcMarketDataExchangeField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcSpecificInstrumentField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID string `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcSpecificInstrumentField) Reset() {
	*x = CThostFtdcSpecificInstrumentField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSpecificInstrumentField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSpecificInstrumentField) ProtoMessage() {}

func (x *CThostFtdcSpecificInstrumentField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSpecificInstrumentField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSpecificInstrumentField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{203}
}

func (x *CThostFtdcSpecificInstrumentField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcInstrumentStatusField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID        string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExchangeInstID    string `protobuf:"bytes,2,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	SettlementGroupID string `protobuf:"bytes,3,opt,name=SettlementGroupID,proto3" json:"SettlementGroupID,omitempty"`
	InstrumentID      string `protobuf:"bytes,4,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InstrumentStatus  int32  `protobuf:"varint,5,opt,name=InstrumentStatus,proto3" json:"InstrumentStatus,omitempty"`
	TradingSegmentSN  int32  `protobuf:"varint,6,opt,name=TradingSegmentSN,proto3" json:"TradingSegmentSN,omitempty"`
	EnterTime         string `protobuf:"bytes,7,opt,name=EnterTime,proto3" json:"EnterTime,omitempty"`
	EnterReason       int32  `protobuf:"varint,8,opt,name=EnterReason,proto3" json:"EnterReason,omitempty"`
}

func (x *CThostFtdcInstrumentStatusField) Reset() {
	*x = CThostFtdcInstrumentStatusField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInstrumentStatusField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInstrumentStatusField) ProtoMessage() {}

func (x *CThostFtdcInstrumentStatusField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInstrumentStatusField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInstrumentStatusField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{204}
}

func (x *CThostFtdcInstrumentStatusField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInstrumentStatusField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcInstrumentStatusField) GetSettlementGroupID() string {
	if x != nil {
		return x.SettlementGroupID
	}
	return ""
}

func (x *CThostFtdcInstrumentStatusField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInstrumentStatusField) GetInstrumentStatus() int32 {
	if x != nil {
		return x.InstrumentStatus
	}
	return 0
}

func (x *CThostFtdcInstrumentStatusField) GetTradingSegmentSN() int32 {
	if x != nil {
		return x.TradingSegmentSN
	}
	return 0
}

func (x *CThostFtdcInstrumentStatusField) GetEnterTime() string {
	if x != nil {
		return x.EnterTime
	}
	return ""
}

func (x *CThostFtdcInstrumentStatusField) GetEnterReason() int32 {
	if x != nil {
		return x.EnterReason
	}
	return 0
}

type CThostFtdcQryInstrumentStatusField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID     string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ExchangeInstID string `protobuf:"bytes,2,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
}

func (x *CThostFtdcQryInstrumentStatusField) Reset() {
	*x = CThostFtdcQryInstrumentStatusField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInstrumentStatusField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInstrumentStatusField) ProtoMessage() {}

func (x *CThostFtdcQryInstrumentStatusField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInstrumentStatusField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInstrumentStatusField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{205}
}

func (x *CThostFtdcQryInstrumentStatusField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInstrumentStatusField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

type CThostFtdcInvestorAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	AccountID  string `protobuf:"bytes,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID string `protobuf:"bytes,4,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcInvestorAccountField) Reset() {
	*x = CThostFtdcInvestorAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorAccountField) ProtoMessage() {}

func (x *CThostFtdcInvestorAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{206}
}

func (x *CThostFtdcInvestorAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorAccountField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestorAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcInvestorAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcPositionProfitAlgorithmField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID  string `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Algorithm  int32  `protobuf:"varint,3,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	Memo       string `protobuf:"bytes,4,opt,name=Memo,proto3" json:"Memo,omitempty"`
	CurrencyID string `protobuf:"bytes,5,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcPositionProfitAlgorithmField) Reset() {
	*x = CThostFtdcPositionProfitAlgorithmField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcPositionProfitAlgorithmField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcPositionProfitAlgorithmField) ProtoMessage() {}

func (x *CThostFtdcPositionProfitAlgorithmField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcPositionProfitAlgorithmField.ProtoReflect.Descriptor instead.
func (*CThostFtdcPositionProfitAlgorithmField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{207}
}

func (x *CThostFtdcPositionProfitAlgorithmField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcPositionProfitAlgorithmField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcPositionProfitAlgorithmField) GetAlgorithm() int32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *CThostFtdcPositionProfitAlgorithmField) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CThostFtdcPositionProfitAlgorithmField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcDiscountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorRange int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	InvestorID    string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	Discount      float64 `protobuf:"fixed64,4,opt,name=Discount,proto3" json:"Discount,omitempty"`
}

func (x *CThostFtdcDiscountField) Reset() {
	*x = CThostFtdcDiscountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcDiscountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcDiscountField) ProtoMessage() {}

func (x *CThostFtdcDiscountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcDiscountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcDiscountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{208}
}

func (x *CThostFtdcDiscountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcDiscountField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcDiscountField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcDiscountField) GetDiscount() float64 {
	if x != nil {
		return x.Discount
	}
	return 0
}

type CThostFtdcQryTransferBankField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID     string `protobuf:"bytes,1,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBrchID string `protobuf:"bytes,2,opt,name=BankBrchID,proto3" json:"BankBrchID,omitempty"`
}

func (x *CThostFtdcQryTransferBankField) Reset() {
	*x = CThostFtdcQryTransferBankField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTransferBankField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTransferBankField) ProtoMessage() {}

func (x *CThostFtdcQryTransferBankField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTransferBankField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTransferBankField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{209}
}

func (x *CThostFtdcQryTransferBankField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcQryTransferBankField) GetBankBrchID() string {
	if x != nil {
		return x.BankBrchID
	}
	return ""
}

type CThostFtdcTransferBankField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankID     string `protobuf:"bytes,1,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBrchID string `protobuf:"bytes,2,opt,name=BankBrchID,proto3" json:"BankBrchID,omitempty"`
	BankName   []byte `protobuf:"bytes,3,opt,name=BankName,proto3" json:"BankName,omitempty"`
	IsActive   int32  `protobuf:"varint,4,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
}

func (x *CThostFtdcTransferBankField) Reset() {
	*x = CThostFtdcTransferBankField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferBankField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferBankField) ProtoMessage() {}

func (x *CThostFtdcTransferBankField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferBankField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferBankField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{210}
}

func (x *CThostFtdcTransferBankField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcTransferBankField) GetBankBrchID() string {
	if x != nil {
		return x.BankBrchID
	}
	return ""
}

func (x *CThostFtdcTransferBankField) GetBankName() []byte {
	if x != nil {
		return x.BankName
	}
	return nil
}

func (x *CThostFtdcTransferBankField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

type CThostFtdcQryInvestorPositionDetailField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryInvestorPositionDetailField) Reset() {
	*x = CThostFtdcQryInvestorPositionDetailField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInvestorPositionDetailField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInvestorPositionDetailField) ProtoMessage() {}

func (x *CThostFtdcQryInvestorPositionDetailField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInvestorPositionDetailField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInvestorPositionDetailField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{211}
}

func (x *CThostFtdcQryInvestorPositionDetailField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionDetailField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionDetailField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionDetailField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionDetailField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcInvestorPositionDetailField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentID          string  `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BrokerID              string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID            string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	HedgeFlag             int32   `protobuf:"varint,4,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	Direction             int32   `protobuf:"varint,5,opt,name=Direction,proto3" json:"Direction,omitempty"`
	OpenDate              string  `protobuf:"bytes,6,opt,name=OpenDate,proto3" json:"OpenDate,omitempty"`
	TradeID               string  `protobuf:"bytes,7,opt,name=TradeID,proto3" json:"TradeID,omitempty"`
	Volume                int32   `protobuf:"varint,8,opt,name=Volume,proto3" json:"Volume,omitempty"`
	OpenPrice             float64 `protobuf:"fixed64,9,opt,name=OpenPrice,proto3" json:"OpenPrice,omitempty"`
	TradingDay            string  `protobuf:"bytes,10,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID          int32   `protobuf:"varint,11,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	TradeType             int32   `protobuf:"varint,12,opt,name=TradeType,proto3" json:"TradeType,omitempty"`
	CombInstrumentID      string  `protobuf:"bytes,13,opt,name=CombInstrumentID,proto3" json:"CombInstrumentID,omitempty"`
	ExchangeID            string  `protobuf:"bytes,14,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	CloseProfitByDate     float64 `protobuf:"fixed64,15,opt,name=CloseProfitByDate,proto3" json:"CloseProfitByDate,omitempty"`
	CloseProfitByTrade    float64 `protobuf:"fixed64,16,opt,name=CloseProfitByTrade,proto3" json:"CloseProfitByTrade,omitempty"`
	PositionProfitByDate  float64 `protobuf:"fixed64,17,opt,name=PositionProfitByDate,proto3" json:"PositionProfitByDate,omitempty"`
	PositionProfitByTrade float64 `protobuf:"fixed64,18,opt,name=PositionProfitByTrade,proto3" json:"PositionProfitByTrade,omitempty"`
	Margin                float64 `protobuf:"fixed64,19,opt,name=Margin,proto3" json:"Margin,omitempty"`
	ExchMargin            float64 `protobuf:"fixed64,20,opt,name=ExchMargin,proto3" json:"ExchMargin,omitempty"`
	MarginRateByMoney     float64 `protobuf:"fixed64,21,opt,name=MarginRateByMoney,proto3" json:"MarginRateByMoney,omitempty"`
	MarginRateByVolume    float64 `protobuf:"fixed64,22,opt,name=MarginRateByVolume,proto3" json:"MarginRateByVolume,omitempty"`
	LastSettlementPrice   float64 `protobuf:"fixed64,23,opt,name=LastSettlementPrice,proto3" json:"LastSettlementPrice,omitempty"`
	SettlementPrice       float64 `protobuf:"fixed64,24,opt,name=SettlementPrice,proto3" json:"SettlementPrice,omitempty"`
	CloseVolume           int32   `protobuf:"varint,25,opt,name=CloseVolume,proto3" json:"CloseVolume,omitempty"`
	CloseAmount           float64 `protobuf:"fixed64,26,opt,name=CloseAmount,proto3" json:"CloseAmount,omitempty"`
	TimeFirstVolume       int32   `protobuf:"varint,27,opt,name=TimeFirstVolume,proto3" json:"TimeFirstVolume,omitempty"`
	InvestUnitID          string  `protobuf:"bytes,28,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcInvestorPositionDetailField) Reset() {
	*x = CThostFtdcInvestorPositionDetailField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorPositionDetailField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorPositionDetailField) ProtoMessage() {}

func (x *CThostFtdcInvestorPositionDetailField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorPositionDetailField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorPositionDetailField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{212}
}

func (x *CThostFtdcInvestorPositionDetailField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetTradeType() int32 {
	if x != nil {
		return x.TradeType
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetCombInstrumentID() string {
	if x != nil {
		return x.CombInstrumentID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionDetailField) GetCloseProfitByDate() float64 {
	if x != nil {
		return x.CloseProfitByDate
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetCloseProfitByTrade() float64 {
	if x != nil {
		return x.CloseProfitByTrade
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetPositionProfitByDate() float64 {
	if x != nil {
		return x.PositionProfitByDate
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetPositionProfitByTrade() float64 {
	if x != nil {
		return x.PositionProfitByTrade
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetExchMargin() float64 {
	if x != nil {
		return x.ExchMargin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetMarginRateByMoney() float64 {
	if x != nil {
		return x.MarginRateByMoney
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetMarginRateByVolume() float64 {
	if x != nil {
		return x.MarginRateByVolume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetLastSettlementPrice() float64 {
	if x != nil {
		return x.LastSettlementPrice
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetCloseVolume() int32 {
	if x != nil {
		return x.CloseVolume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetCloseAmount() float64 {
	if x != nil {
		return x.CloseAmount
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetTimeFirstVolume() int32 {
	if x != nil {
		return x.TimeFirstVolume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionDetailField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcTradingAccountPasswordField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID  string `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	CurrencyID string `protobuf:"bytes,4,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcTradingAccountPasswordField) Reset() {
	*x = CThostFtdcTradingAccountPasswordField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingAccountPasswordField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingAccountPasswordField) ProtoMessage() {}

func (x *CThostFtdcTradingAccountPasswordField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingAccountPasswordField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingAccountPasswordField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{213}
}

func (x *CThostFtdcTradingAccountPasswordField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcMDTraderOfferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID               string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TraderID                 string `protobuf:"bytes,2,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	ParticipantID            string `protobuf:"bytes,3,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	Password                 string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID                int32  `protobuf:"varint,5,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderLocalID             string `protobuf:"bytes,6,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	TraderConnectStatus      int32  `protobuf:"varint,7,opt,name=TraderConnectStatus,proto3" json:"TraderConnectStatus,omitempty"`
	ConnectRequestDate       string `protobuf:"bytes,8,opt,name=ConnectRequestDate,proto3" json:"ConnectRequestDate,omitempty"`
	ConnectRequestTime       string `protobuf:"bytes,9,opt,name=ConnectRequestTime,proto3" json:"ConnectRequestTime,omitempty"`
	LastReportDate           string `protobuf:"bytes,10,opt,name=LastReportDate,proto3" json:"LastReportDate,omitempty"`
	LastReportTime           string `protobuf:"bytes,11,opt,name=LastReportTime,proto3" json:"LastReportTime,omitempty"`
	ConnectDate              string `protobuf:"bytes,12,opt,name=ConnectDate,proto3" json:"ConnectDate,omitempty"`
	ConnectTime              string `protobuf:"bytes,13,opt,name=ConnectTime,proto3" json:"ConnectTime,omitempty"`
	StartDate                string `protobuf:"bytes,14,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	StartTime                string `protobuf:"bytes,15,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	TradingDay               string `protobuf:"bytes,16,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID                 string `protobuf:"bytes,17,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	MaxTradeID               string `protobuf:"bytes,18,opt,name=MaxTradeID,proto3" json:"MaxTradeID,omitempty"`
	MaxOrderMessageReference string `protobuf:"bytes,19,opt,name=MaxOrderMessageReference,proto3" json:"MaxOrderMessageReference,omitempty"`
}

func (x *CThostFtdcMDTraderOfferField) Reset() {
	*x = CThostFtdcMDTraderOfferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMDTraderOfferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMDTraderOfferField) ProtoMessage() {}

func (x *CThostFtdcMDTraderOfferField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMDTraderOfferField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMDTraderOfferField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{214}
}

func (x *CThostFtdcMDTraderOfferField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcMDTraderOfferField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetTraderConnectStatus() int32 {
	if x != nil {
		return x.TraderConnectStatus
	}
	return 0
}

func (x *CThostFtdcMDTraderOfferField) GetConnectRequestDate() string {
	if x != nil {
		return x.ConnectRequestDate
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetConnectRequestTime() string {
	if x != nil {
		return x.ConnectRequestTime
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetLastReportDate() string {
	if x != nil {
		return x.LastReportDate
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetLastReportTime() string {
	if x != nil {
		return x.LastReportTime
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetConnectDate() string {
	if x != nil {
		return x.ConnectDate
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetConnectTime() string {
	if x != nil {
		return x.ConnectTime
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetMaxTradeID() string {
	if x != nil {
		return x.MaxTradeID
	}
	return ""
}

func (x *CThostFtdcMDTraderOfferField) GetMaxOrderMessageReference() string {
	if x != nil {
		return x.MaxOrderMessageReference
	}
	return ""
}

type CThostFtdcQryMDTraderOfferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID    string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID string `protobuf:"bytes,2,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	TraderID      string `protobuf:"bytes,3,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
}

func (x *CThostFtdcQryMDTraderOfferField) Reset() {
	*x = CThostFtdcQryMDTraderOfferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryMDTraderOfferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryMDTraderOfferField) ProtoMessage() {}

func (x *CThostFtdcQryMDTraderOfferField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryMDTraderOfferField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryMDTraderOfferField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{215}
}

func (x *CThostFtdcQryMDTraderOfferField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryMDTraderOfferField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcQryMDTraderOfferField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

type CThostFtdcQryNoticeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (x *CThostFtdcQryNoticeField) Reset() {
	*x = CThostFtdcQryNoticeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryNoticeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryNoticeField) ProtoMessage() {}

func (x *CThostFtdcQryNoticeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryNoticeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryNoticeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{216}
}

func (x *CThostFtdcQryNoticeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

type CThostFtdcNoticeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	Content       string `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	SequenceLabel string `protobuf:"bytes,3,opt,name=SequenceLabel,proto3" json:"SequenceLabel,omitempty"`
}

func (x *CThostFtdcNoticeField) Reset() {
	*x = CThostFtdcNoticeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcNoticeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcNoticeField) ProtoMessage() {}

func (x *CThostFtdcNoticeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcNoticeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcNoticeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{217}
}

func (x *CThostFtdcNoticeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcNoticeField) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CThostFtdcNoticeField) GetSequenceLabel() string {
	if x != nil {
		return x.SequenceLabel
	}
	return ""
}

type CThostFtdcUserRightField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserRightType int32  `protobuf:"varint,3,opt,name=UserRightType,proto3" json:"UserRightType,omitempty"`
	IsForbidden   int32  `protobuf:"varint,4,opt,name=IsForbidden,proto3" json:"IsForbidden,omitempty"`
}

func (x *CThostFtdcUserRightField) Reset() {
	*x = CThostFtdcUserRightField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcUserRightField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcUserRightField) ProtoMessage() {}

func (x *CThostFtdcUserRightField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcUserRightField.ProtoReflect.Descriptor instead.
func (*CThostFtdcUserRightField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{218}
}

func (x *CThostFtdcUserRightField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcUserRightField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcUserRightField) GetUserRightType() int32 {
	if x != nil {
		return x.UserRightType
	}
	return 0
}

func (x *CThostFtdcUserRightField) GetIsForbidden() int32 {
	if x != nil {
		return x.IsForbidden
	}
	return 0
}

type CThostFtdcQrySettlementInfoConfirmField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	AccountID  string `protobuf:"bytes,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID string `protobuf:"bytes,4,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcQrySettlementInfoConfirmField) Reset() {
	*x = CThostFtdcQrySettlementInfoConfirmField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySettlementInfoConfirmField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySettlementInfoConfirmField) ProtoMessage() {}

func (x *CThostFtdcQrySettlementInfoConfirmField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySettlementInfoConfirmField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySettlementInfoConfirmField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{219}
}

func (x *CThostFtdcQrySettlementInfoConfirmField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySettlementInfoConfirmField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQrySettlementInfoConfirmField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcQrySettlementInfoConfirmField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcLoadSettlementInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (x *CThostFtdcLoadSettlementInfoField) Reset() {
	*x = CThostFtdcLoadSettlementInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcLoadSettlementInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcLoadSettlementInfoField) ProtoMessage() {}

func (x *CThostFtdcLoadSettlementInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcLoadSettlementInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcLoadSettlementInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{220}
}

func (x *CThostFtdcLoadSettlementInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

type CThostFtdcBrokerWithdrawAlgorithmField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	WithdrawAlgorithm       int32   `protobuf:"varint,2,opt,name=WithdrawAlgorithm,proto3" json:"WithdrawAlgorithm,omitempty"`
	UsingRatio              float64 `protobuf:"fixed64,3,opt,name=UsingRatio,proto3" json:"UsingRatio,omitempty"`
	IncludeCloseProfit      int32   `protobuf:"varint,4,opt,name=IncludeCloseProfit,proto3" json:"IncludeCloseProfit,omitempty"`
	AllWithoutTrade         int32   `protobuf:"varint,5,opt,name=AllWithoutTrade,proto3" json:"AllWithoutTrade,omitempty"`
	AvailIncludeCloseProfit int32   `protobuf:"varint,6,opt,name=AvailIncludeCloseProfit,proto3" json:"AvailIncludeCloseProfit,omitempty"`
	IsBrokerUserEvent       int32   `protobuf:"varint,7,opt,name=IsBrokerUserEvent,proto3" json:"IsBrokerUserEvent,omitempty"`
	CurrencyID              string  `protobuf:"bytes,8,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	FundMortgageRatio       float64 `protobuf:"fixed64,9,opt,name=FundMortgageRatio,proto3" json:"FundMortgageRatio,omitempty"`
	BalanceAlgorithm        int32   `protobuf:"varint,10,opt,name=BalanceAlgorithm,proto3" json:"BalanceAlgorithm,omitempty"`
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) Reset() {
	*x = CThostFtdcBrokerWithdrawAlgorithmField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerWithdrawAlgorithmField) ProtoMessage() {}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerWithdrawAlgorithmField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerWithdrawAlgorithmField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{221}
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetWithdrawAlgorithm() int32 {
	if x != nil {
		return x.WithdrawAlgorithm
	}
	return 0
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetUsingRatio() float64 {
	if x != nil {
		return x.UsingRatio
	}
	return 0
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetIncludeCloseProfit() int32 {
	if x != nil {
		return x.IncludeCloseProfit
	}
	return 0
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetAllWithoutTrade() int32 {
	if x != nil {
		return x.AllWithoutTrade
	}
	return 0
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetAvailIncludeCloseProfit() int32 {
	if x != nil {
		return x.AvailIncludeCloseProfit
	}
	return 0
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetIsBrokerUserEvent() int32 {
	if x != nil {
		return x.IsBrokerUserEvent
	}
	return 0
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetFundMortgageRatio() float64 {
	if x != nil {
		return x.FundMortgageRatio
	}
	return 0
}

func (x *CThostFtdcBrokerWithdrawAlgorithmField) GetBalanceAlgorithm() int32 {
	if x != nil {
		return x.BalanceAlgorithm
	}
	return 0
}

type CThostFtdcTradingAccountPasswordUpdateV1Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID    string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID  string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OldPassword string `protobuf:"bytes,3,opt,name=OldPassword,proto3" json:"OldPassword,omitempty"`
	NewPassword string `protobuf:"bytes,4,opt,name=NewPassword,proto3" json:"NewPassword,omitempty"`
}

func (x *CThostFtdcTradingAccountPasswordUpdateV1Field) Reset() {
	*x = CThostFtdcTradingAccountPasswordUpdateV1Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingAccountPasswordUpdateV1Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingAccountPasswordUpdateV1Field) ProtoMessage() {}

func (x *CThostFtdcTradingAccountPasswordUpdateV1Field) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingAccountPasswordUpdateV1Field.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingAccountPasswordUpdateV1Field) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{222}
}

func (x *CThostFtdcTradingAccountPasswordUpdateV1Field) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordUpdateV1Field) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordUpdateV1Field) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordUpdateV1Field) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type CThostFtdcTradingAccountPasswordUpdateField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID    string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID   string `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	OldPassword string `protobuf:"bytes,3,opt,name=OldPassword,proto3" json:"OldPassword,omitempty"`
	NewPassword string `protobuf:"bytes,4,opt,name=NewPassword,proto3" json:"NewPassword,omitempty"`
	CurrencyID  string `protobuf:"bytes,5,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcTradingAccountPasswordUpdateField) Reset() {
	*x = CThostFtdcTradingAccountPasswordUpdateField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingAccountPasswordUpdateField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingAccountPasswordUpdateField) ProtoMessage() {}

func (x *CThostFtdcTradingAccountPasswordUpdateField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingAccountPasswordUpdateField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingAccountPasswordUpdateField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{223}
}

func (x *CThostFtdcTradingAccountPasswordUpdateField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordUpdateField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordUpdateField) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordUpdateField) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *CThostFtdcTradingAccountPasswordUpdateField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcQryCombinationLegField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombInstrumentID string `protobuf:"bytes,1,opt,name=CombInstrumentID,proto3" json:"CombInstrumentID,omitempty"`
	LegID            int32  `protobuf:"varint,2,opt,name=LegID,proto3" json:"LegID,omitempty"`
	LegInstrumentID  string `protobuf:"bytes,3,opt,name=LegInstrumentID,proto3" json:"LegInstrumentID,omitempty"`
}

func (x *CThostFtdcQryCombinationLegField) Reset() {
	*x = CThostFtdcQryCombinationLegField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryCombinationLegField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryCombinationLegField) ProtoMessage() {}

func (x *CThostFtdcQryCombinationLegField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryCombinationLegField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryCombinationLegField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{224}
}

func (x *CThostFtdcQryCombinationLegField) GetCombInstrumentID() string {
	if x != nil {
		return x.CombInstrumentID
	}
	return ""
}

func (x *CThostFtdcQryCombinationLegField) GetLegID() int32 {
	if x != nil {
		return x.LegID
	}
	return 0
}

func (x *CThostFtdcQryCombinationLegField) GetLegInstrumentID() string {
	if x != nil {
		return x.LegInstrumentID
	}
	return ""
}

type CThostFtdcQrySyncStatusField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
}

func (x *CThostFtdcQrySyncStatusField) Reset() {
	*x = CThostFtdcQrySyncStatusField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySyncStatusField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySyncStatusField) ProtoMessage() {}

func (x *CThostFtdcQrySyncStatusField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySyncStatusField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySyncStatusField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{225}
}

func (x *CThostFtdcQrySyncStatusField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

type CThostFtdcCombinationLegField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CombInstrumentID string `protobuf:"bytes,1,opt,name=CombInstrumentID,proto3" json:"CombInstrumentID,omitempty"`
	LegID            int32  `protobuf:"varint,2,opt,name=LegID,proto3" json:"LegID,omitempty"`
	LegInstrumentID  string `protobuf:"bytes,3,opt,name=LegInstrumentID,proto3" json:"LegInstrumentID,omitempty"`
	Direction        int32  `protobuf:"varint,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	LegMultiple      int32  `protobuf:"varint,5,opt,name=LegMultiple,proto3" json:"LegMultiple,omitempty"`
	ImplyLevel       int32  `protobuf:"varint,6,opt,name=ImplyLevel,proto3" json:"ImplyLevel,omitempty"`
}

func (x *CThostFtdcCombinationLegField) Reset() {
	*x = CThostFtdcCombinationLegField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCombinationLegField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCombinationLegField) ProtoMessage() {}

func (x *CThostFtdcCombinationLegField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCombinationLegField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCombinationLegField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{226}
}

func (x *CThostFtdcCombinationLegField) GetCombInstrumentID() string {
	if x != nil {
		return x.CombInstrumentID
	}
	return ""
}

func (x *CThostFtdcCombinationLegField) GetLegID() int32 {
	if x != nil {
		return x.LegID
	}
	return 0
}

func (x *CThostFtdcCombinationLegField) GetLegInstrumentID() string {
	if x != nil {
		return x.LegInstrumentID
	}
	return ""
}

func (x *CThostFtdcCombinationLegField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcCombinationLegField) GetLegMultiple() int32 {
	if x != nil {
		return x.LegMultiple
	}
	return 0
}

func (x *CThostFtdcCombinationLegField) GetImplyLevel() int32 {
	if x != nil {
		return x.ImplyLevel
	}
	return 0
}

type CThostFtdcSyncStatusField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay     string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	DataSyncStatus int32  `protobuf:"varint,2,opt,name=DataSyncStatus,proto3" json:"DataSyncStatus,omitempty"`
}

func (x *CThostFtdcSyncStatusField) Reset() {
	*x = CThostFtdcSyncStatusField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSyncStatusField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSyncStatusField) ProtoMessage() {}

func (x *CThostFtdcSyncStatusField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSyncStatusField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSyncStatusField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{227}
}

func (x *CThostFtdcSyncStatusField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcSyncStatusField) GetDataSyncStatus() int32 {
	if x != nil {
		return x.DataSyncStatus
	}
	return 0
}

type CThostFtdcQryLinkManField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQryLinkManField) Reset() {
	*x = CThostFtdcQryLinkManField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryLinkManField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryLinkManField) ProtoMessage() {}

func (x *CThostFtdcQryLinkManField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryLinkManField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryLinkManField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{228}
}

func (x *CThostFtdcQryLinkManField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryLinkManField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcLinkManField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID           string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	PersonType         int32  `protobuf:"varint,3,opt,name=PersonType,proto3" json:"PersonType,omitempty"`
	IdentifiedCardType int32  `protobuf:"varint,4,opt,name=IdentifiedCardType,proto3" json:"IdentifiedCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,5,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	PersonName         []byte `protobuf:"bytes,6,opt,name=PersonName,proto3" json:"PersonName,omitempty"`
	Telephone          string `protobuf:"bytes,7,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	Address            string `protobuf:"bytes,8,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,9,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Priority           int32  `protobuf:"varint,10,opt,name=Priority,proto3" json:"Priority,omitempty"`
	UOAZipCode         string `protobuf:"bytes,11,opt,name=UOAZipCode,proto3" json:"UOAZipCode,omitempty"`
	PersonFullName     []byte `protobuf:"bytes,12,opt,name=PersonFullName,proto3" json:"PersonFullName,omitempty"`
}

func (x *CThostFtdcLinkManField) Reset() {
	*x = CThostFtdcLinkManField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcLinkManField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcLinkManField) ProtoMessage() {}

func (x *CThostFtdcLinkManField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcLinkManField.ProtoReflect.Descriptor instead.
func (*CThostFtdcLinkManField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{229}
}

func (x *CThostFtdcLinkManField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcLinkManField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcLinkManField) GetPersonType() int32 {
	if x != nil {
		return x.PersonType
	}
	return 0
}

func (x *CThostFtdcLinkManField) GetIdentifiedCardType() int32 {
	if x != nil {
		return x.IdentifiedCardType
	}
	return 0
}

func (x *CThostFtdcLinkManField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcLinkManField) GetPersonName() []byte {
	if x != nil {
		return x.PersonName
	}
	return nil
}

func (x *CThostFtdcLinkManField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcLinkManField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcLinkManField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcLinkManField) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *CThostFtdcLinkManField) GetUOAZipCode() string {
	if x != nil {
		return x.UOAZipCode
	}
	return ""
}

func (x *CThostFtdcLinkManField) GetPersonFullName() []byte {
	if x != nil {
		return x.PersonFullName
	}
	return nil
}

type CThostFtdcQryBrokerUserEventField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserEventType int32  `protobuf:"varint,3,opt,name=UserEventType,proto3" json:"UserEventType,omitempty"`
}

func (x *CThostFtdcQryBrokerUserEventField) Reset() {
	*x = CThostFtdcQryBrokerUserEventField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBrokerUserEventField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBrokerUserEventField) ProtoMessage() {}

func (x *CThostFtdcQryBrokerUserEventField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBrokerUserEventField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBrokerUserEventField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{230}
}

func (x *CThostFtdcQryBrokerUserEventField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryBrokerUserEventField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcQryBrokerUserEventField) GetUserEventType() int32 {
	if x != nil {
		return x.UserEventType
	}
	return 0
}

type CThostFtdcBrokerUserEventField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID          string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	UserEventType   int32  `protobuf:"varint,3,opt,name=UserEventType,proto3" json:"UserEventType,omitempty"`
	EventSequenceNo int32  `protobuf:"varint,4,opt,name=EventSequenceNo,proto3" json:"EventSequenceNo,omitempty"`
	EventDate       string `protobuf:"bytes,5,opt,name=EventDate,proto3" json:"EventDate,omitempty"`
	EventTime       string `protobuf:"bytes,6,opt,name=EventTime,proto3" json:"EventTime,omitempty"`
	UserEventInfo   string `protobuf:"bytes,7,opt,name=UserEventInfo,proto3" json:"UserEventInfo,omitempty"`
	InvestorID      string `protobuf:"bytes,8,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID    string `protobuf:"bytes,9,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcBrokerUserEventField) Reset() {
	*x = CThostFtdcBrokerUserEventField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerUserEventField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerUserEventField) ProtoMessage() {}

func (x *CThostFtdcBrokerUserEventField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerUserEventField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerUserEventField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{231}
}

func (x *CThostFtdcBrokerUserEventField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerUserEventField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcBrokerUserEventField) GetUserEventType() int32 {
	if x != nil {
		return x.UserEventType
	}
	return 0
}

func (x *CThostFtdcBrokerUserEventField) GetEventSequenceNo() int32 {
	if x != nil {
		return x.EventSequenceNo
	}
	return 0
}

func (x *CThostFtdcBrokerUserEventField) GetEventDate() string {
	if x != nil {
		return x.EventDate
	}
	return ""
}

func (x *CThostFtdcBrokerUserEventField) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *CThostFtdcBrokerUserEventField) GetUserEventInfo() string {
	if x != nil {
		return x.UserEventInfo
	}
	return ""
}

func (x *CThostFtdcBrokerUserEventField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcBrokerUserEventField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcQryContractBankField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BankID     string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBrchID string `protobuf:"bytes,3,opt,name=BankBrchID,proto3" json:"BankBrchID,omitempty"`
}

func (x *CThostFtdcQryContractBankField) Reset() {
	*x = CThostFtdcQryContractBankField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryContractBankField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryContractBankField) ProtoMessage() {}

func (x *CThostFtdcQryContractBankField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryContractBankField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryContractBankField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{232}
}

func (x *CThostFtdcQryContractBankField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryContractBankField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcQryContractBankField) GetBankBrchID() string {
	if x != nil {
		return x.BankBrchID
	}
	return ""
}

type CThostFtdcContractBankField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BankID     string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBrchID string `protobuf:"bytes,3,opt,name=BankBrchID,proto3" json:"BankBrchID,omitempty"`
	BankName   []byte `protobuf:"bytes,4,opt,name=BankName,proto3" json:"BankName,omitempty"`
}

func (x *CThostFtdcContractBankField) Reset() {
	*x = CThostFtdcContractBankField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcContractBankField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcContractBankField) ProtoMessage() {}

func (x *CThostFtdcContractBankField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcContractBankField.ProtoReflect.Descriptor instead.
func (*CThostFtdcContractBankField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{233}
}

func (x *CThostFtdcContractBankField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcContractBankField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcContractBankField) GetBankBrchID() string {
	if x != nil {
		return x.BankBrchID
	}
	return ""
}

func (x *CThostFtdcContractBankField) GetBankName() []byte {
	if x != nil {
		return x.BankName
	}
	return nil
}

type CThostFtdcInvestorPositionCombineDetailField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay         string  `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	OpenDate           string  `protobuf:"bytes,2,opt,name=OpenDate,proto3" json:"OpenDate,omitempty"`
	ExchangeID         string  `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	SettlementID       int32   `protobuf:"varint,4,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	BrokerID           string  `protobuf:"bytes,5,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID         string  `protobuf:"bytes,6,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ComTradeID         string  `protobuf:"bytes,7,opt,name=ComTradeID,proto3" json:"ComTradeID,omitempty"`
	TradeID            string  `protobuf:"bytes,8,opt,name=TradeID,proto3" json:"TradeID,omitempty"`
	InstrumentID       string  `protobuf:"bytes,9,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HedgeFlag          int32   `protobuf:"varint,10,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	Direction          int32   `protobuf:"varint,11,opt,name=Direction,proto3" json:"Direction,omitempty"`
	TotalAmt           int32   `protobuf:"varint,12,opt,name=TotalAmt,proto3" json:"TotalAmt,omitempty"`
	Margin             float64 `protobuf:"fixed64,13,opt,name=Margin,proto3" json:"Margin,omitempty"`
	ExchMargin         float64 `protobuf:"fixed64,14,opt,name=ExchMargin,proto3" json:"ExchMargin,omitempty"`
	MarginRateByMoney  float64 `protobuf:"fixed64,15,opt,name=MarginRateByMoney,proto3" json:"MarginRateByMoney,omitempty"`
	MarginRateByVolume float64 `protobuf:"fixed64,16,opt,name=MarginRateByVolume,proto3" json:"MarginRateByVolume,omitempty"`
	LegID              int32   `protobuf:"varint,17,opt,name=LegID,proto3" json:"LegID,omitempty"`
	LegMultiple        int32   `protobuf:"varint,18,opt,name=LegMultiple,proto3" json:"LegMultiple,omitempty"`
	CombInstrumentID   string  `protobuf:"bytes,19,opt,name=CombInstrumentID,proto3" json:"CombInstrumentID,omitempty"`
	TradeGroupID       int32   `protobuf:"varint,20,opt,name=TradeGroupID,proto3" json:"TradeGroupID,omitempty"`
	InvestUnitID       string  `protobuf:"bytes,21,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcInvestorPositionCombineDetailField) Reset() {
	*x = CThostFtdcInvestorPositionCombineDetailField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorPositionCombineDetailField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorPositionCombineDetailField) ProtoMessage() {}

func (x *CThostFtdcInvestorPositionCombineDetailField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorPositionCombineDetailField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorPositionCombineDetailField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{234}
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetComTradeID() string {
	if x != nil {
		return x.ComTradeID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetTotalAmt() int32 {
	if x != nil {
		return x.TotalAmt
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetMargin() float64 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetExchMargin() float64 {
	if x != nil {
		return x.ExchMargin
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetMarginRateByMoney() float64 {
	if x != nil {
		return x.MarginRateByMoney
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetMarginRateByVolume() float64 {
	if x != nil {
		return x.MarginRateByVolume
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetLegID() int32 {
	if x != nil {
		return x.LegID
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetLegMultiple() int32 {
	if x != nil {
		return x.LegMultiple
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetCombInstrumentID() string {
	if x != nil {
		return x.CombInstrumentID
	}
	return ""
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetTradeGroupID() int32 {
	if x != nil {
		return x.TradeGroupID
	}
	return 0
}

func (x *CThostFtdcInvestorPositionCombineDetailField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcParkedOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID        string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OrderRef            string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	UserID              string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrderPriceType      int32   `protobuf:"varint,6,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"`
	Direction           int32   `protobuf:"varint,7,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CombOffsetFlag      string  `protobuf:"bytes,8,opt,name=CombOffsetFlag,proto3" json:"CombOffsetFlag,omitempty"`
	CombHedgeFlag       string  `protobuf:"bytes,9,opt,name=CombHedgeFlag,proto3" json:"CombHedgeFlag,omitempty"`
	LimitPrice          float64 `protobuf:"fixed64,10,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeTotalOriginal int32   `protobuf:"varint,11,opt,name=VolumeTotalOriginal,proto3" json:"VolumeTotalOriginal,omitempty"`
	TimeCondition       int32   `protobuf:"varint,12,opt,name=TimeCondition,proto3" json:"TimeCondition,omitempty"`
	GTDDate             string  `protobuf:"bytes,13,opt,name=GTDDate,proto3" json:"GTDDate,omitempty"`
	VolumeCondition     int32   `protobuf:"varint,14,opt,name=VolumeCondition,proto3" json:"VolumeCondition,omitempty"`
	MinVolume           int32   `protobuf:"varint,15,opt,name=MinVolume,proto3" json:"MinVolume,omitempty"`
	ContingentCondition int32   `protobuf:"varint,16,opt,name=ContingentCondition,proto3" json:"ContingentCondition,omitempty"`
	StopPrice           float64 `protobuf:"fixed64,17,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	ForceCloseReason    int32   `protobuf:"varint,18,opt,name=ForceCloseReason,proto3" json:"ForceCloseReason,omitempty"`
	IsAutoSuspend       int32   `protobuf:"varint,19,opt,name=IsAutoSuspend,proto3" json:"IsAutoSuspend,omitempty"`
	BusinessUnit        string  `protobuf:"bytes,20,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	RequestID           int32   `protobuf:"varint,21,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	UserForceClose      int32   `protobuf:"varint,22,opt,name=UserForceClose,proto3" json:"UserForceClose,omitempty"`
	ExchangeID          string  `protobuf:"bytes,23,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParkedOrderID       string  `protobuf:"bytes,24,opt,name=ParkedOrderID,proto3" json:"ParkedOrderID,omitempty"`
	UserType            int32   `protobuf:"varint,25,opt,name=UserType,proto3" json:"UserType,omitempty"`
	Status              int32   `protobuf:"varint,26,opt,name=Status,proto3" json:"Status,omitempty"`
	ErrorID             int32   `protobuf:"varint,27,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg            []byte  `protobuf:"bytes,28,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	IsSwapOrder         int32   `protobuf:"varint,29,opt,name=IsSwapOrder,proto3" json:"IsSwapOrder,omitempty"`
	AccountID           string  `protobuf:"bytes,30,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID          string  `protobuf:"bytes,31,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	ClientID            string  `protobuf:"bytes,32,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	InvestUnitID        string  `protobuf:"bytes,33,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress           string  `protobuf:"bytes,34,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string  `protobuf:"bytes,35,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcParkedOrderField) Reset() {
	*x = CThostFtdcParkedOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcParkedOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcParkedOrderField) ProtoMessage() {}

func (x *CThostFtdcParkedOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcParkedOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcParkedOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{235}
}

func (x *CThostFtdcParkedOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetTimeCondition() int32 {
	if x != nil {
		return x.TimeCondition
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetGTDDate() string {
	if x != nil {
		return x.GTDDate
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetVolumeCondition() int32 {
	if x != nil {
		return x.VolumeCondition
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetContingentCondition() int32 {
	if x != nil {
		return x.ContingentCondition
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetForceCloseReason() int32 {
	if x != nil {
		return x.ForceCloseReason
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetUserForceClose() int32 {
	if x != nil {
		return x.UserForceClose
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetParkedOrderID() string {
	if x != nil {
		return x.ParkedOrderID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcParkedOrderField) GetIsSwapOrder() int32 {
	if x != nil {
		return x.IsSwapOrder
	}
	return 0
}

func (x *CThostFtdcParkedOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcParkedOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcParkedOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OrderActionRef      int32   `protobuf:"varint,3,opt,name=OrderActionRef,proto3" json:"OrderActionRef,omitempty"`
	OrderRef            string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	RequestID           int32   `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID             int32   `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID           int32   `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID          string  `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID          string  `protobuf:"bytes,9,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	ActionFlag          int32   `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	LimitPrice          float64 `protobuf:"fixed64,11,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeChange        int32   `protobuf:"varint,12,opt,name=VolumeChange,proto3" json:"VolumeChange,omitempty"`
	UserID              string  `protobuf:"bytes,13,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InstrumentID        string  `protobuf:"bytes,14,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ParkedOrderActionID string  `protobuf:"bytes,15,opt,name=ParkedOrderActionID,proto3" json:"ParkedOrderActionID,omitempty"`
	UserType            int32   `protobuf:"varint,16,opt,name=UserType,proto3" json:"UserType,omitempty"`
	Status              int32   `protobuf:"varint,17,opt,name=Status,proto3" json:"Status,omitempty"`
	ErrorID             int32   `protobuf:"varint,18,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg            []byte  `protobuf:"bytes,19,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	InvestUnitID        string  `protobuf:"bytes,20,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress           string  `protobuf:"bytes,21,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string  `protobuf:"bytes,22,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcParkedOrderActionField) Reset() {
	*x = CThostFtdcParkedOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcParkedOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcParkedOrderActionField) ProtoMessage() {}

func (x *CThostFtdcParkedOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcParkedOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcParkedOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{236}
}

func (x *CThostFtdcParkedOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetVolumeChange() int32 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetParkedOrderActionID() string {
	if x != nil {
		return x.ParkedOrderActionID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcParkedOrderActionField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcParkedOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcParkedOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryParkedOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryParkedOrderField) Reset() {
	*x = CThostFtdcQryParkedOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryParkedOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryParkedOrderField) ProtoMessage() {}

func (x *CThostFtdcQryParkedOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryParkedOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryParkedOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{237}
}

func (x *CThostFtdcQryParkedOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryParkedOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryParkedOrderActionField) Reset() {
	*x = CThostFtdcQryParkedOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryParkedOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryParkedOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryParkedOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryParkedOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryParkedOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{238}
}

func (x *CThostFtdcQryParkedOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryParkedOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcRemoveParkedOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID    string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ParkedOrderID string `protobuf:"bytes,3,opt,name=ParkedOrderID,proto3" json:"ParkedOrderID,omitempty"`
	InvestUnitID  string `protobuf:"bytes,4,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcRemoveParkedOrderField) Reset() {
	*x = CThostFtdcRemoveParkedOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRemoveParkedOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRemoveParkedOrderField) ProtoMessage() {}

func (x *CThostFtdcRemoveParkedOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRemoveParkedOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRemoveParkedOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{239}
}

func (x *CThostFtdcRemoveParkedOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRemoveParkedOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcRemoveParkedOrderField) GetParkedOrderID() string {
	if x != nil {
		return x.ParkedOrderID
	}
	return ""
}

func (x *CThostFtdcRemoveParkedOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcRemoveParkedOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ParkedOrderActionID string `protobuf:"bytes,3,opt,name=ParkedOrderActionID,proto3" json:"ParkedOrderActionID,omitempty"`
	InvestUnitID        string `protobuf:"bytes,4,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcRemoveParkedOrderActionField) Reset() {
	*x = CThostFtdcRemoveParkedOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRemoveParkedOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRemoveParkedOrderActionField) ProtoMessage() {}

func (x *CThostFtdcRemoveParkedOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRemoveParkedOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRemoveParkedOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{240}
}

func (x *CThostFtdcRemoveParkedOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRemoveParkedOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcRemoveParkedOrderActionField) GetParkedOrderActionID() string {
	if x != nil {
		return x.ParkedOrderActionID
	}
	return ""
}

func (x *CThostFtdcRemoveParkedOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcInvestorWithdrawAlgorithmField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorRange     int32   `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	InvestorID        string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	UsingRatio        float64 `protobuf:"fixed64,4,opt,name=UsingRatio,proto3" json:"UsingRatio,omitempty"`
	CurrencyID        string  `protobuf:"bytes,5,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	FundMortgageRatio float64 `protobuf:"fixed64,6,opt,name=FundMortgageRatio,proto3" json:"FundMortgageRatio,omitempty"`
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) Reset() {
	*x = CThostFtdcInvestorWithdrawAlgorithmField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorWithdrawAlgorithmField) ProtoMessage() {}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorWithdrawAlgorithmField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorWithdrawAlgorithmField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{241}
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) GetUsingRatio() float64 {
	if x != nil {
		return x.UsingRatio
	}
	return 0
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcInvestorWithdrawAlgorithmField) GetFundMortgageRatio() float64 {
	if x != nil {
		return x.FundMortgageRatio
	}
	return 0
}

type CThostFtdcQryInvestorPositionCombineDetailField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID         string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID       string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	CombInstrumentID string `protobuf:"bytes,3,opt,name=CombInstrumentID,proto3" json:"CombInstrumentID,omitempty"`
	ExchangeID       string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID     string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) Reset() {
	*x = CThostFtdcQryInvestorPositionCombineDetailField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInvestorPositionCombineDetailField) ProtoMessage() {}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInvestorPositionCombineDetailField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInvestorPositionCombineDetailField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{242}
}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) GetCombInstrumentID() string {
	if x != nil {
		return x.CombInstrumentID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInvestorPositionCombineDetailField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcMarketDataAveragePriceField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AveragePrice float64 `protobuf:"fixed64,1,opt,name=AveragePrice,proto3" json:"AveragePrice,omitempty"`
}

func (x *CThostFtdcMarketDataAveragePriceField) Reset() {
	*x = CThostFtdcMarketDataAveragePriceField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarketDataAveragePriceField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarketDataAveragePriceField) ProtoMessage() {}

func (x *CThostFtdcMarketDataAveragePriceField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarketDataAveragePriceField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarketDataAveragePriceField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{243}
}

func (x *CThostFtdcMarketDataAveragePriceField) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

type CThostFtdcVerifyInvestorPasswordField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	Password   string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *CThostFtdcVerifyInvestorPasswordField) Reset() {
	*x = CThostFtdcVerifyInvestorPasswordField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcVerifyInvestorPasswordField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcVerifyInvestorPasswordField) ProtoMessage() {}

func (x *CThostFtdcVerifyInvestorPasswordField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcVerifyInvestorPasswordField.ProtoReflect.Descriptor instead.
func (*CThostFtdcVerifyInvestorPasswordField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{244}
}

func (x *CThostFtdcVerifyInvestorPasswordField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcVerifyInvestorPasswordField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcVerifyInvestorPasswordField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CThostFtdcUserIPField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IPAddress  string `protobuf:"bytes,3,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	IPMask     string `protobuf:"bytes,4,opt,name=IPMask,proto3" json:"IPMask,omitempty"`
	MacAddress string `protobuf:"bytes,5,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcUserIPField) Reset() {
	*x = CThostFtdcUserIPField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcUserIPField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcUserIPField) ProtoMessage() {}

func (x *CThostFtdcUserIPField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcUserIPField.ProtoReflect.Descriptor instead.
func (*CThostFtdcUserIPField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{245}
}

func (x *CThostFtdcUserIPField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcUserIPField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcUserIPField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcUserIPField) GetIPMask() string {
	if x != nil {
		return x.IPMask
	}
	return ""
}

func (x *CThostFtdcUserIPField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcTradingNoticeInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	SendTime       string `protobuf:"bytes,3,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	FieldContent   string `protobuf:"bytes,4,opt,name=FieldContent,proto3" json:"FieldContent,omitempty"`
	SequenceSeries int32  `protobuf:"varint,5,opt,name=SequenceSeries,proto3" json:"SequenceSeries,omitempty"`
	SequenceNo     int32  `protobuf:"varint,6,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	InvestUnitID   string `protobuf:"bytes,7,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcTradingNoticeInfoField) Reset() {
	*x = CThostFtdcTradingNoticeInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingNoticeInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingNoticeInfoField) ProtoMessage() {}

func (x *CThostFtdcTradingNoticeInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingNoticeInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingNoticeInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{246}
}

func (x *CThostFtdcTradingNoticeInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingNoticeInfoField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcTradingNoticeInfoField) GetSendTime() string {
	if x != nil {
		return x.SendTime
	}
	return ""
}

func (x *CThostFtdcTradingNoticeInfoField) GetFieldContent() string {
	if x != nil {
		return x.FieldContent
	}
	return ""
}

func (x *CThostFtdcTradingNoticeInfoField) GetSequenceSeries() int32 {
	if x != nil {
		return x.SequenceSeries
	}
	return 0
}

func (x *CThostFtdcTradingNoticeInfoField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcTradingNoticeInfoField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcTradingNoticeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorRange  int32  `protobuf:"varint,2,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	InvestorID     string `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	SequenceSeries int32  `protobuf:"varint,4,opt,name=SequenceSeries,proto3" json:"SequenceSeries,omitempty"`
	UserID         string `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	SendTime       string `protobuf:"bytes,6,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	SequenceNo     int32  `protobuf:"varint,7,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	FieldContent   string `protobuf:"bytes,8,opt,name=FieldContent,proto3" json:"FieldContent,omitempty"`
	InvestUnitID   string `protobuf:"bytes,9,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcTradingNoticeField) Reset() {
	*x = CThostFtdcTradingNoticeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingNoticeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingNoticeField) ProtoMessage() {}

func (x *CThostFtdcTradingNoticeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingNoticeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingNoticeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{247}
}

func (x *CThostFtdcTradingNoticeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingNoticeField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcTradingNoticeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcTradingNoticeField) GetSequenceSeries() int32 {
	if x != nil {
		return x.SequenceSeries
	}
	return 0
}

func (x *CThostFtdcTradingNoticeField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcTradingNoticeField) GetSendTime() string {
	if x != nil {
		return x.SendTime
	}
	return ""
}

func (x *CThostFtdcTradingNoticeField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcTradingNoticeField) GetFieldContent() string {
	if x != nil {
		return x.FieldContent
	}
	return ""
}

func (x *CThostFtdcTradingNoticeField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryTradingNoticeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InvestUnitID string `protobuf:"bytes,3,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryTradingNoticeField) Reset() {
	*x = CThostFtdcQryTradingNoticeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTradingNoticeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTradingNoticeField) ProtoMessage() {}

func (x *CThostFtdcQryTradingNoticeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTradingNoticeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTradingNoticeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{248}
}

func (x *CThostFtdcQryTradingNoticeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryTradingNoticeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryTradingNoticeField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryErrOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQryErrOrderField) Reset() {
	*x = CThostFtdcQryErrOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryErrOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryErrOrderField) ProtoMessage() {}

func (x *CThostFtdcQryErrOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryErrOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryErrOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{249}
}

func (x *CThostFtdcQryErrOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryErrOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcErrOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID          string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID        string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OrderRef            string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	UserID              string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrderPriceType      int32   `protobuf:"varint,6,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"`
	Direction           int32   `protobuf:"varint,7,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CombOffsetFlag      string  `protobuf:"bytes,8,opt,name=CombOffsetFlag,proto3" json:"CombOffsetFlag,omitempty"`
	CombHedgeFlag       string  `protobuf:"bytes,9,opt,name=CombHedgeFlag,proto3" json:"CombHedgeFlag,omitempty"`
	LimitPrice          float64 `protobuf:"fixed64,10,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeTotalOriginal int32   `protobuf:"varint,11,opt,name=VolumeTotalOriginal,proto3" json:"VolumeTotalOriginal,omitempty"`
	TimeCondition       int32   `protobuf:"varint,12,opt,name=TimeCondition,proto3" json:"TimeCondition,omitempty"`
	GTDDate             string  `protobuf:"bytes,13,opt,name=GTDDate,proto3" json:"GTDDate,omitempty"`
	VolumeCondition     int32   `protobuf:"varint,14,opt,name=VolumeCondition,proto3" json:"VolumeCondition,omitempty"`
	MinVolume           int32   `protobuf:"varint,15,opt,name=MinVolume,proto3" json:"MinVolume,omitempty"`
	ContingentCondition int32   `protobuf:"varint,16,opt,name=ContingentCondition,proto3" json:"ContingentCondition,omitempty"`
	StopPrice           float64 `protobuf:"fixed64,17,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	ForceCloseReason    int32   `protobuf:"varint,18,opt,name=ForceCloseReason,proto3" json:"ForceCloseReason,omitempty"`
	IsAutoSuspend       int32   `protobuf:"varint,19,opt,name=IsAutoSuspend,proto3" json:"IsAutoSuspend,omitempty"`
	BusinessUnit        string  `protobuf:"bytes,20,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	RequestID           int32   `protobuf:"varint,21,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	UserForceClose      int32   `protobuf:"varint,22,opt,name=UserForceClose,proto3" json:"UserForceClose,omitempty"`
	ErrorID             int32   `protobuf:"varint,23,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg            []byte  `protobuf:"bytes,24,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	IsSwapOrder         int32   `protobuf:"varint,25,opt,name=IsSwapOrder,proto3" json:"IsSwapOrder,omitempty"`
	ExchangeID          string  `protobuf:"bytes,26,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID        string  `protobuf:"bytes,27,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID           string  `protobuf:"bytes,28,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID          string  `protobuf:"bytes,29,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	ClientID            string  `protobuf:"bytes,30,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	IPAddress           string  `protobuf:"bytes,31,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress          string  `protobuf:"bytes,32,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcErrOrderField) Reset() {
	*x = CThostFtdcErrOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcErrOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcErrOrderField) ProtoMessage() {}

func (x *CThostFtdcErrOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcErrOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcErrOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{250}
}

func (x *CThostFtdcErrOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetTimeCondition() int32 {
	if x != nil {
		return x.TimeCondition
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetGTDDate() string {
	if x != nil {
		return x.GTDDate
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetVolumeCondition() int32 {
	if x != nil {
		return x.VolumeCondition
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetContingentCondition() int32 {
	if x != nil {
		return x.ContingentCondition
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetForceCloseReason() int32 {
	if x != nil {
		return x.ForceCloseReason
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetUserForceClose() int32 {
	if x != nil {
		return x.UserForceClose
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcErrOrderField) GetIsSwapOrder() int32 {
	if x != nil {
		return x.IsSwapOrder
	}
	return 0
}

func (x *CThostFtdcErrOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcErrOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcErrorConditionalOrderField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID             string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID           string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID         string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	OrderRef             string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	UserID               string  `protobuf:"bytes,5,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrderPriceType       int32   `protobuf:"varint,6,opt,name=OrderPriceType,proto3" json:"OrderPriceType,omitempty"`
	Direction            int32   `protobuf:"varint,7,opt,name=Direction,proto3" json:"Direction,omitempty"`
	CombOffsetFlag       string  `protobuf:"bytes,8,opt,name=CombOffsetFlag,proto3" json:"CombOffsetFlag,omitempty"`
	CombHedgeFlag        string  `protobuf:"bytes,9,opt,name=CombHedgeFlag,proto3" json:"CombHedgeFlag,omitempty"`
	LimitPrice           float64 `protobuf:"fixed64,10,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeTotalOriginal  int32   `protobuf:"varint,11,opt,name=VolumeTotalOriginal,proto3" json:"VolumeTotalOriginal,omitempty"`
	TimeCondition        int32   `protobuf:"varint,12,opt,name=TimeCondition,proto3" json:"TimeCondition,omitempty"`
	GTDDate              string  `protobuf:"bytes,13,opt,name=GTDDate,proto3" json:"GTDDate,omitempty"`
	VolumeCondition      int32   `protobuf:"varint,14,opt,name=VolumeCondition,proto3" json:"VolumeCondition,omitempty"`
	MinVolume            int32   `protobuf:"varint,15,opt,name=MinVolume,proto3" json:"MinVolume,omitempty"`
	ContingentCondition  int32   `protobuf:"varint,16,opt,name=ContingentCondition,proto3" json:"ContingentCondition,omitempty"`
	StopPrice            float64 `protobuf:"fixed64,17,opt,name=StopPrice,proto3" json:"StopPrice,omitempty"`
	ForceCloseReason     int32   `protobuf:"varint,18,opt,name=ForceCloseReason,proto3" json:"ForceCloseReason,omitempty"`
	IsAutoSuspend        int32   `protobuf:"varint,19,opt,name=IsAutoSuspend,proto3" json:"IsAutoSuspend,omitempty"`
	BusinessUnit         string  `protobuf:"bytes,20,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	RequestID            int32   `protobuf:"varint,21,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	OrderLocalID         string  `protobuf:"bytes,22,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ExchangeID           string  `protobuf:"bytes,23,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ParticipantID        string  `protobuf:"bytes,24,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID             string  `protobuf:"bytes,25,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	ExchangeInstID       string  `protobuf:"bytes,26,opt,name=ExchangeInstID,proto3" json:"ExchangeInstID,omitempty"`
	TraderID             string  `protobuf:"bytes,27,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID            int32   `protobuf:"varint,28,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderSubmitStatus    int32   `protobuf:"varint,29,opt,name=OrderSubmitStatus,proto3" json:"OrderSubmitStatus,omitempty"`
	NotifySequence       int32   `protobuf:"varint,30,opt,name=NotifySequence,proto3" json:"NotifySequence,omitempty"`
	TradingDay           string  `protobuf:"bytes,31,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID         int32   `protobuf:"varint,32,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	OrderSysID           string  `protobuf:"bytes,33,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	OrderSource          int32   `protobuf:"varint,34,opt,name=OrderSource,proto3" json:"OrderSource,omitempty"`
	OrderStatus          int32   `protobuf:"varint,35,opt,name=OrderStatus,proto3" json:"OrderStatus,omitempty"`
	OrderType            int32   `protobuf:"varint,36,opt,name=OrderType,proto3" json:"OrderType,omitempty"`
	VolumeTraded         int32   `protobuf:"varint,37,opt,name=VolumeTraded,proto3" json:"VolumeTraded,omitempty"`
	VolumeTotal          int32   `protobuf:"varint,38,opt,name=VolumeTotal,proto3" json:"VolumeTotal,omitempty"`
	InsertDate           string  `protobuf:"bytes,39,opt,name=InsertDate,proto3" json:"InsertDate,omitempty"`
	InsertTime           string  `protobuf:"bytes,40,opt,name=InsertTime,proto3" json:"InsertTime,omitempty"`
	ActiveTime           string  `protobuf:"bytes,41,opt,name=ActiveTime,proto3" json:"ActiveTime,omitempty"`
	SuspendTime          string  `protobuf:"bytes,42,opt,name=SuspendTime,proto3" json:"SuspendTime,omitempty"`
	UpdateTime           string  `protobuf:"bytes,43,opt,name=UpdateTime,proto3" json:"UpdateTime,omitempty"`
	CancelTime           string  `protobuf:"bytes,44,opt,name=CancelTime,proto3" json:"CancelTime,omitempty"`
	ActiveTraderID       string  `protobuf:"bytes,45,opt,name=ActiveTraderID,proto3" json:"ActiveTraderID,omitempty"`
	ClearingPartID       string  `protobuf:"bytes,46,opt,name=ClearingPartID,proto3" json:"ClearingPartID,omitempty"`
	SequenceNo           int32   `protobuf:"varint,47,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	FrontID              int32   `protobuf:"varint,48,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID            int32   `protobuf:"varint,49,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	UserProductInfo      string  `protobuf:"bytes,50,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	StatusMsg            []byte  `protobuf:"bytes,51,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	UserForceClose       int32   `protobuf:"varint,52,opt,name=UserForceClose,proto3" json:"UserForceClose,omitempty"`
	ActiveUserID         string  `protobuf:"bytes,53,opt,name=ActiveUserID,proto3" json:"ActiveUserID,omitempty"`
	BrokerOrderSeq       int32   `protobuf:"varint,54,opt,name=BrokerOrderSeq,proto3" json:"BrokerOrderSeq,omitempty"`
	RelativeOrderSysID   string  `protobuf:"bytes,55,opt,name=RelativeOrderSysID,proto3" json:"RelativeOrderSysID,omitempty"`
	ZCETotalTradedVolume int32   `protobuf:"varint,56,opt,name=ZCETotalTradedVolume,proto3" json:"ZCETotalTradedVolume,omitempty"`
	ErrorID              int32   `protobuf:"varint,57,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg             []byte  `protobuf:"bytes,58,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	IsSwapOrder          int32   `protobuf:"varint,59,opt,name=IsSwapOrder,proto3" json:"IsSwapOrder,omitempty"`
	BranchID             string  `protobuf:"bytes,60,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID         string  `protobuf:"bytes,61,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	AccountID            string  `protobuf:"bytes,62,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID           string  `protobuf:"bytes,63,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	IPAddress            string  `protobuf:"bytes,64,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress           string  `protobuf:"bytes,65,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
}

func (x *CThostFtdcErrorConditionalOrderField) Reset() {
	*x = CThostFtdcErrorConditionalOrderField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcErrorConditionalOrderField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcErrorConditionalOrderField) ProtoMessage() {}

func (x *CThostFtdcErrorConditionalOrderField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcErrorConditionalOrderField.ProtoReflect.Descriptor instead.
func (*CThostFtdcErrorConditionalOrderField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{251}
}

func (x *CThostFtdcErrorConditionalOrderField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderPriceType() int32 {
	if x != nil {
		return x.OrderPriceType
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetCombOffsetFlag() string {
	if x != nil {
		return x.CombOffsetFlag
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetCombHedgeFlag() string {
	if x != nil {
		return x.CombHedgeFlag
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetVolumeTotalOriginal() int32 {
	if x != nil {
		return x.VolumeTotalOriginal
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetTimeCondition() int32 {
	if x != nil {
		return x.TimeCondition
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetGTDDate() string {
	if x != nil {
		return x.GTDDate
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetVolumeCondition() int32 {
	if x != nil {
		return x.VolumeCondition
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetMinVolume() int32 {
	if x != nil {
		return x.MinVolume
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetContingentCondition() int32 {
	if x != nil {
		return x.ContingentCondition
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetForceCloseReason() int32 {
	if x != nil {
		return x.ForceCloseReason
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetIsAutoSuspend() int32 {
	if x != nil {
		return x.IsAutoSuspend
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetExchangeInstID() string {
	if x != nil {
		return x.ExchangeInstID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderSubmitStatus() int32 {
	if x != nil {
		return x.OrderSubmitStatus
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetNotifySequence() int32 {
	if x != nil {
		return x.NotifySequence
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderSource() int32 {
	if x != nil {
		return x.OrderSource
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderStatus() int32 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetVolumeTraded() int32 {
	if x != nil {
		return x.VolumeTraded
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetVolumeTotal() int32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetInsertDate() string {
	if x != nil {
		return x.InsertDate
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetInsertTime() string {
	if x != nil {
		return x.InsertTime
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetActiveTime() string {
	if x != nil {
		return x.ActiveTime
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetSuspendTime() string {
	if x != nil {
		return x.SuspendTime
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetActiveTraderID() string {
	if x != nil {
		return x.ActiveTraderID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetClearingPartID() string {
	if x != nil {
		return x.ClearingPartID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcErrorConditionalOrderField) GetUserForceClose() int32 {
	if x != nil {
		return x.UserForceClose
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetActiveUserID() string {
	if x != nil {
		return x.ActiveUserID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetBrokerOrderSeq() int32 {
	if x != nil {
		return x.BrokerOrderSeq
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetRelativeOrderSysID() string {
	if x != nil {
		return x.RelativeOrderSysID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetZCETotalTradedVolume() int32 {
	if x != nil {
		return x.ZCETotalTradedVolume
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcErrorConditionalOrderField) GetIsSwapOrder() int32 {
	if x != nil {
		return x.IsSwapOrder
	}
	return 0
}

func (x *CThostFtdcErrorConditionalOrderField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcErrorConditionalOrderField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type CThostFtdcQryErrOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQryErrOrderActionField) Reset() {
	*x = CThostFtdcQryErrOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryErrOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryErrOrderActionField) ProtoMessage() {}

func (x *CThostFtdcQryErrOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryErrOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryErrOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{252}
}

func (x *CThostFtdcQryErrOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryErrOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcErrOrderActionField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID        string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	OrderActionRef    int32   `protobuf:"varint,3,opt,name=OrderActionRef,proto3" json:"OrderActionRef,omitempty"`
	OrderRef          string  `protobuf:"bytes,4,opt,name=OrderRef,proto3" json:"OrderRef,omitempty"`
	RequestID         int32   `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FrontID           int32   `protobuf:"varint,6,opt,name=FrontID,proto3" json:"FrontID,omitempty"`
	SessionID         int32   `protobuf:"varint,7,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ExchangeID        string  `protobuf:"bytes,8,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	OrderSysID        string  `protobuf:"bytes,9,opt,name=OrderSysID,proto3" json:"OrderSysID,omitempty"`
	ActionFlag        int32   `protobuf:"varint,10,opt,name=ActionFlag,proto3" json:"ActionFlag,omitempty"`
	LimitPrice        float64 `protobuf:"fixed64,11,opt,name=LimitPrice,proto3" json:"LimitPrice,omitempty"`
	VolumeChange      int32   `protobuf:"varint,12,opt,name=VolumeChange,proto3" json:"VolumeChange,omitempty"`
	ActionDate        string  `protobuf:"bytes,13,opt,name=ActionDate,proto3" json:"ActionDate,omitempty"`
	ActionTime        string  `protobuf:"bytes,14,opt,name=ActionTime,proto3" json:"ActionTime,omitempty"`
	TraderID          string  `protobuf:"bytes,15,opt,name=TraderID,proto3" json:"TraderID,omitempty"`
	InstallID         int32   `protobuf:"varint,16,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	OrderLocalID      string  `protobuf:"bytes,17,opt,name=OrderLocalID,proto3" json:"OrderLocalID,omitempty"`
	ActionLocalID     string  `protobuf:"bytes,18,opt,name=ActionLocalID,proto3" json:"ActionLocalID,omitempty"`
	ParticipantID     string  `protobuf:"bytes,19,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ClientID          string  `protobuf:"bytes,20,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	BusinessUnit      string  `protobuf:"bytes,21,opt,name=BusinessUnit,proto3" json:"BusinessUnit,omitempty"`
	OrderActionStatus int32   `protobuf:"varint,22,opt,name=OrderActionStatus,proto3" json:"OrderActionStatus,omitempty"`
	UserID            string  `protobuf:"bytes,23,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StatusMsg         []byte  `protobuf:"bytes,24,opt,name=StatusMsg,proto3" json:"StatusMsg,omitempty"`
	InstrumentID      string  `protobuf:"bytes,25,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	BranchID          string  `protobuf:"bytes,26,opt,name=BranchID,proto3" json:"BranchID,omitempty"`
	InvestUnitID      string  `protobuf:"bytes,27,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
	IPAddress         string  `protobuf:"bytes,28,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
	MacAddress        string  `protobuf:"bytes,29,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ErrorID           int32   `protobuf:"varint,30,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg          []byte  `protobuf:"bytes,31,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcErrOrderActionField) Reset() {
	*x = CThostFtdcErrOrderActionField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcErrOrderActionField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcErrOrderActionField) ProtoMessage() {}

func (x *CThostFtdcErrOrderActionField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcErrOrderActionField.ProtoReflect.Descriptor instead.
func (*CThostFtdcErrOrderActionField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{253}
}

func (x *CThostFtdcErrOrderActionField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetOrderActionRef() int32 {
	if x != nil {
		return x.OrderActionRef
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetOrderRef() string {
	if x != nil {
		return x.OrderRef
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetFrontID() int32 {
	if x != nil {
		return x.FrontID
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetOrderSysID() string {
	if x != nil {
		return x.OrderSysID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetActionFlag() int32 {
	if x != nil {
		return x.ActionFlag
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetLimitPrice() float64 {
	if x != nil {
		return x.LimitPrice
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetVolumeChange() int32 {
	if x != nil {
		return x.VolumeChange
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetActionDate() string {
	if x != nil {
		return x.ActionDate
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetActionTime() string {
	if x != nil {
		return x.ActionTime
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetTraderID() string {
	if x != nil {
		return x.TraderID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetOrderLocalID() string {
	if x != nil {
		return x.OrderLocalID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetActionLocalID() string {
	if x != nil {
		return x.ActionLocalID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetBusinessUnit() string {
	if x != nil {
		return x.BusinessUnit
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetOrderActionStatus() int32 {
	if x != nil {
		return x.OrderActionStatus
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetStatusMsg() []byte {
	if x != nil {
		return x.StatusMsg
	}
	return nil
}

func (x *CThostFtdcErrOrderActionField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetBranchID() string {
	if x != nil {
		return x.BranchID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcErrOrderActionField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcErrOrderActionField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcQryExchangeSequenceField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryExchangeSequenceField) Reset() {
	*x = CThostFtdcQryExchangeSequenceField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryExchangeSequenceField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryExchangeSequenceField) ProtoMessage() {}

func (x *CThostFtdcQryExchangeSequenceField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryExchangeSequenceField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryExchangeSequenceField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{254}
}

func (x *CThostFtdcQryExchangeSequenceField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcExchangeSequenceField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID   string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	SequenceNo   int32  `protobuf:"varint,2,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	MarketStatus int32  `protobuf:"varint,3,opt,name=MarketStatus,proto3" json:"MarketStatus,omitempty"`
}

func (x *CThostFtdcExchangeSequenceField) Reset() {
	*x = CThostFtdcExchangeSequenceField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcExchangeSequenceField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcExchangeSequenceField) ProtoMessage() {}

func (x *CThostFtdcExchangeSequenceField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcExchangeSequenceField.ProtoReflect.Descriptor instead.
func (*CThostFtdcExchangeSequenceField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{255}
}

func (x *CThostFtdcExchangeSequenceField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcExchangeSequenceField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcExchangeSequenceField) GetMarketStatus() int32 {
	if x != nil {
		return x.MarketStatus
	}
	return 0
}

type CThostFtdcQueryMaxOrderVolumeWithPriceField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string  `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InstrumentID string  `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	Direction    int32   `protobuf:"varint,4,opt,name=Direction,proto3" json:"Direction,omitempty"`
	OffsetFlag   int32   `protobuf:"varint,5,opt,name=OffsetFlag,proto3" json:"OffsetFlag,omitempty"`
	HedgeFlag    int32   `protobuf:"varint,6,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	MaxVolume    int32   `protobuf:"varint,7,opt,name=MaxVolume,proto3" json:"MaxVolume,omitempty"`
	Price        float64 `protobuf:"fixed64,8,opt,name=Price,proto3" json:"Price,omitempty"`
	ExchangeID   string  `protobuf:"bytes,9,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID string  `protobuf:"bytes,10,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) Reset() {
	*x = CThostFtdcQueryMaxOrderVolumeWithPriceField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQueryMaxOrderVolumeWithPriceField) ProtoMessage() {}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQueryMaxOrderVolumeWithPriceField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQueryMaxOrderVolumeWithPriceField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{256}
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetOffsetFlag() int32 {
	if x != nil {
		return x.OffsetFlag
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetMaxVolume() int32 {
	if x != nil {
		return x.MaxVolume
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQueryMaxOrderVolumeWithPriceField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryBrokerTradingParamsField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	CurrencyID string `protobuf:"bytes,3,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	AccountID  string `protobuf:"bytes,4,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (x *CThostFtdcQryBrokerTradingParamsField) Reset() {
	*x = CThostFtdcQryBrokerTradingParamsField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBrokerTradingParamsField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBrokerTradingParamsField) ProtoMessage() {}

func (x *CThostFtdcQryBrokerTradingParamsField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBrokerTradingParamsField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBrokerTradingParamsField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{257}
}

func (x *CThostFtdcQryBrokerTradingParamsField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryBrokerTradingParamsField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryBrokerTradingParamsField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcQryBrokerTradingParamsField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type CThostFtdcBrokerTradingParamsField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID              string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	MarginPriceType         int32  `protobuf:"varint,3,opt,name=MarginPriceType,proto3" json:"MarginPriceType,omitempty"`
	Algorithm               int32  `protobuf:"varint,4,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	AvailIncludeCloseProfit int32  `protobuf:"varint,5,opt,name=AvailIncludeCloseProfit,proto3" json:"AvailIncludeCloseProfit,omitempty"`
	CurrencyID              string `protobuf:"bytes,6,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	OptionRoyaltyPriceType  int32  `protobuf:"varint,7,opt,name=OptionRoyaltyPriceType,proto3" json:"OptionRoyaltyPriceType,omitempty"`
	AccountID               string `protobuf:"bytes,8,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (x *CThostFtdcBrokerTradingParamsField) Reset() {
	*x = CThostFtdcBrokerTradingParamsField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerTradingParamsField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerTradingParamsField) ProtoMessage() {}

func (x *CThostFtdcBrokerTradingParamsField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerTradingParamsField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerTradingParamsField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{258}
}

func (x *CThostFtdcBrokerTradingParamsField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerTradingParamsField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcBrokerTradingParamsField) GetMarginPriceType() int32 {
	if x != nil {
		return x.MarginPriceType
	}
	return 0
}

func (x *CThostFtdcBrokerTradingParamsField) GetAlgorithm() int32 {
	if x != nil {
		return x.Algorithm
	}
	return 0
}

func (x *CThostFtdcBrokerTradingParamsField) GetAvailIncludeCloseProfit() int32 {
	if x != nil {
		return x.AvailIncludeCloseProfit
	}
	return 0
}

func (x *CThostFtdcBrokerTradingParamsField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcBrokerTradingParamsField) GetOptionRoyaltyPriceType() int32 {
	if x != nil {
		return x.OptionRoyaltyPriceType
	}
	return 0
}

func (x *CThostFtdcBrokerTradingParamsField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type CThostFtdcQryBrokerTradingAlgosField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ExchangeID   string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InstrumentID string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
}

func (x *CThostFtdcQryBrokerTradingAlgosField) Reset() {
	*x = CThostFtdcQryBrokerTradingAlgosField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBrokerTradingAlgosField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBrokerTradingAlgosField) ProtoMessage() {}

func (x *CThostFtdcQryBrokerTradingAlgosField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBrokerTradingAlgosField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBrokerTradingAlgosField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{259}
}

func (x *CThostFtdcQryBrokerTradingAlgosField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryBrokerTradingAlgosField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryBrokerTradingAlgosField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

type CThostFtdcBrokerTradingAlgosField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID                   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ExchangeID                 string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InstrumentID               string `protobuf:"bytes,3,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	HandlePositionAlgoID       int32  `protobuf:"varint,4,opt,name=HandlePositionAlgoID,proto3" json:"HandlePositionAlgoID,omitempty"`
	FindMarginRateAlgoID       int32  `protobuf:"varint,5,opt,name=FindMarginRateAlgoID,proto3" json:"FindMarginRateAlgoID,omitempty"`
	HandleTradingAccountAlgoID int32  `protobuf:"varint,6,opt,name=HandleTradingAccountAlgoID,proto3" json:"HandleTradingAccountAlgoID,omitempty"`
}

func (x *CThostFtdcBrokerTradingAlgosField) Reset() {
	*x = CThostFtdcBrokerTradingAlgosField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerTradingAlgosField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerTradingAlgosField) ProtoMessage() {}

func (x *CThostFtdcBrokerTradingAlgosField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerTradingAlgosField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerTradingAlgosField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{260}
}

func (x *CThostFtdcBrokerTradingAlgosField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerTradingAlgosField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcBrokerTradingAlgosField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcBrokerTradingAlgosField) GetHandlePositionAlgoID() int32 {
	if x != nil {
		return x.HandlePositionAlgoID
	}
	return 0
}

func (x *CThostFtdcBrokerTradingAlgosField) GetFindMarginRateAlgoID() int32 {
	if x != nil {
		return x.FindMarginRateAlgoID
	}
	return 0
}

func (x *CThostFtdcBrokerTradingAlgosField) GetHandleTradingAccountAlgoID() int32 {
	if x != nil {
		return x.HandleTradingAccountAlgoID
	}
	return 0
}

type CThostFtdcQueryBrokerDepositField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ExchangeID string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQueryBrokerDepositField) Reset() {
	*x = CThostFtdcQueryBrokerDepositField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQueryBrokerDepositField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQueryBrokerDepositField) ProtoMessage() {}

func (x *CThostFtdcQueryBrokerDepositField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQueryBrokerDepositField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQueryBrokerDepositField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{261}
}

func (x *CThostFtdcQueryBrokerDepositField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQueryBrokerDepositField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcBrokerDepositField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay    string  `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID      string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ParticipantID string  `protobuf:"bytes,3,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	ExchangeID    string  `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	PreBalance    float64 `protobuf:"fixed64,5,opt,name=PreBalance,proto3" json:"PreBalance,omitempty"`
	CurrMargin    float64 `protobuf:"fixed64,6,opt,name=CurrMargin,proto3" json:"CurrMargin,omitempty"`
	CloseProfit   float64 `protobuf:"fixed64,7,opt,name=CloseProfit,proto3" json:"CloseProfit,omitempty"`
	Balance       float64 `protobuf:"fixed64,8,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Deposit       float64 `protobuf:"fixed64,9,opt,name=Deposit,proto3" json:"Deposit,omitempty"`
	Withdraw      float64 `protobuf:"fixed64,10,opt,name=Withdraw,proto3" json:"Withdraw,omitempty"`
	Available     float64 `protobuf:"fixed64,11,opt,name=Available,proto3" json:"Available,omitempty"`
	Reserve       float64 `protobuf:"fixed64,12,opt,name=Reserve,proto3" json:"Reserve,omitempty"`
	FrozenMargin  float64 `protobuf:"fixed64,13,opt,name=FrozenMargin,proto3" json:"FrozenMargin,omitempty"`
}

func (x *CThostFtdcBrokerDepositField) Reset() {
	*x = CThostFtdcBrokerDepositField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerDepositField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerDepositField) ProtoMessage() {}

func (x *CThostFtdcBrokerDepositField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerDepositField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerDepositField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{262}
}

func (x *CThostFtdcBrokerDepositField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcBrokerDepositField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerDepositField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcBrokerDepositField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcBrokerDepositField) GetPreBalance() float64 {
	if x != nil {
		return x.PreBalance
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetCurrMargin() float64 {
	if x != nil {
		return x.CurrMargin
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetWithdraw() float64 {
	if x != nil {
		return x.Withdraw
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *CThostFtdcBrokerDepositField) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

type CThostFtdcQryCFMMCBrokerKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
}

func (x *CThostFtdcQryCFMMCBrokerKeyField) Reset() {
	*x = CThostFtdcQryCFMMCBrokerKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryCFMMCBrokerKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryCFMMCBrokerKeyField) ProtoMessage() {}

func (x *CThostFtdcQryCFMMCBrokerKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryCFMMCBrokerKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryCFMMCBrokerKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{263}
}

func (x *CThostFtdcQryCFMMCBrokerKeyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

type CThostFtdcCFMMCBrokerKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ParticipantID string `protobuf:"bytes,2,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	CreateDate    string `protobuf:"bytes,3,opt,name=CreateDate,proto3" json:"CreateDate,omitempty"`
	CreateTime    string `protobuf:"bytes,4,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	KeyID         int32  `protobuf:"varint,5,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	CurrentKey    string `protobuf:"bytes,6,opt,name=CurrentKey,proto3" json:"CurrentKey,omitempty"`
	KeyKind       int32  `protobuf:"varint,7,opt,name=KeyKind,proto3" json:"KeyKind,omitempty"`
}

func (x *CThostFtdcCFMMCBrokerKeyField) Reset() {
	*x = CThostFtdcCFMMCBrokerKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCFMMCBrokerKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCFMMCBrokerKeyField) ProtoMessage() {}

func (x *CThostFtdcCFMMCBrokerKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCFMMCBrokerKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCFMMCBrokerKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{264}
}

func (x *CThostFtdcCFMMCBrokerKeyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcCFMMCBrokerKeyField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcCFMMCBrokerKeyField) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *CThostFtdcCFMMCBrokerKeyField) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CThostFtdcCFMMCBrokerKeyField) GetKeyID() int32 {
	if x != nil {
		return x.KeyID
	}
	return 0
}

func (x *CThostFtdcCFMMCBrokerKeyField) GetCurrentKey() string {
	if x != nil {
		return x.CurrentKey
	}
	return ""
}

func (x *CThostFtdcCFMMCBrokerKeyField) GetKeyKind() int32 {
	if x != nil {
		return x.KeyKind
	}
	return 0
}

type CThostFtdcCFMMCTradingAccountKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ParticipantID string `protobuf:"bytes,2,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	AccountID     string `protobuf:"bytes,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	KeyID         int32  `protobuf:"varint,4,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	CurrentKey    string `protobuf:"bytes,5,opt,name=CurrentKey,proto3" json:"CurrentKey,omitempty"`
}

func (x *CThostFtdcCFMMCTradingAccountKeyField) Reset() {
	*x = CThostFtdcCFMMCTradingAccountKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCFMMCTradingAccountKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCFMMCTradingAccountKeyField) ProtoMessage() {}

func (x *CThostFtdcCFMMCTradingAccountKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCFMMCTradingAccountKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCFMMCTradingAccountKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{265}
}

func (x *CThostFtdcCFMMCTradingAccountKeyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcCFMMCTradingAccountKeyField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcCFMMCTradingAccountKeyField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcCFMMCTradingAccountKeyField) GetKeyID() int32 {
	if x != nil {
		return x.KeyID
	}
	return 0
}

func (x *CThostFtdcCFMMCTradingAccountKeyField) GetCurrentKey() string {
	if x != nil {
		return x.CurrentKey
	}
	return ""
}

type CThostFtdcQryCFMMCTradingAccountKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQryCFMMCTradingAccountKeyField) Reset() {
	*x = CThostFtdcQryCFMMCTradingAccountKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryCFMMCTradingAccountKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryCFMMCTradingAccountKeyField) ProtoMessage() {}

func (x *CThostFtdcQryCFMMCTradingAccountKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryCFMMCTradingAccountKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryCFMMCTradingAccountKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{266}
}

func (x *CThostFtdcQryCFMMCTradingAccountKeyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryCFMMCTradingAccountKeyField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcBrokerUserOTPParamField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OTPVendorsID string `protobuf:"bytes,3,opt,name=OTPVendorsID,proto3" json:"OTPVendorsID,omitempty"`
	SerialNumber string `protobuf:"bytes,4,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	AuthKey      string `protobuf:"bytes,5,opt,name=AuthKey,proto3" json:"AuthKey,omitempty"`
	LastDrift    int32  `protobuf:"varint,6,opt,name=LastDrift,proto3" json:"LastDrift,omitempty"`
	LastSuccess  int32  `protobuf:"varint,7,opt,name=LastSuccess,proto3" json:"LastSuccess,omitempty"`
	OTPType      int32  `protobuf:"varint,8,opt,name=OTPType,proto3" json:"OTPType,omitempty"`
}

func (x *CThostFtdcBrokerUserOTPParamField) Reset() {
	*x = CThostFtdcBrokerUserOTPParamField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerUserOTPParamField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerUserOTPParamField) ProtoMessage() {}

func (x *CThostFtdcBrokerUserOTPParamField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerUserOTPParamField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerUserOTPParamField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{267}
}

func (x *CThostFtdcBrokerUserOTPParamField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerUserOTPParamField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcBrokerUserOTPParamField) GetOTPVendorsID() string {
	if x != nil {
		return x.OTPVendorsID
	}
	return ""
}

func (x *CThostFtdcBrokerUserOTPParamField) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CThostFtdcBrokerUserOTPParamField) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

func (x *CThostFtdcBrokerUserOTPParamField) GetLastDrift() int32 {
	if x != nil {
		return x.LastDrift
	}
	return 0
}

func (x *CThostFtdcBrokerUserOTPParamField) GetLastSuccess() int32 {
	if x != nil {
		return x.LastSuccess
	}
	return 0
}

func (x *CThostFtdcBrokerUserOTPParamField) GetOTPType() int32 {
	if x != nil {
		return x.OTPType
	}
	return 0
}

type CThostFtdcManualSyncBrokerUserOTPField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID  string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OTPType   int32  `protobuf:"varint,3,opt,name=OTPType,proto3" json:"OTPType,omitempty"`
	FirstOTP  string `protobuf:"bytes,4,opt,name=FirstOTP,proto3" json:"FirstOTP,omitempty"`
	SecondOTP string `protobuf:"bytes,5,opt,name=SecondOTP,proto3" json:"SecondOTP,omitempty"`
}

func (x *CThostFtdcManualSyncBrokerUserOTPField) Reset() {
	*x = CThostFtdcManualSyncBrokerUserOTPField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcManualSyncBrokerUserOTPField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcManualSyncBrokerUserOTPField) ProtoMessage() {}

func (x *CThostFtdcManualSyncBrokerUserOTPField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcManualSyncBrokerUserOTPField.ProtoReflect.Descriptor instead.
func (*CThostFtdcManualSyncBrokerUserOTPField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{268}
}

func (x *CThostFtdcManualSyncBrokerUserOTPField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcManualSyncBrokerUserOTPField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcManualSyncBrokerUserOTPField) GetOTPType() int32 {
	if x != nil {
		return x.OTPType
	}
	return 0
}

func (x *CThostFtdcManualSyncBrokerUserOTPField) GetFirstOTP() string {
	if x != nil {
		return x.FirstOTP
	}
	return ""
}

func (x *CThostFtdcManualSyncBrokerUserOTPField) GetSecondOTP() string {
	if x != nil {
		return x.SecondOTP
	}
	return ""
}

type CThostFtdcCommRateModelField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	CommModelID   string `protobuf:"bytes,2,opt,name=CommModelID,proto3" json:"CommModelID,omitempty"`
	CommModelName []byte `protobuf:"bytes,3,opt,name=CommModelName,proto3" json:"CommModelName,omitempty"`
}

func (x *CThostFtdcCommRateModelField) Reset() {
	*x = CThostFtdcCommRateModelField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCommRateModelField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCommRateModelField) ProtoMessage() {}

func (x *CThostFtdcCommRateModelField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCommRateModelField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCommRateModelField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{269}
}

func (x *CThostFtdcCommRateModelField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcCommRateModelField) GetCommModelID() string {
	if x != nil {
		return x.CommModelID
	}
	return ""
}

func (x *CThostFtdcCommRateModelField) GetCommModelName() []byte {
	if x != nil {
		return x.CommModelName
	}
	return nil
}

type CThostFtdcQryCommRateModelField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID    string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	CommModelID string `protobuf:"bytes,2,opt,name=CommModelID,proto3" json:"CommModelID,omitempty"`
}

func (x *CThostFtdcQryCommRateModelField) Reset() {
	*x = CThostFtdcQryCommRateModelField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryCommRateModelField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryCommRateModelField) ProtoMessage() {}

func (x *CThostFtdcQryCommRateModelField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryCommRateModelField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryCommRateModelField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{270}
}

func (x *CThostFtdcQryCommRateModelField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryCommRateModelField) GetCommModelID() string {
	if x != nil {
		return x.CommModelID
	}
	return ""
}

type CThostFtdcMarginModelField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID        string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	MarginModelID   string `protobuf:"bytes,2,opt,name=MarginModelID,proto3" json:"MarginModelID,omitempty"`
	MarginModelName []byte `protobuf:"bytes,3,opt,name=MarginModelName,proto3" json:"MarginModelName,omitempty"`
}

func (x *CThostFtdcMarginModelField) Reset() {
	*x = CThostFtdcMarginModelField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMarginModelField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMarginModelField) ProtoMessage() {}

func (x *CThostFtdcMarginModelField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMarginModelField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMarginModelField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{271}
}

func (x *CThostFtdcMarginModelField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcMarginModelField) GetMarginModelID() string {
	if x != nil {
		return x.MarginModelID
	}
	return ""
}

func (x *CThostFtdcMarginModelField) GetMarginModelName() []byte {
	if x != nil {
		return x.MarginModelName
	}
	return nil
}

type CThostFtdcQryMarginModelField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	MarginModelID string `protobuf:"bytes,2,opt,name=MarginModelID,proto3" json:"MarginModelID,omitempty"`
}

func (x *CThostFtdcQryMarginModelField) Reset() {
	*x = CThostFtdcQryMarginModelField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryMarginModelField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryMarginModelField) ProtoMessage() {}

func (x *CThostFtdcQryMarginModelField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryMarginModelField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryMarginModelField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{272}
}

func (x *CThostFtdcQryMarginModelField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryMarginModelField) GetMarginModelID() string {
	if x != nil {
		return x.MarginModelID
	}
	return ""
}

type CThostFtdcEWarrantOffsetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay   string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID     string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID   string `protobuf:"bytes,4,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InstrumentID string `protobuf:"bytes,5,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	Direction    int32  `protobuf:"varint,6,opt,name=Direction,proto3" json:"Direction,omitempty"`
	HedgeFlag    int32  `protobuf:"varint,7,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	Volume       int32  `protobuf:"varint,8,opt,name=Volume,proto3" json:"Volume,omitempty"`
	InvestUnitID string `protobuf:"bytes,9,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcEWarrantOffsetField) Reset() {
	*x = CThostFtdcEWarrantOffsetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcEWarrantOffsetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcEWarrantOffsetField) ProtoMessage() {}

func (x *CThostFtdcEWarrantOffsetField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcEWarrantOffsetField.ProtoReflect.Descriptor instead.
func (*CThostFtdcEWarrantOffsetField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{273}
}

func (x *CThostFtdcEWarrantOffsetField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcEWarrantOffsetField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcEWarrantOffsetField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcEWarrantOffsetField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcEWarrantOffsetField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcEWarrantOffsetField) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *CThostFtdcEWarrantOffsetField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcEWarrantOffsetField) GetVolume() int32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *CThostFtdcEWarrantOffsetField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryEWarrantOffsetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ExchangeID   string `protobuf:"bytes,3,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InstrumentID string `protobuf:"bytes,4,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	InvestUnitID string `protobuf:"bytes,5,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryEWarrantOffsetField) Reset() {
	*x = CThostFtdcQryEWarrantOffsetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryEWarrantOffsetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryEWarrantOffsetField) ProtoMessage() {}

func (x *CThostFtdcQryEWarrantOffsetField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryEWarrantOffsetField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryEWarrantOffsetField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{274}
}

func (x *CThostFtdcQryEWarrantOffsetField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryEWarrantOffsetField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryEWarrantOffsetField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryEWarrantOffsetField) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *CThostFtdcQryEWarrantOffsetField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQryInvestorProductGroupMarginField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID     string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	ProductGroupID string `protobuf:"bytes,3,opt,name=ProductGroupID,proto3" json:"ProductGroupID,omitempty"`
	HedgeFlag      int32  `protobuf:"varint,4,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ExchangeID     string `protobuf:"bytes,5,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID   string `protobuf:"bytes,6,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) Reset() {
	*x = CThostFtdcQryInvestorProductGroupMarginField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryInvestorProductGroupMarginField) ProtoMessage() {}

func (x *CThostFtdcQryInvestorProductGroupMarginField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryInvestorProductGroupMarginField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryInvestorProductGroupMarginField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{275}
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) GetProductGroupID() string {
	if x != nil {
		return x.ProductGroupID
	}
	return ""
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryInvestorProductGroupMarginField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcInvestorProductGroupMarginField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductGroupID        string  `protobuf:"bytes,1,opt,name=ProductGroupID,proto3" json:"ProductGroupID,omitempty"`
	BrokerID              string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID            string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	TradingDay            string  `protobuf:"bytes,4,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	SettlementID          int32   `protobuf:"varint,5,opt,name=SettlementID,proto3" json:"SettlementID,omitempty"`
	FrozenMargin          float64 `protobuf:"fixed64,6,opt,name=FrozenMargin,proto3" json:"FrozenMargin,omitempty"`
	LongFrozenMargin      float64 `protobuf:"fixed64,7,opt,name=LongFrozenMargin,proto3" json:"LongFrozenMargin,omitempty"`
	ShortFrozenMargin     float64 `protobuf:"fixed64,8,opt,name=ShortFrozenMargin,proto3" json:"ShortFrozenMargin,omitempty"`
	UseMargin             float64 `protobuf:"fixed64,9,opt,name=UseMargin,proto3" json:"UseMargin,omitempty"`
	LongUseMargin         float64 `protobuf:"fixed64,10,opt,name=LongUseMargin,proto3" json:"LongUseMargin,omitempty"`
	ShortUseMargin        float64 `protobuf:"fixed64,11,opt,name=ShortUseMargin,proto3" json:"ShortUseMargin,omitempty"`
	ExchMargin            float64 `protobuf:"fixed64,12,opt,name=ExchMargin,proto3" json:"ExchMargin,omitempty"`
	LongExchMargin        float64 `protobuf:"fixed64,13,opt,name=LongExchMargin,proto3" json:"LongExchMargin,omitempty"`
	ShortExchMargin       float64 `protobuf:"fixed64,14,opt,name=ShortExchMargin,proto3" json:"ShortExchMargin,omitempty"`
	CloseProfit           float64 `protobuf:"fixed64,15,opt,name=CloseProfit,proto3" json:"CloseProfit,omitempty"`
	FrozenCommission      float64 `protobuf:"fixed64,16,opt,name=FrozenCommission,proto3" json:"FrozenCommission,omitempty"`
	Commission            float64 `protobuf:"fixed64,17,opt,name=Commission,proto3" json:"Commission,omitempty"`
	FrozenCash            float64 `protobuf:"fixed64,18,opt,name=FrozenCash,proto3" json:"FrozenCash,omitempty"`
	CashIn                float64 `protobuf:"fixed64,19,opt,name=CashIn,proto3" json:"CashIn,omitempty"`
	PositionProfit        float64 `protobuf:"fixed64,20,opt,name=PositionProfit,proto3" json:"PositionProfit,omitempty"`
	OffsetAmount          float64 `protobuf:"fixed64,21,opt,name=OffsetAmount,proto3" json:"OffsetAmount,omitempty"`
	LongOffsetAmount      float64 `protobuf:"fixed64,22,opt,name=LongOffsetAmount,proto3" json:"LongOffsetAmount,omitempty"`
	ShortOffsetAmount     float64 `protobuf:"fixed64,23,opt,name=ShortOffsetAmount,proto3" json:"ShortOffsetAmount,omitempty"`
	ExchOffsetAmount      float64 `protobuf:"fixed64,24,opt,name=ExchOffsetAmount,proto3" json:"ExchOffsetAmount,omitempty"`
	LongExchOffsetAmount  float64 `protobuf:"fixed64,25,opt,name=LongExchOffsetAmount,proto3" json:"LongExchOffsetAmount,omitempty"`
	ShortExchOffsetAmount float64 `protobuf:"fixed64,26,opt,name=ShortExchOffsetAmount,proto3" json:"ShortExchOffsetAmount,omitempty"`
	HedgeFlag             int32   `protobuf:"varint,27,opt,name=HedgeFlag,proto3" json:"HedgeFlag,omitempty"`
	ExchangeID            string  `protobuf:"bytes,28,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	InvestUnitID          string  `protobuf:"bytes,29,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcInvestorProductGroupMarginField) Reset() {
	*x = CThostFtdcInvestorProductGroupMarginField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcInvestorProductGroupMarginField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcInvestorProductGroupMarginField) ProtoMessage() {}

func (x *CThostFtdcInvestorProductGroupMarginField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcInvestorProductGroupMarginField.ProtoReflect.Descriptor instead.
func (*CThostFtdcInvestorProductGroupMarginField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{276}
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetProductGroupID() string {
	if x != nil {
		return x.ProductGroupID
	}
	return ""
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetSettlementID() int32 {
	if x != nil {
		return x.SettlementID
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetFrozenMargin() float64 {
	if x != nil {
		return x.FrozenMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetLongFrozenMargin() float64 {
	if x != nil {
		return x.LongFrozenMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetShortFrozenMargin() float64 {
	if x != nil {
		return x.ShortFrozenMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetUseMargin() float64 {
	if x != nil {
		return x.UseMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetLongUseMargin() float64 {
	if x != nil {
		return x.LongUseMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetShortUseMargin() float64 {
	if x != nil {
		return x.ShortUseMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetExchMargin() float64 {
	if x != nil {
		return x.ExchMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetLongExchMargin() float64 {
	if x != nil {
		return x.LongExchMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetShortExchMargin() float64 {
	if x != nil {
		return x.ShortExchMargin
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetCloseProfit() float64 {
	if x != nil {
		return x.CloseProfit
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetFrozenCommission() float64 {
	if x != nil {
		return x.FrozenCommission
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetFrozenCash() float64 {
	if x != nil {
		return x.FrozenCash
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetCashIn() float64 {
	if x != nil {
		return x.CashIn
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetPositionProfit() float64 {
	if x != nil {
		return x.PositionProfit
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetOffsetAmount() float64 {
	if x != nil {
		return x.OffsetAmount
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetLongOffsetAmount() float64 {
	if x != nil {
		return x.LongOffsetAmount
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetShortOffsetAmount() float64 {
	if x != nil {
		return x.ShortOffsetAmount
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetExchOffsetAmount() float64 {
	if x != nil {
		return x.ExchOffsetAmount
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetLongExchOffsetAmount() float64 {
	if x != nil {
		return x.LongExchOffsetAmount
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetShortExchOffsetAmount() float64 {
	if x != nil {
		return x.ShortExchOffsetAmount
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetHedgeFlag() int32 {
	if x != nil {
		return x.HedgeFlag
	}
	return 0
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcInvestorProductGroupMarginField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcQueryCFMMCTradingAccountTokenField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID   string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	InvestUnitID string `protobuf:"bytes,3,opt,name=InvestUnitID,proto3" json:"InvestUnitID,omitempty"`
}

func (x *CThostFtdcQueryCFMMCTradingAccountTokenField) Reset() {
	*x = CThostFtdcQueryCFMMCTradingAccountTokenField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQueryCFMMCTradingAccountTokenField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQueryCFMMCTradingAccountTokenField) ProtoMessage() {}

func (x *CThostFtdcQueryCFMMCTradingAccountTokenField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQueryCFMMCTradingAccountTokenField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQueryCFMMCTradingAccountTokenField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{277}
}

func (x *CThostFtdcQueryCFMMCTradingAccountTokenField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQueryCFMMCTradingAccountTokenField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcQueryCFMMCTradingAccountTokenField) GetInvestUnitID() string {
	if x != nil {
		return x.InvestUnitID
	}
	return ""
}

type CThostFtdcCFMMCTradingAccountTokenField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	ParticipantID string `protobuf:"bytes,2,opt,name=ParticipantID,proto3" json:"ParticipantID,omitempty"`
	AccountID     string `protobuf:"bytes,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	KeyID         int32  `protobuf:"varint,4,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	Token         string `protobuf:"bytes,5,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *CThostFtdcCFMMCTradingAccountTokenField) Reset() {
	*x = CThostFtdcCFMMCTradingAccountTokenField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCFMMCTradingAccountTokenField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCFMMCTradingAccountTokenField) ProtoMessage() {}

func (x *CThostFtdcCFMMCTradingAccountTokenField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCFMMCTradingAccountTokenField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCFMMCTradingAccountTokenField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{278}
}

func (x *CThostFtdcCFMMCTradingAccountTokenField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcCFMMCTradingAccountTokenField) GetParticipantID() string {
	if x != nil {
		return x.ParticipantID
	}
	return ""
}

func (x *CThostFtdcCFMMCTradingAccountTokenField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcCFMMCTradingAccountTokenField) GetKeyID() int32 {
	if x != nil {
		return x.KeyID
	}
	return 0
}

func (x *CThostFtdcCFMMCTradingAccountTokenField) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CThostFtdcQryProductGroupField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ExchangeID string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
}

func (x *CThostFtdcQryProductGroupField) Reset() {
	*x = CThostFtdcQryProductGroupField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryProductGroupField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryProductGroupField) ProtoMessage() {}

func (x *CThostFtdcQryProductGroupField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryProductGroupField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryProductGroupField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{279}
}

func (x *CThostFtdcQryProductGroupField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcQryProductGroupField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

type CThostFtdcProductGroupField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID      string `protobuf:"bytes,1,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ExchangeID     string `protobuf:"bytes,2,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	ProductGroupID string `protobuf:"bytes,3,opt,name=ProductGroupID,proto3" json:"ProductGroupID,omitempty"`
}

func (x *CThostFtdcProductGroupField) Reset() {
	*x = CThostFtdcProductGroupField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcProductGroupField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcProductGroupField) ProtoMessage() {}

func (x *CThostFtdcProductGroupField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcProductGroupField.ProtoReflect.Descriptor instead.
func (*CThostFtdcProductGroupField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{280}
}

func (x *CThostFtdcProductGroupField) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *CThostFtdcProductGroupField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcProductGroupField) GetProductGroupID() string {
	if x != nil {
		return x.ProductGroupID
	}
	return ""
}

type CThostFtdcBulletinField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID  string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	TradingDay  string `protobuf:"bytes,2,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BulletinID  int32  `protobuf:"varint,3,opt,name=BulletinID,proto3" json:"BulletinID,omitempty"`
	SequenceNo  int32  `protobuf:"varint,4,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	NewsType    string `protobuf:"bytes,5,opt,name=NewsType,proto3" json:"NewsType,omitempty"`
	NewsUrgency int32  `protobuf:"varint,6,opt,name=NewsUrgency,proto3" json:"NewsUrgency,omitempty"`
	SendTime    string `protobuf:"bytes,7,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	Abstract    string `protobuf:"bytes,8,opt,name=Abstract,proto3" json:"Abstract,omitempty"`
	ComeFrom    string `protobuf:"bytes,9,opt,name=ComeFrom,proto3" json:"ComeFrom,omitempty"`
	Content     string `protobuf:"bytes,10,opt,name=Content,proto3" json:"Content,omitempty"`
	URLLink     string `protobuf:"bytes,11,opt,name=URLLink,proto3" json:"URLLink,omitempty"`
	MarketID    string `protobuf:"bytes,12,opt,name=MarketID,proto3" json:"MarketID,omitempty"`
}

func (x *CThostFtdcBulletinField) Reset() {
	*x = CThostFtdcBulletinField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBulletinField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBulletinField) ProtoMessage() {}

func (x *CThostFtdcBulletinField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBulletinField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBulletinField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{281}
}

func (x *CThostFtdcBulletinField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetBulletinID() int32 {
	if x != nil {
		return x.BulletinID
	}
	return 0
}

func (x *CThostFtdcBulletinField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcBulletinField) GetNewsType() string {
	if x != nil {
		return x.NewsType
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetNewsUrgency() int32 {
	if x != nil {
		return x.NewsUrgency
	}
	return 0
}

func (x *CThostFtdcBulletinField) GetSendTime() string {
	if x != nil {
		return x.SendTime
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetAbstract() string {
	if x != nil {
		return x.Abstract
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetComeFrom() string {
	if x != nil {
		return x.ComeFrom
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetURLLink() string {
	if x != nil {
		return x.URLLink
	}
	return ""
}

func (x *CThostFtdcBulletinField) GetMarketID() string {
	if x != nil {
		return x.MarketID
	}
	return ""
}

type CThostFtdcQryBulletinField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID  string `protobuf:"bytes,1,opt,name=ExchangeID,proto3" json:"ExchangeID,omitempty"`
	BulletinID  int32  `protobuf:"varint,2,opt,name=BulletinID,proto3" json:"BulletinID,omitempty"`
	SequenceNo  int32  `protobuf:"varint,3,opt,name=SequenceNo,proto3" json:"SequenceNo,omitempty"`
	NewsType    string `protobuf:"bytes,4,opt,name=NewsType,proto3" json:"NewsType,omitempty"`
	NewsUrgency int32  `protobuf:"varint,5,opt,name=NewsUrgency,proto3" json:"NewsUrgency,omitempty"`
}

func (x *CThostFtdcQryBulletinField) Reset() {
	*x = CThostFtdcQryBulletinField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryBulletinField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryBulletinField) ProtoMessage() {}

func (x *CThostFtdcQryBulletinField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryBulletinField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryBulletinField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{282}
}

func (x *CThostFtdcQryBulletinField) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CThostFtdcQryBulletinField) GetBulletinID() int32 {
	if x != nil {
		return x.BulletinID
	}
	return 0
}

func (x *CThostFtdcQryBulletinField) GetSequenceNo() int32 {
	if x != nil {
		return x.SequenceNo
	}
	return 0
}

func (x *CThostFtdcQryBulletinField) GetNewsType() string {
	if x != nil {
		return x.NewsType
	}
	return ""
}

func (x *CThostFtdcQryBulletinField) GetNewsUrgency() int32 {
	if x != nil {
		return x.NewsUrgency
	}
	return 0
}

type CThostFtdcReqOpenAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID          string `protobuf:"bytes,28,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string `protobuf:"bytes,29,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID          int32  `protobuf:"varint,30,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,31,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	CashExchangeCode   int32  `protobuf:"varint,33,opt,name=CashExchangeCode,proto3" json:"CashExchangeCode,omitempty"`
	Digest             string `protobuf:"bytes,34,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32  `protobuf:"varint,35,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID           string `protobuf:"bytes,36,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType    int32  `protobuf:"varint,37,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,38,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc        string `protobuf:"bytes,39,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag        int32  `protobuf:"varint,40,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32  `protobuf:"varint,41,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo             string `protobuf:"bytes,42,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	TID                int32  `protobuf:"varint,43,opt,name=TID,proto3" json:"TID,omitempty"`
	UserID             string `protobuf:"bytes,44,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LongCustomerName   []byte `protobuf:"bytes,45,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcReqOpenAccountField) Reset() {
	*x = CThostFtdcReqOpenAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqOpenAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqOpenAccountField) ProtoMessage() {}

func (x *CThostFtdcReqOpenAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqOpenAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqOpenAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{283}
}

func (x *CThostFtdcReqOpenAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReqOpenAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetCashExchangeCode() int32 {
	if x != nil {
		return x.CashExchangeCode
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReqOpenAccountField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqOpenAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcReqCancelAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID          string `protobuf:"bytes,28,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string `protobuf:"bytes,29,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID          int32  `protobuf:"varint,30,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,31,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	CashExchangeCode   int32  `protobuf:"varint,33,opt,name=CashExchangeCode,proto3" json:"CashExchangeCode,omitempty"`
	Digest             string `protobuf:"bytes,34,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32  `protobuf:"varint,35,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID           string `protobuf:"bytes,36,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType    int32  `protobuf:"varint,37,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,38,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc        string `protobuf:"bytes,39,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag        int32  `protobuf:"varint,40,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32  `protobuf:"varint,41,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo             string `protobuf:"bytes,42,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	TID                int32  `protobuf:"varint,43,opt,name=TID,proto3" json:"TID,omitempty"`
	UserID             string `protobuf:"bytes,44,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LongCustomerName   []byte `protobuf:"bytes,45,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcReqCancelAccountField) Reset() {
	*x = CThostFtdcReqCancelAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqCancelAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqCancelAccountField) ProtoMessage() {}

func (x *CThostFtdcReqCancelAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqCancelAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqCancelAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{284}
}

func (x *CThostFtdcReqCancelAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReqCancelAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetCashExchangeCode() int32 {
	if x != nil {
		return x.CashExchangeCode
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReqCancelAccountField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqCancelAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcReqChangeAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	NewBankAccount     string `protobuf:"bytes,28,opt,name=NewBankAccount,proto3" json:"NewBankAccount,omitempty"`
	NewBankPassWord    string `protobuf:"bytes,29,opt,name=NewBankPassWord,proto3" json:"NewBankPassWord,omitempty"`
	AccountID          string `protobuf:"bytes,30,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string `protobuf:"bytes,31,opt,name=Password,proto3" json:"Password,omitempty"`
	BankAccType        int32  `protobuf:"varint,32,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	InstallID          int32  `protobuf:"varint,33,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,34,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,35,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,36,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankPwdFlag        int32  `protobuf:"varint,37,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32  `protobuf:"varint,38,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	TID                int32  `protobuf:"varint,39,opt,name=TID,proto3" json:"TID,omitempty"`
	Digest             string `protobuf:"bytes,40,opt,name=Digest,proto3" json:"Digest,omitempty"`
	LongCustomerName   []byte `protobuf:"bytes,41,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcReqChangeAccountField) Reset() {
	*x = CThostFtdcReqChangeAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqChangeAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqChangeAccountField) ProtoMessage() {}

func (x *CThostFtdcReqChangeAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqChangeAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqChangeAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{285}
}

func (x *CThostFtdcReqChangeAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReqChangeAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetNewBankAccount() string {
	if x != nil {
		return x.NewBankAccount
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetNewBankPassWord() string {
	if x != nil {
		return x.NewBankPassWord
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReqChangeAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqChangeAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcReqTransferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode         string  `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID            string  `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID      string  `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID          string  `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID    string  `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate         string  `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime         string  `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial        string  `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay        string  `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial       int32   `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment      int32   `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID         int32   `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName      []byte  `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType        int32   `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo  string  `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType          int32   `protobuf:"varint,16,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount       string  `protobuf:"bytes,17,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord      string  `protobuf:"bytes,18,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID         string  `protobuf:"bytes,19,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password          string  `protobuf:"bytes,20,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID         int32   `protobuf:"varint,21,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	FutureSerial      int32   `protobuf:"varint,22,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	UserID            string  `protobuf:"bytes,23,opt,name=UserID,proto3" json:"UserID,omitempty"`
	VerifyCertNoFlag  int32   `protobuf:"varint,24,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID        string  `protobuf:"bytes,25,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	TradeAmount       float64 `protobuf:"fixed64,26,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	FutureFetchAmount float64 `protobuf:"fixed64,27,opt,name=FutureFetchAmount,proto3" json:"FutureFetchAmount,omitempty"`
	FeePayFlag        int32   `protobuf:"varint,28,opt,name=FeePayFlag,proto3" json:"FeePayFlag,omitempty"`
	CustFee           float64 `protobuf:"fixed64,29,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	BrokerFee         float64 `protobuf:"fixed64,30,opt,name=BrokerFee,proto3" json:"BrokerFee,omitempty"`
	Message           string  `protobuf:"bytes,31,opt,name=Message,proto3" json:"Message,omitempty"`
	Digest            string  `protobuf:"bytes,32,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType       int32   `protobuf:"varint,33,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID          string  `protobuf:"bytes,34,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType   int32   `protobuf:"varint,35,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank    string  `protobuf:"bytes,36,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc       string  `protobuf:"bytes,37,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag       int32   `protobuf:"varint,38,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag       int32   `protobuf:"varint,39,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo            string  `protobuf:"bytes,40,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID         int32   `protobuf:"varint,41,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID               int32   `protobuf:"varint,42,opt,name=TID,proto3" json:"TID,omitempty"`
	TransferStatus    int32   `protobuf:"varint,43,opt,name=TransferStatus,proto3" json:"TransferStatus,omitempty"`
	LongCustomerName  []byte  `protobuf:"bytes,44,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcReqTransferField) Reset() {
	*x = CThostFtdcReqTransferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqTransferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqTransferField) ProtoMessage() {}

func (x *CThostFtdcReqTransferField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqTransferField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqTransferField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{286}
}

func (x *CThostFtdcReqTransferField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReqTransferField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetFeePayFlag() int32 {
	if x != nil {
		return x.FeePayFlag
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcReqTransferField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetTransferStatus() int32 {
	if x != nil {
		return x.TransferStatus
	}
	return 0
}

func (x *CThostFtdcReqTransferField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcRspTransferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode         string  `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID            string  `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID      string  `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID          string  `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID    string  `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate         string  `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime         string  `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial        string  `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay        string  `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial       int32   `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment      int32   `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID         int32   `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName      []byte  `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType        int32   `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo  string  `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType          int32   `protobuf:"varint,16,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount       string  `protobuf:"bytes,17,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord      string  `protobuf:"bytes,18,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID         string  `protobuf:"bytes,19,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password          string  `protobuf:"bytes,20,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID         int32   `protobuf:"varint,21,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	FutureSerial      int32   `protobuf:"varint,22,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	UserID            string  `protobuf:"bytes,23,opt,name=UserID,proto3" json:"UserID,omitempty"`
	VerifyCertNoFlag  int32   `protobuf:"varint,24,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID        string  `protobuf:"bytes,25,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	TradeAmount       float64 `protobuf:"fixed64,26,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	FutureFetchAmount float64 `protobuf:"fixed64,27,opt,name=FutureFetchAmount,proto3" json:"FutureFetchAmount,omitempty"`
	FeePayFlag        int32   `protobuf:"varint,28,opt,name=FeePayFlag,proto3" json:"FeePayFlag,omitempty"`
	CustFee           float64 `protobuf:"fixed64,29,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	BrokerFee         float64 `protobuf:"fixed64,30,opt,name=BrokerFee,proto3" json:"BrokerFee,omitempty"`
	Message           string  `protobuf:"bytes,31,opt,name=Message,proto3" json:"Message,omitempty"`
	Digest            string  `protobuf:"bytes,32,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType       int32   `protobuf:"varint,33,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID          string  `protobuf:"bytes,34,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType   int32   `protobuf:"varint,35,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank    string  `protobuf:"bytes,36,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc       string  `protobuf:"bytes,37,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag       int32   `protobuf:"varint,38,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag       int32   `protobuf:"varint,39,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo            string  `protobuf:"bytes,40,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID         int32   `protobuf:"varint,41,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID               int32   `protobuf:"varint,42,opt,name=TID,proto3" json:"TID,omitempty"`
	TransferStatus    int32   `protobuf:"varint,43,opt,name=TransferStatus,proto3" json:"TransferStatus,omitempty"`
	ErrorID           int32   `protobuf:"varint,44,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg          []byte  `protobuf:"bytes,45,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	LongCustomerName  []byte  `protobuf:"bytes,46,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcRspTransferField) Reset() {
	*x = CThostFtdcRspTransferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspTransferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspTransferField) ProtoMessage() {}

func (x *CThostFtdcRspTransferField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspTransferField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspTransferField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{287}
}

func (x *CThostFtdcRspTransferField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcRspTransferField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetFeePayFlag() int32 {
	if x != nil {
		return x.FeePayFlag
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcRspTransferField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetTransferStatus() int32 {
	if x != nil {
		return x.TransferStatus
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcRspTransferField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcRspTransferField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcReqRepealField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepealTimeInterval int32   `protobuf:"varint,1,opt,name=RepealTimeInterval,proto3" json:"RepealTimeInterval,omitempty"`
	RepealedTimes      int32   `protobuf:"varint,2,opt,name=RepealedTimes,proto3" json:"RepealedTimes,omitempty"`
	BankRepealFlag     int32   `protobuf:"varint,3,opt,name=BankRepealFlag,proto3" json:"BankRepealFlag,omitempty"`
	BrokerRepealFlag   int32   `protobuf:"varint,4,opt,name=BrokerRepealFlag,proto3" json:"BrokerRepealFlag,omitempty"`
	PlateRepealSerial  int32   `protobuf:"varint,5,opt,name=PlateRepealSerial,proto3" json:"PlateRepealSerial,omitempty"`
	BankRepealSerial   string  `protobuf:"bytes,6,opt,name=BankRepealSerial,proto3" json:"BankRepealSerial,omitempty"`
	FutureRepealSerial int32   `protobuf:"varint,7,opt,name=FutureRepealSerial,proto3" json:"FutureRepealSerial,omitempty"`
	TradeCode          string  `protobuf:"bytes,8,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string  `protobuf:"bytes,9,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string  `protobuf:"bytes,10,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string  `protobuf:"bytes,11,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string  `protobuf:"bytes,12,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string  `protobuf:"bytes,13,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string  `protobuf:"bytes,14,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string  `protobuf:"bytes,15,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string  `protobuf:"bytes,16,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32   `protobuf:"varint,17,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32   `protobuf:"varint,18,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32   `protobuf:"varint,19,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte  `protobuf:"bytes,20,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32   `protobuf:"varint,21,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string  `protobuf:"bytes,22,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType           int32   `protobuf:"varint,23,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount        string  `protobuf:"bytes,24,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string  `protobuf:"bytes,25,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID          string  `protobuf:"bytes,26,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string  `protobuf:"bytes,27,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID          int32   `protobuf:"varint,28,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	FutureSerial       int32   `protobuf:"varint,29,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	UserID             string  `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	VerifyCertNoFlag   int32   `protobuf:"varint,31,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string  `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	TradeAmount        float64 `protobuf:"fixed64,33,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	FutureFetchAmount  float64 `protobuf:"fixed64,34,opt,name=FutureFetchAmount,proto3" json:"FutureFetchAmount,omitempty"`
	FeePayFlag         int32   `protobuf:"varint,35,opt,name=FeePayFlag,proto3" json:"FeePayFlag,omitempty"`
	CustFee            float64 `protobuf:"fixed64,36,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	BrokerFee          float64 `protobuf:"fixed64,37,opt,name=BrokerFee,proto3" json:"BrokerFee,omitempty"`
	Message            string  `protobuf:"bytes,38,opt,name=Message,proto3" json:"Message,omitempty"`
	Digest             string  `protobuf:"bytes,39,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32   `protobuf:"varint,40,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID           string  `protobuf:"bytes,41,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType    int32   `protobuf:"varint,42,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank     string  `protobuf:"bytes,43,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc        string  `protobuf:"bytes,44,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag        int32   `protobuf:"varint,45,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32   `protobuf:"varint,46,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo             string  `protobuf:"bytes,47,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID          int32   `protobuf:"varint,48,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID                int32   `protobuf:"varint,49,opt,name=TID,proto3" json:"TID,omitempty"`
	TransferStatus     int32   `protobuf:"varint,50,opt,name=TransferStatus,proto3" json:"TransferStatus,omitempty"`
	LongCustomerName   []byte  `protobuf:"bytes,51,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcReqRepealField) Reset() {
	*x = CThostFtdcReqRepealField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqRepealField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqRepealField) ProtoMessage() {}

func (x *CThostFtdcReqRepealField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqRepealField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqRepealField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{288}
}

func (x *CThostFtdcReqRepealField) GetRepealTimeInterval() int32 {
	if x != nil {
		return x.RepealTimeInterval
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetRepealedTimes() int32 {
	if x != nil {
		return x.RepealedTimes
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetBankRepealFlag() int32 {
	if x != nil {
		return x.BankRepealFlag
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetBrokerRepealFlag() int32 {
	if x != nil {
		return x.BrokerRepealFlag
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetPlateRepealSerial() int32 {
	if x != nil {
		return x.PlateRepealSerial
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetBankRepealSerial() string {
	if x != nil {
		return x.BankRepealSerial
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetFutureRepealSerial() int32 {
	if x != nil {
		return x.FutureRepealSerial
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReqRepealField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetFeePayFlag() int32 {
	if x != nil {
		return x.FeePayFlag
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcReqRepealField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetTransferStatus() int32 {
	if x != nil {
		return x.TransferStatus
	}
	return 0
}

func (x *CThostFtdcReqRepealField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcRspRepealField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepealTimeInterval int32   `protobuf:"varint,1,opt,name=RepealTimeInterval,proto3" json:"RepealTimeInterval,omitempty"`
	RepealedTimes      int32   `protobuf:"varint,2,opt,name=RepealedTimes,proto3" json:"RepealedTimes,omitempty"`
	BankRepealFlag     int32   `protobuf:"varint,3,opt,name=BankRepealFlag,proto3" json:"BankRepealFlag,omitempty"`
	BrokerRepealFlag   int32   `protobuf:"varint,4,opt,name=BrokerRepealFlag,proto3" json:"BrokerRepealFlag,omitempty"`
	PlateRepealSerial  int32   `protobuf:"varint,5,opt,name=PlateRepealSerial,proto3" json:"PlateRepealSerial,omitempty"`
	BankRepealSerial   string  `protobuf:"bytes,6,opt,name=BankRepealSerial,proto3" json:"BankRepealSerial,omitempty"`
	FutureRepealSerial int32   `protobuf:"varint,7,opt,name=FutureRepealSerial,proto3" json:"FutureRepealSerial,omitempty"`
	TradeCode          string  `protobuf:"bytes,8,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string  `protobuf:"bytes,9,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string  `protobuf:"bytes,10,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string  `protobuf:"bytes,11,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string  `protobuf:"bytes,12,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string  `protobuf:"bytes,13,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string  `protobuf:"bytes,14,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string  `protobuf:"bytes,15,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string  `protobuf:"bytes,16,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32   `protobuf:"varint,17,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32   `protobuf:"varint,18,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32   `protobuf:"varint,19,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte  `protobuf:"bytes,20,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32   `protobuf:"varint,21,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string  `protobuf:"bytes,22,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType           int32   `protobuf:"varint,23,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount        string  `protobuf:"bytes,24,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string  `protobuf:"bytes,25,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID          string  `protobuf:"bytes,26,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string  `protobuf:"bytes,27,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID          int32   `protobuf:"varint,28,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	FutureSerial       int32   `protobuf:"varint,29,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	UserID             string  `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	VerifyCertNoFlag   int32   `protobuf:"varint,31,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string  `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	TradeAmount        float64 `protobuf:"fixed64,33,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	FutureFetchAmount  float64 `protobuf:"fixed64,34,opt,name=FutureFetchAmount,proto3" json:"FutureFetchAmount,omitempty"`
	FeePayFlag         int32   `protobuf:"varint,35,opt,name=FeePayFlag,proto3" json:"FeePayFlag,omitempty"`
	CustFee            float64 `protobuf:"fixed64,36,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	BrokerFee          float64 `protobuf:"fixed64,37,opt,name=BrokerFee,proto3" json:"BrokerFee,omitempty"`
	Message            string  `protobuf:"bytes,38,opt,name=Message,proto3" json:"Message,omitempty"`
	Digest             string  `protobuf:"bytes,39,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32   `protobuf:"varint,40,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID           string  `protobuf:"bytes,41,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType    int32   `protobuf:"varint,42,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank     string  `protobuf:"bytes,43,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc        string  `protobuf:"bytes,44,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag        int32   `protobuf:"varint,45,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32   `protobuf:"varint,46,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo             string  `protobuf:"bytes,47,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID          int32   `protobuf:"varint,48,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID                int32   `protobuf:"varint,49,opt,name=TID,proto3" json:"TID,omitempty"`
	TransferStatus     int32   `protobuf:"varint,50,opt,name=TransferStatus,proto3" json:"TransferStatus,omitempty"`
	ErrorID            int32   `protobuf:"varint,51,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg           []byte  `protobuf:"bytes,52,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	LongCustomerName   []byte  `protobuf:"bytes,53,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcRspRepealField) Reset() {
	*x = CThostFtdcRspRepealField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspRepealField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspRepealField) ProtoMessage() {}

func (x *CThostFtdcRspRepealField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspRepealField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspRepealField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{289}
}

func (x *CThostFtdcRspRepealField) GetRepealTimeInterval() int32 {
	if x != nil {
		return x.RepealTimeInterval
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetRepealedTimes() int32 {
	if x != nil {
		return x.RepealedTimes
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetBankRepealFlag() int32 {
	if x != nil {
		return x.BankRepealFlag
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetBrokerRepealFlag() int32 {
	if x != nil {
		return x.BrokerRepealFlag
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetPlateRepealSerial() int32 {
	if x != nil {
		return x.PlateRepealSerial
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetBankRepealSerial() string {
	if x != nil {
		return x.BankRepealSerial
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetFutureRepealSerial() int32 {
	if x != nil {
		return x.FutureRepealSerial
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcRspRepealField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetFutureFetchAmount() float64 {
	if x != nil {
		return x.FutureFetchAmount
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetFeePayFlag() int32 {
	if x != nil {
		return x.FeePayFlag
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcRspRepealField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetTransferStatus() int32 {
	if x != nil {
		return x.TransferStatus
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcRspRepealField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcRspRepealField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcReqQueryAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode        string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID           string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID     string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID         string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID   string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate        string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime        string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial       string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay       string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial      int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment     int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID        int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName     []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType       int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType         int32  `protobuf:"varint,16,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount      string `protobuf:"bytes,17,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord     string `protobuf:"bytes,18,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID        string `protobuf:"bytes,19,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password         string `protobuf:"bytes,20,opt,name=Password,proto3" json:"Password,omitempty"`
	FutureSerial     int32  `protobuf:"varint,21,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	InstallID        int32  `protobuf:"varint,22,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID           string `protobuf:"bytes,23,opt,name=UserID,proto3" json:"UserID,omitempty"`
	VerifyCertNoFlag int32  `protobuf:"varint,24,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID       string `protobuf:"bytes,25,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	Digest           string `protobuf:"bytes,26,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType      int32  `protobuf:"varint,27,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID         string `protobuf:"bytes,28,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType  int32  `protobuf:"varint,29,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank   string `protobuf:"bytes,30,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc      string `protobuf:"bytes,31,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag      int32  `protobuf:"varint,32,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag      int32  `protobuf:"varint,33,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo           string `protobuf:"bytes,34,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID        int32  `protobuf:"varint,35,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID              int32  `protobuf:"varint,36,opt,name=TID,proto3" json:"TID,omitempty"`
	LongCustomerName []byte `protobuf:"bytes,37,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcReqQueryAccountField) Reset() {
	*x = CThostFtdcReqQueryAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqQueryAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqQueryAccountField) ProtoMessage() {}

func (x *CThostFtdcReqQueryAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqQueryAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqQueryAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{290}
}

func (x *CThostFtdcReqQueryAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReqQueryAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcReqQueryAccountField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReqQueryAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcRspQueryAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode        string  `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID           string  `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID     string  `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID         string  `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID   string  `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate        string  `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime        string  `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial       string  `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay       string  `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial      int32   `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment     int32   `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID        int32   `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName     []byte  `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType       int32   `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo string  `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType         int32   `protobuf:"varint,16,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount      string  `protobuf:"bytes,17,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord     string  `protobuf:"bytes,18,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID        string  `protobuf:"bytes,19,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password         string  `protobuf:"bytes,20,opt,name=Password,proto3" json:"Password,omitempty"`
	FutureSerial     int32   `protobuf:"varint,21,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	InstallID        int32   `protobuf:"varint,22,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID           string  `protobuf:"bytes,23,opt,name=UserID,proto3" json:"UserID,omitempty"`
	VerifyCertNoFlag int32   `protobuf:"varint,24,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID       string  `protobuf:"bytes,25,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	Digest           string  `protobuf:"bytes,26,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType      int32   `protobuf:"varint,27,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID         string  `protobuf:"bytes,28,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType  int32   `protobuf:"varint,29,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank   string  `protobuf:"bytes,30,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc      string  `protobuf:"bytes,31,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag      int32   `protobuf:"varint,32,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag      int32   `protobuf:"varint,33,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo           string  `protobuf:"bytes,34,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID        int32   `protobuf:"varint,35,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID              int32   `protobuf:"varint,36,opt,name=TID,proto3" json:"TID,omitempty"`
	BankUseAmount    float64 `protobuf:"fixed64,37,opt,name=BankUseAmount,proto3" json:"BankUseAmount,omitempty"`
	BankFetchAmount  float64 `protobuf:"fixed64,38,opt,name=BankFetchAmount,proto3" json:"BankFetchAmount,omitempty"`
	LongCustomerName []byte  `protobuf:"bytes,39,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcRspQueryAccountField) Reset() {
	*x = CThostFtdcRspQueryAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspQueryAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspQueryAccountField) ProtoMessage() {}

func (x *CThostFtdcRspQueryAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspQueryAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspQueryAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{291}
}

func (x *CThostFtdcRspQueryAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcRspQueryAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcRspQueryAccountField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetBankUseAmount() float64 {
	if x != nil {
		return x.BankUseAmount
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetBankFetchAmount() float64 {
	if x != nil {
		return x.BankFetchAmount
	}
	return 0
}

func (x *CThostFtdcRspQueryAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcFutureSignIOField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Digest         string `protobuf:"bytes,15,opt,name=Digest,proto3" json:"Digest,omitempty"`
	CurrencyID     string `protobuf:"bytes,16,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	DeviceID       string `protobuf:"bytes,17,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,18,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,19,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,20,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,21,opt,name=TID,proto3" json:"TID,omitempty"`
}

func (x *CThostFtdcFutureSignIOField) Reset() {
	*x = CThostFtdcFutureSignIOField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcFutureSignIOField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcFutureSignIOField) ProtoMessage() {}

func (x *CThostFtdcFutureSignIOField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcFutureSignIOField.ProtoReflect.Descriptor instead.
func (*CThostFtdcFutureSignIOField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{292}
}

func (x *CThostFtdcFutureSignIOField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcFutureSignIOField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcFutureSignIOField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcFutureSignIOField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcFutureSignIOField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcFutureSignIOField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcFutureSignIOField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

type CThostFtdcRspFutureSignInField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Digest         string `protobuf:"bytes,15,opt,name=Digest,proto3" json:"Digest,omitempty"`
	CurrencyID     string `protobuf:"bytes,16,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	DeviceID       string `protobuf:"bytes,17,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,18,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,19,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,20,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,21,opt,name=TID,proto3" json:"TID,omitempty"`
	ErrorID        int32  `protobuf:"varint,22,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg       []byte `protobuf:"bytes,23,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	PinKey         string `protobuf:"bytes,24,opt,name=PinKey,proto3" json:"PinKey,omitempty"`
	MacKey         string `protobuf:"bytes,25,opt,name=MacKey,proto3" json:"MacKey,omitempty"`
}

func (x *CThostFtdcRspFutureSignInField) Reset() {
	*x = CThostFtdcRspFutureSignInField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspFutureSignInField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspFutureSignInField) ProtoMessage() {}

func (x *CThostFtdcRspFutureSignInField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspFutureSignInField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspFutureSignInField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{293}
}

func (x *CThostFtdcRspFutureSignInField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcRspFutureSignInField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcRspFutureSignInField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignInField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignInField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignInField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignInField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignInField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcRspFutureSignInField) GetPinKey() string {
	if x != nil {
		return x.PinKey
	}
	return ""
}

func (x *CThostFtdcRspFutureSignInField) GetMacKey() string {
	if x != nil {
		return x.MacKey
	}
	return ""
}

type CThostFtdcReqFutureSignOutField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Digest         string `protobuf:"bytes,15,opt,name=Digest,proto3" json:"Digest,omitempty"`
	CurrencyID     string `protobuf:"bytes,16,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	DeviceID       string `protobuf:"bytes,17,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,18,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,19,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,20,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,21,opt,name=TID,proto3" json:"TID,omitempty"`
}

func (x *CThostFtdcReqFutureSignOutField) Reset() {
	*x = CThostFtdcReqFutureSignOutField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqFutureSignOutField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqFutureSignOutField) ProtoMessage() {}

func (x *CThostFtdcReqFutureSignOutField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqFutureSignOutField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqFutureSignOutField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{294}
}

func (x *CThostFtdcReqFutureSignOutField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqFutureSignOutField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqFutureSignOutField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqFutureSignOutField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqFutureSignOutField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcReqFutureSignOutField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcReqFutureSignOutField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

type CThostFtdcRspFutureSignOutField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Digest         string `protobuf:"bytes,15,opt,name=Digest,proto3" json:"Digest,omitempty"`
	CurrencyID     string `protobuf:"bytes,16,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	DeviceID       string `protobuf:"bytes,17,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,18,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,19,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,20,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,21,opt,name=TID,proto3" json:"TID,omitempty"`
	ErrorID        int32  `protobuf:"varint,22,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg       []byte `protobuf:"bytes,23,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcRspFutureSignOutField) Reset() {
	*x = CThostFtdcRspFutureSignOutField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspFutureSignOutField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspFutureSignOutField) ProtoMessage() {}

func (x *CThostFtdcRspFutureSignOutField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspFutureSignOutField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspFutureSignOutField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{295}
}

func (x *CThostFtdcRspFutureSignOutField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcRspFutureSignOutField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcRspFutureSignOutField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignOutField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignOutField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcRspFutureSignOutField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignOutField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignOutField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcRspFutureSignOutField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcReqQueryTradeResultBySerialField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string  `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string  `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string  `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string  `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string  `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string  `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string  `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string  `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string  `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32   `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32   `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32   `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	Reference          int32   `protobuf:"varint,13,opt,name=Reference,proto3" json:"Reference,omitempty"`
	RefrenceIssureType int32   `protobuf:"varint,14,opt,name=RefrenceIssureType,proto3" json:"RefrenceIssureType,omitempty"`
	RefrenceIssure     string  `protobuf:"bytes,15,opt,name=RefrenceIssure,proto3" json:"RefrenceIssure,omitempty"`
	CustomerName       []byte  `protobuf:"bytes,16,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32   `protobuf:"varint,17,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string  `protobuf:"bytes,18,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType           int32   `protobuf:"varint,19,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount        string  `protobuf:"bytes,20,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string  `protobuf:"bytes,21,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID          string  `protobuf:"bytes,22,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string  `protobuf:"bytes,23,opt,name=Password,proto3" json:"Password,omitempty"`
	CurrencyID         string  `protobuf:"bytes,24,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	TradeAmount        float64 `protobuf:"fixed64,25,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	Digest             string  `protobuf:"bytes,26,opt,name=Digest,proto3" json:"Digest,omitempty"`
	LongCustomerName   []byte  `protobuf:"bytes,27,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) Reset() {
	*x = CThostFtdcReqQueryTradeResultBySerialField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqQueryTradeResultBySerialField) ProtoMessage() {}

func (x *CThostFtdcReqQueryTradeResultBySerialField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqQueryTradeResultBySerialField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqQueryTradeResultBySerialField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{296}
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetReference() int32 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetRefrenceIssureType() int32 {
	if x != nil {
		return x.RefrenceIssureType
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetRefrenceIssure() string {
	if x != nil {
		return x.RefrenceIssure
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReqQueryTradeResultBySerialField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcRspQueryTradeResultBySerialField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode                    string  `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID                       string  `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID                 string  `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID                     string  `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID               string  `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate                    string  `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime                    string  `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial                   string  `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay                   string  `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial                  int32   `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment                 int32   `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID                    int32   `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	ErrorID                      int32   `protobuf:"varint,13,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg                     []byte  `protobuf:"bytes,14,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	Reference                    int32   `protobuf:"varint,15,opt,name=Reference,proto3" json:"Reference,omitempty"`
	RefrenceIssureType           int32   `protobuf:"varint,16,opt,name=RefrenceIssureType,proto3" json:"RefrenceIssureType,omitempty"`
	RefrenceIssure               string  `protobuf:"bytes,17,opt,name=RefrenceIssure,proto3" json:"RefrenceIssure,omitempty"`
	OriginReturnCode             string  `protobuf:"bytes,18,opt,name=OriginReturnCode,proto3" json:"OriginReturnCode,omitempty"`
	OriginDescrInfoForReturnCode string  `protobuf:"bytes,19,opt,name=OriginDescrInfoForReturnCode,proto3" json:"OriginDescrInfoForReturnCode,omitempty"`
	BankAccount                  string  `protobuf:"bytes,20,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord                 string  `protobuf:"bytes,21,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID                    string  `protobuf:"bytes,22,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password                     string  `protobuf:"bytes,23,opt,name=Password,proto3" json:"Password,omitempty"`
	CurrencyID                   string  `protobuf:"bytes,24,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	TradeAmount                  float64 `protobuf:"fixed64,25,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	Digest                       string  `protobuf:"bytes,26,opt,name=Digest,proto3" json:"Digest,omitempty"`
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) Reset() {
	*x = CThostFtdcRspQueryTradeResultBySerialField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspQueryTradeResultBySerialField) ProtoMessage() {}

func (x *CThostFtdcRspQueryTradeResultBySerialField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspQueryTradeResultBySerialField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspQueryTradeResultBySerialField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{297}
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetReference() int32 {
	if x != nil {
		return x.Reference
	}
	return 0
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetRefrenceIssureType() int32 {
	if x != nil {
		return x.RefrenceIssureType
	}
	return 0
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetRefrenceIssure() string {
	if x != nil {
		return x.RefrenceIssure
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetOriginReturnCode() string {
	if x != nil {
		return x.OriginReturnCode
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetOriginDescrInfoForReturnCode() string {
	if x != nil {
		return x.OriginDescrInfoForReturnCode
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *CThostFtdcRspQueryTradeResultBySerialField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type CThostFtdcReqDayEndFileReadyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode        string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID           string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID     string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID         string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID   string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate        string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime        string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial       string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay       string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial      int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment     int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID        int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	FileBusinessCode int32  `protobuf:"varint,13,opt,name=FileBusinessCode,proto3" json:"FileBusinessCode,omitempty"`
	Digest           string `protobuf:"bytes,14,opt,name=Digest,proto3" json:"Digest,omitempty"`
}

func (x *CThostFtdcReqDayEndFileReadyField) Reset() {
	*x = CThostFtdcReqDayEndFileReadyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqDayEndFileReadyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqDayEndFileReadyField) ProtoMessage() {}

func (x *CThostFtdcReqDayEndFileReadyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqDayEndFileReadyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqDayEndFileReadyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{298}
}

func (x *CThostFtdcReqDayEndFileReadyField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqDayEndFileReadyField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqDayEndFileReadyField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqDayEndFileReadyField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqDayEndFileReadyField) GetFileBusinessCode() int32 {
	if x != nil {
		return x.FileBusinessCode
	}
	return 0
}

func (x *CThostFtdcReqDayEndFileReadyField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type CThostFtdcReturnResultField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReturnCode             string `protobuf:"bytes,1,opt,name=ReturnCode,proto3" json:"ReturnCode,omitempty"`
	DescrInfoForReturnCode string `protobuf:"bytes,2,opt,name=DescrInfoForReturnCode,proto3" json:"DescrInfoForReturnCode,omitempty"`
}

func (x *CThostFtdcReturnResultField) Reset() {
	*x = CThostFtdcReturnResultField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReturnResultField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReturnResultField) ProtoMessage() {}

func (x *CThostFtdcReturnResultField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReturnResultField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReturnResultField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{299}
}

func (x *CThostFtdcReturnResultField) GetReturnCode() string {
	if x != nil {
		return x.ReturnCode
	}
	return ""
}

func (x *CThostFtdcReturnResultField) GetDescrInfoForReturnCode() string {
	if x != nil {
		return x.DescrInfoForReturnCode
	}
	return ""
}

type CThostFtdcVerifyFuturePasswordField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	AccountID      string `protobuf:"bytes,13,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password       string `protobuf:"bytes,14,opt,name=Password,proto3" json:"Password,omitempty"`
	BankAccount    string `protobuf:"bytes,15,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord   string `protobuf:"bytes,16,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	InstallID      int32  `protobuf:"varint,17,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	TID            int32  `protobuf:"varint,18,opt,name=TID,proto3" json:"TID,omitempty"`
	CurrencyID     string `protobuf:"bytes,19,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcVerifyFuturePasswordField) Reset() {
	*x = CThostFtdcVerifyFuturePasswordField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcVerifyFuturePasswordField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcVerifyFuturePasswordField) ProtoMessage() {}

func (x *CThostFtdcVerifyFuturePasswordField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcVerifyFuturePasswordField.ProtoReflect.Descriptor instead.
func (*CThostFtdcVerifyFuturePasswordField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{300}
}

func (x *CThostFtdcVerifyFuturePasswordField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcVerifyFuturePasswordField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcVerifyFuturePasswordField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcVerifyFuturePasswordField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcVerifyFuturePasswordField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcVerifyFuturePasswordField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcVerifyCustInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerName     []byte `protobuf:"bytes,1,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType       int32  `protobuf:"varint,2,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo string `protobuf:"bytes,3,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType         int32  `protobuf:"varint,4,opt,name=CustType,proto3" json:"CustType,omitempty"`
	LongCustomerName []byte `protobuf:"bytes,5,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcVerifyCustInfoField) Reset() {
	*x = CThostFtdcVerifyCustInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcVerifyCustInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcVerifyCustInfoField) ProtoMessage() {}

func (x *CThostFtdcVerifyCustInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcVerifyCustInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcVerifyCustInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{301}
}

func (x *CThostFtdcVerifyCustInfoField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcVerifyCustInfoField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcVerifyCustInfoField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcVerifyCustInfoField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcVerifyCustInfoField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcVerifyFuturePasswordAndCustInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerName     []byte `protobuf:"bytes,1,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType       int32  `protobuf:"varint,2,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo string `protobuf:"bytes,3,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType         int32  `protobuf:"varint,4,opt,name=CustType,proto3" json:"CustType,omitempty"`
	AccountID        string `protobuf:"bytes,5,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password         string `protobuf:"bytes,6,opt,name=Password,proto3" json:"Password,omitempty"`
	CurrencyID       string `protobuf:"bytes,7,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	LongCustomerName []byte `protobuf:"bytes,8,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) Reset() {
	*x = CThostFtdcVerifyFuturePasswordAndCustInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcVerifyFuturePasswordAndCustInfoField) ProtoMessage() {}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcVerifyFuturePasswordAndCustInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcVerifyFuturePasswordAndCustInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{302}
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcVerifyFuturePasswordAndCustInfoField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcDepositResultInformField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositSeqNo           string  `protobuf:"bytes,1,opt,name=DepositSeqNo,proto3" json:"DepositSeqNo,omitempty"`
	BrokerID               string  `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID             string  `protobuf:"bytes,3,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	Deposit                float64 `protobuf:"fixed64,4,opt,name=Deposit,proto3" json:"Deposit,omitempty"`
	RequestID              int32   `protobuf:"varint,5,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	ReturnCode             string  `protobuf:"bytes,6,opt,name=ReturnCode,proto3" json:"ReturnCode,omitempty"`
	DescrInfoForReturnCode string  `protobuf:"bytes,7,opt,name=DescrInfoForReturnCode,proto3" json:"DescrInfoForReturnCode,omitempty"`
}

func (x *CThostFtdcDepositResultInformField) Reset() {
	*x = CThostFtdcDepositResultInformField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcDepositResultInformField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcDepositResultInformField) ProtoMessage() {}

func (x *CThostFtdcDepositResultInformField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcDepositResultInformField.ProtoReflect.Descriptor instead.
func (*CThostFtdcDepositResultInformField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{303}
}

func (x *CThostFtdcDepositResultInformField) GetDepositSeqNo() string {
	if x != nil {
		return x.DepositSeqNo
	}
	return ""
}

func (x *CThostFtdcDepositResultInformField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcDepositResultInformField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcDepositResultInformField) GetDeposit() float64 {
	if x != nil {
		return x.Deposit
	}
	return 0
}

func (x *CThostFtdcDepositResultInformField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcDepositResultInformField) GetReturnCode() string {
	if x != nil {
		return x.ReturnCode
	}
	return ""
}

func (x *CThostFtdcDepositResultInformField) GetDescrInfoForReturnCode() string {
	if x != nil {
		return x.DescrInfoForReturnCode
	}
	return ""
}

type CThostFtdcReqSyncKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Message        string `protobuf:"bytes,15,opt,name=Message,proto3" json:"Message,omitempty"`
	DeviceID       string `protobuf:"bytes,16,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,17,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,18,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,19,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,20,opt,name=TID,proto3" json:"TID,omitempty"`
}

func (x *CThostFtdcReqSyncKeyField) Reset() {
	*x = CThostFtdcReqSyncKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqSyncKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqSyncKeyField) ProtoMessage() {}

func (x *CThostFtdcReqSyncKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqSyncKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqSyncKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{304}
}

func (x *CThostFtdcReqSyncKeyField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReqSyncKeyField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReqSyncKeyField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReqSyncKeyField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReqSyncKeyField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcReqSyncKeyField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcReqSyncKeyField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

type CThostFtdcRspSyncKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Message        string `protobuf:"bytes,15,opt,name=Message,proto3" json:"Message,omitempty"`
	DeviceID       string `protobuf:"bytes,16,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,17,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,18,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,19,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,20,opt,name=TID,proto3" json:"TID,omitempty"`
	ErrorID        int32  `protobuf:"varint,21,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg       []byte `protobuf:"bytes,22,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcRspSyncKeyField) Reset() {
	*x = CThostFtdcRspSyncKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspSyncKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspSyncKeyField) ProtoMessage() {}

func (x *CThostFtdcRspSyncKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspSyncKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspSyncKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{305}
}

func (x *CThostFtdcRspSyncKeyField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcRspSyncKeyField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcRspSyncKeyField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcRspSyncKeyField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcRspSyncKeyField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcRspSyncKeyField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcRspSyncKeyField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcRspSyncKeyField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcRspSyncKeyField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcNotifyQueryAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode        string  `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID           string  `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID     string  `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID         string  `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID   string  `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate        string  `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime        string  `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial       string  `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay       string  `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial      int32   `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment     int32   `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID        int32   `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName     []byte  `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType       int32   `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo string  `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustType         int32   `protobuf:"varint,16,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccount      string  `protobuf:"bytes,17,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord     string  `protobuf:"bytes,18,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID        string  `protobuf:"bytes,19,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password         string  `protobuf:"bytes,20,opt,name=Password,proto3" json:"Password,omitempty"`
	FutureSerial     int32   `protobuf:"varint,21,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	InstallID        int32   `protobuf:"varint,22,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID           string  `protobuf:"bytes,23,opt,name=UserID,proto3" json:"UserID,omitempty"`
	VerifyCertNoFlag int32   `protobuf:"varint,24,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID       string  `protobuf:"bytes,25,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	Digest           string  `protobuf:"bytes,26,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType      int32   `protobuf:"varint,27,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID         string  `protobuf:"bytes,28,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType  int32   `protobuf:"varint,29,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank   string  `protobuf:"bytes,30,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc      string  `protobuf:"bytes,31,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag      int32   `protobuf:"varint,32,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag      int32   `protobuf:"varint,33,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo           string  `protobuf:"bytes,34,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID        int32   `protobuf:"varint,35,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID              int32   `protobuf:"varint,36,opt,name=TID,proto3" json:"TID,omitempty"`
	BankUseAmount    float64 `protobuf:"fixed64,37,opt,name=BankUseAmount,proto3" json:"BankUseAmount,omitempty"`
	BankFetchAmount  float64 `protobuf:"fixed64,38,opt,name=BankFetchAmount,proto3" json:"BankFetchAmount,omitempty"`
	ErrorID          int32   `protobuf:"varint,39,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg         []byte  `protobuf:"bytes,40,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	LongCustomerName []byte  `protobuf:"bytes,41,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcNotifyQueryAccountField) Reset() {
	*x = CThostFtdcNotifyQueryAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcNotifyQueryAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcNotifyQueryAccountField) ProtoMessage() {}

func (x *CThostFtdcNotifyQueryAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcNotifyQueryAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcNotifyQueryAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{306}
}

func (x *CThostFtdcNotifyQueryAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcNotifyQueryAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcNotifyQueryAccountField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankUseAmount() float64 {
	if x != nil {
		return x.BankUseAmount
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetBankFetchAmount() float64 {
	if x != nil {
		return x.BankFetchAmount
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcNotifyQueryAccountField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcNotifyQueryAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcTransferSerialField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlateSerial      int32   `protobuf:"varint,1,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	TradeDate        string  `protobuf:"bytes,2,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradingDay       string  `protobuf:"bytes,3,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	TradeTime        string  `protobuf:"bytes,4,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	TradeCode        string  `protobuf:"bytes,5,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	SessionID        int32   `protobuf:"varint,6,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	BankID           string  `protobuf:"bytes,7,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID     string  `protobuf:"bytes,8,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BankAccType      int32   `protobuf:"varint,9,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	BankAccount      string  `protobuf:"bytes,10,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankSerial       string  `protobuf:"bytes,11,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	BrokerID         string  `protobuf:"bytes,12,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID   string  `protobuf:"bytes,13,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	FutureAccType    int32   `protobuf:"varint,14,opt,name=FutureAccType,proto3" json:"FutureAccType,omitempty"`
	AccountID        string  `protobuf:"bytes,15,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	InvestorID       string  `protobuf:"bytes,16,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
	FutureSerial     int32   `protobuf:"varint,17,opt,name=FutureSerial,proto3" json:"FutureSerial,omitempty"`
	IdCardType       int32   `protobuf:"varint,18,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo string  `protobuf:"bytes,19,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CurrencyID       string  `protobuf:"bytes,20,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	TradeAmount      float64 `protobuf:"fixed64,21,opt,name=TradeAmount,proto3" json:"TradeAmount,omitempty"`
	CustFee          float64 `protobuf:"fixed64,22,opt,name=CustFee,proto3" json:"CustFee,omitempty"`
	BrokerFee        float64 `protobuf:"fixed64,23,opt,name=BrokerFee,proto3" json:"BrokerFee,omitempty"`
	AvailabilityFlag int32   `protobuf:"varint,24,opt,name=AvailabilityFlag,proto3" json:"AvailabilityFlag,omitempty"`
	OperatorCode     string  `protobuf:"bytes,25,opt,name=OperatorCode,proto3" json:"OperatorCode,omitempty"`
	BankNewAccount   string  `protobuf:"bytes,26,opt,name=BankNewAccount,proto3" json:"BankNewAccount,omitempty"`
	ErrorID          int32   `protobuf:"varint,27,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg         []byte  `protobuf:"bytes,28,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcTransferSerialField) Reset() {
	*x = CThostFtdcTransferSerialField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTransferSerialField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTransferSerialField) ProtoMessage() {}

func (x *CThostFtdcTransferSerialField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTransferSerialField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTransferSerialField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{307}
}

func (x *CThostFtdcTransferSerialField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetFutureAccType() int32 {
	if x != nil {
		return x.FutureAccType
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetFutureSerial() int32 {
	if x != nil {
		return x.FutureSerial
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetTradeAmount() float64 {
	if x != nil {
		return x.TradeAmount
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetCustFee() float64 {
	if x != nil {
		return x.CustFee
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetBrokerFee() float64 {
	if x != nil {
		return x.BrokerFee
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetAvailabilityFlag() int32 {
	if x != nil {
		return x.AvailabilityFlag
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetOperatorCode() string {
	if x != nil {
		return x.OperatorCode
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetBankNewAccount() string {
	if x != nil {
		return x.BankNewAccount
	}
	return ""
}

func (x *CThostFtdcTransferSerialField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcTransferSerialField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcQryTransferSerialField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID  string `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	BankID     string `protobuf:"bytes,3,opt,name=BankID,proto3" json:"BankID,omitempty"`
	CurrencyID string `protobuf:"bytes,4,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcQryTransferSerialField) Reset() {
	*x = CThostFtdcQryTransferSerialField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryTransferSerialField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryTransferSerialField) ProtoMessage() {}

func (x *CThostFtdcQryTransferSerialField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryTransferSerialField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryTransferSerialField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{308}
}

func (x *CThostFtdcQryTransferSerialField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryTransferSerialField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcQryTransferSerialField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcQryTransferSerialField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcNotifyFutureSignInField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Digest         string `protobuf:"bytes,15,opt,name=Digest,proto3" json:"Digest,omitempty"`
	CurrencyID     string `protobuf:"bytes,16,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	DeviceID       string `protobuf:"bytes,17,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,18,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,19,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,20,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,21,opt,name=TID,proto3" json:"TID,omitempty"`
	ErrorID        int32  `protobuf:"varint,22,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg       []byte `protobuf:"bytes,23,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	PinKey         string `protobuf:"bytes,24,opt,name=PinKey,proto3" json:"PinKey,omitempty"`
	MacKey         string `protobuf:"bytes,25,opt,name=MacKey,proto3" json:"MacKey,omitempty"`
}

func (x *CThostFtdcNotifyFutureSignInField) Reset() {
	*x = CThostFtdcNotifyFutureSignInField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcNotifyFutureSignInField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcNotifyFutureSignInField) ProtoMessage() {}

func (x *CThostFtdcNotifyFutureSignInField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcNotifyFutureSignInField.ProtoReflect.Descriptor instead.
func (*CThostFtdcNotifyFutureSignInField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{309}
}

func (x *CThostFtdcNotifyFutureSignInField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignInField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignInField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignInField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignInField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignInField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignInField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignInField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcNotifyFutureSignInField) GetPinKey() string {
	if x != nil {
		return x.PinKey
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignInField) GetMacKey() string {
	if x != nil {
		return x.MacKey
	}
	return ""
}

type CThostFtdcNotifyFutureSignOutField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Digest         string `protobuf:"bytes,15,opt,name=Digest,proto3" json:"Digest,omitempty"`
	CurrencyID     string `protobuf:"bytes,16,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	DeviceID       string `protobuf:"bytes,17,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,18,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,19,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,20,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,21,opt,name=TID,proto3" json:"TID,omitempty"`
	ErrorID        int32  `protobuf:"varint,22,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg       []byte `protobuf:"bytes,23,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcNotifyFutureSignOutField) Reset() {
	*x = CThostFtdcNotifyFutureSignOutField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcNotifyFutureSignOutField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcNotifyFutureSignOutField) ProtoMessage() {}

func (x *CThostFtdcNotifyFutureSignOutField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcNotifyFutureSignOutField.ProtoReflect.Descriptor instead.
func (*CThostFtdcNotifyFutureSignOutField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{310}
}

func (x *CThostFtdcNotifyFutureSignOutField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignOutField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignOutField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignOutField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignOutField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcNotifyFutureSignOutField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignOutField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignOutField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcNotifyFutureSignOutField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcNotifySyncKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode      string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID         string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID   string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID       string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate      string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime      string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial     string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay     string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial    int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment   int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID      int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	InstallID      int32  `protobuf:"varint,13,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	UserID         string `protobuf:"bytes,14,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Message        string `protobuf:"bytes,15,opt,name=Message,proto3" json:"Message,omitempty"`
	DeviceID       string `protobuf:"bytes,16,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BrokerIDByBank string `protobuf:"bytes,17,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	OperNo         string `protobuf:"bytes,18,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	RequestID      int32  `protobuf:"varint,19,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TID            int32  `protobuf:"varint,20,opt,name=TID,proto3" json:"TID,omitempty"`
	ErrorID        int32  `protobuf:"varint,21,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg       []byte `protobuf:"bytes,22,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcNotifySyncKeyField) Reset() {
	*x = CThostFtdcNotifySyncKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcNotifySyncKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcNotifySyncKeyField) ProtoMessage() {}

func (x *CThostFtdcNotifySyncKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcNotifySyncKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcNotifySyncKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{311}
}

func (x *CThostFtdcNotifySyncKeyField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcNotifySyncKeyField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcNotifySyncKeyField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcNotifySyncKeyField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcNotifySyncKeyField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcNotifySyncKeyField) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CThostFtdcNotifySyncKeyField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcNotifySyncKeyField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcNotifySyncKeyField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcQryAccountregisterField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID    string `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	BankID       string `protobuf:"bytes,3,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID string `protobuf:"bytes,4,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	CurrencyID   string `protobuf:"bytes,5,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcQryAccountregisterField) Reset() {
	*x = CThostFtdcQryAccountregisterField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryAccountregisterField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryAccountregisterField) ProtoMessage() {}

func (x *CThostFtdcQryAccountregisterField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryAccountregisterField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryAccountregisterField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{312}
}

func (x *CThostFtdcQryAccountregisterField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryAccountregisterField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcQryAccountregisterField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcQryAccountregisterField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcQryAccountregisterField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcAccountregisterField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDay         string `protobuf:"bytes,1,opt,name=TradeDay,proto3" json:"TradeDay,omitempty"`
	BankID           string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID     string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BankAccount      string `protobuf:"bytes,4,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BrokerID         string `protobuf:"bytes,5,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID   string `protobuf:"bytes,6,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	AccountID        string `protobuf:"bytes,7,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	IdCardType       int32  `protobuf:"varint,8,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo string `protobuf:"bytes,9,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	CustomerName     []byte `protobuf:"bytes,10,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	CurrencyID       string `protobuf:"bytes,11,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	OpenOrDestroy    int32  `protobuf:"varint,12,opt,name=OpenOrDestroy,proto3" json:"OpenOrDestroy,omitempty"`
	RegDate          string `protobuf:"bytes,13,opt,name=RegDate,proto3" json:"RegDate,omitempty"`
	OutDate          string `protobuf:"bytes,14,opt,name=OutDate,proto3" json:"OutDate,omitempty"`
	TID              int32  `protobuf:"varint,15,opt,name=TID,proto3" json:"TID,omitempty"`
	CustType         int32  `protobuf:"varint,16,opt,name=CustType,proto3" json:"CustType,omitempty"`
	BankAccType      int32  `protobuf:"varint,17,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	LongCustomerName []byte `protobuf:"bytes,18,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcAccountregisterField) Reset() {
	*x = CThostFtdcAccountregisterField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcAccountregisterField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcAccountregisterField) ProtoMessage() {}

func (x *CThostFtdcAccountregisterField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcAccountregisterField.ProtoReflect.Descriptor instead.
func (*CThostFtdcAccountregisterField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{313}
}

func (x *CThostFtdcAccountregisterField) GetTradeDay() string {
	if x != nil {
		return x.TradeDay
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcAccountregisterField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcAccountregisterField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetOpenOrDestroy() int32 {
	if x != nil {
		return x.OpenOrDestroy
	}
	return 0
}

func (x *CThostFtdcAccountregisterField) GetRegDate() string {
	if x != nil {
		return x.RegDate
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetOutDate() string {
	if x != nil {
		return x.OutDate
	}
	return ""
}

func (x *CThostFtdcAccountregisterField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcAccountregisterField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcAccountregisterField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcAccountregisterField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcOpenAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID          string `protobuf:"bytes,28,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string `protobuf:"bytes,29,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID          int32  `protobuf:"varint,30,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,31,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	CashExchangeCode   int32  `protobuf:"varint,33,opt,name=CashExchangeCode,proto3" json:"CashExchangeCode,omitempty"`
	Digest             string `protobuf:"bytes,34,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32  `protobuf:"varint,35,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID           string `protobuf:"bytes,36,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType    int32  `protobuf:"varint,37,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,38,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc        string `protobuf:"bytes,39,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag        int32  `protobuf:"varint,40,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32  `protobuf:"varint,41,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo             string `protobuf:"bytes,42,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	TID                int32  `protobuf:"varint,43,opt,name=TID,proto3" json:"TID,omitempty"`
	UserID             string `protobuf:"bytes,44,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ErrorID            int32  `protobuf:"varint,45,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg           []byte `protobuf:"bytes,46,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	LongCustomerName   []byte `protobuf:"bytes,47,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcOpenAccountField) Reset() {
	*x = CThostFtdcOpenAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcOpenAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcOpenAccountField) ProtoMessage() {}

func (x *CThostFtdcOpenAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcOpenAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcOpenAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{314}
}

func (x *CThostFtdcOpenAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcOpenAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetCashExchangeCode() int32 {
	if x != nil {
		return x.CashExchangeCode
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcOpenAccountField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcOpenAccountField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcOpenAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcCancelAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	AccountID          string `protobuf:"bytes,28,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string `protobuf:"bytes,29,opt,name=Password,proto3" json:"Password,omitempty"`
	InstallID          int32  `protobuf:"varint,30,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,31,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,32,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	CashExchangeCode   int32  `protobuf:"varint,33,opt,name=CashExchangeCode,proto3" json:"CashExchangeCode,omitempty"`
	Digest             string `protobuf:"bytes,34,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32  `protobuf:"varint,35,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	DeviceID           string `protobuf:"bytes,36,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	BankSecuAccType    int32  `protobuf:"varint,37,opt,name=BankSecuAccType,proto3" json:"BankSecuAccType,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,38,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankSecuAcc        string `protobuf:"bytes,39,opt,name=BankSecuAcc,proto3" json:"BankSecuAcc,omitempty"`
	BankPwdFlag        int32  `protobuf:"varint,40,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32  `protobuf:"varint,41,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	OperNo             string `protobuf:"bytes,42,opt,name=OperNo,proto3" json:"OperNo,omitempty"`
	TID                int32  `protobuf:"varint,43,opt,name=TID,proto3" json:"TID,omitempty"`
	UserID             string `protobuf:"bytes,44,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ErrorID            int32  `protobuf:"varint,45,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg           []byte `protobuf:"bytes,46,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	LongCustomerName   []byte `protobuf:"bytes,47,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcCancelAccountField) Reset() {
	*x = CThostFtdcCancelAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCancelAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCancelAccountField) ProtoMessage() {}

func (x *CThostFtdcCancelAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCancelAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCancelAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{315}
}

func (x *CThostFtdcCancelAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcCancelAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetCashExchangeCode() int32 {
	if x != nil {
		return x.CashExchangeCode
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankSecuAccType() int32 {
	if x != nil {
		return x.BankSecuAccType
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankSecuAcc() string {
	if x != nil {
		return x.BankSecuAcc
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetOperNo() string {
	if x != nil {
		return x.OperNo
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcCancelAccountField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcCancelAccountField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcCancelAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcChangeAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	NewBankAccount     string `protobuf:"bytes,28,opt,name=NewBankAccount,proto3" json:"NewBankAccount,omitempty"`
	NewBankPassWord    string `protobuf:"bytes,29,opt,name=NewBankPassWord,proto3" json:"NewBankPassWord,omitempty"`
	AccountID          string `protobuf:"bytes,30,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string `protobuf:"bytes,31,opt,name=Password,proto3" json:"Password,omitempty"`
	BankAccType        int32  `protobuf:"varint,32,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	InstallID          int32  `protobuf:"varint,33,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,34,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,35,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,36,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	BankPwdFlag        int32  `protobuf:"varint,37,opt,name=BankPwdFlag,proto3" json:"BankPwdFlag,omitempty"`
	SecuPwdFlag        int32  `protobuf:"varint,38,opt,name=SecuPwdFlag,proto3" json:"SecuPwdFlag,omitempty"`
	TID                int32  `protobuf:"varint,39,opt,name=TID,proto3" json:"TID,omitempty"`
	Digest             string `protobuf:"bytes,40,opt,name=Digest,proto3" json:"Digest,omitempty"`
	ErrorID            int32  `protobuf:"varint,41,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg           []byte `protobuf:"bytes,42,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
	LongCustomerName   []byte `protobuf:"bytes,43,opt,name=LongCustomerName,proto3" json:"LongCustomerName,omitempty"`
}

func (x *CThostFtdcChangeAccountField) Reset() {
	*x = CThostFtdcChangeAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcChangeAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcChangeAccountField) ProtoMessage() {}

func (x *CThostFtdcChangeAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcChangeAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcChangeAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{316}
}

func (x *CThostFtdcChangeAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcChangeAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetNewBankAccount() string {
	if x != nil {
		return x.NewBankAccount
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetNewBankPassWord() string {
	if x != nil {
		return x.NewBankPassWord
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetBankPwdFlag() int32 {
	if x != nil {
		return x.BankPwdFlag
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetSecuPwdFlag() int32 {
	if x != nil {
		return x.SecuPwdFlag
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcChangeAccountField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcChangeAccountField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

func (x *CThostFtdcChangeAccountField) GetLongCustomerName() []byte {
	if x != nil {
		return x.LongCustomerName
	}
	return nil
}

type CThostFtdcSecAgentACIDMapField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID         string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID           string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AccountID        string `protobuf:"bytes,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID       string `protobuf:"bytes,4,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	BrokerSecAgentID string `protobuf:"bytes,5,opt,name=BrokerSecAgentID,proto3" json:"BrokerSecAgentID,omitempty"`
}

func (x *CThostFtdcSecAgentACIDMapField) Reset() {
	*x = CThostFtdcSecAgentACIDMapField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcSecAgentACIDMapField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcSecAgentACIDMapField) ProtoMessage() {}

func (x *CThostFtdcSecAgentACIDMapField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcSecAgentACIDMapField.ProtoReflect.Descriptor instead.
func (*CThostFtdcSecAgentACIDMapField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{317}
}

func (x *CThostFtdcSecAgentACIDMapField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcSecAgentACIDMapField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcSecAgentACIDMapField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcSecAgentACIDMapField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcSecAgentACIDMapField) GetBrokerSecAgentID() string {
	if x != nil {
		return x.BrokerSecAgentID
	}
	return ""
}

type CThostFtdcQrySecAgentACIDMapField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID     string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AccountID  string `protobuf:"bytes,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CurrencyID string `protobuf:"bytes,4,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcQrySecAgentACIDMapField) Reset() {
	*x = CThostFtdcQrySecAgentACIDMapField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySecAgentACIDMapField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySecAgentACIDMapField) ProtoMessage() {}

func (x *CThostFtdcQrySecAgentACIDMapField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySecAgentACIDMapField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySecAgentACIDMapField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{318}
}

func (x *CThostFtdcQrySecAgentACIDMapField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySecAgentACIDMapField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcQrySecAgentACIDMapField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcQrySecAgentACIDMapField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcUserRightsAssignField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID       string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	DRIdentityID int32  `protobuf:"varint,3,opt,name=DRIdentityID,proto3" json:"DRIdentityID,omitempty"`
}

func (x *CThostFtdcUserRightsAssignField) Reset() {
	*x = CThostFtdcUserRightsAssignField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcUserRightsAssignField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcUserRightsAssignField) ProtoMessage() {}

func (x *CThostFtdcUserRightsAssignField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcUserRightsAssignField.ProtoReflect.Descriptor instead.
func (*CThostFtdcUserRightsAssignField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{319}
}

func (x *CThostFtdcUserRightsAssignField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcUserRightsAssignField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcUserRightsAssignField) GetDRIdentityID() int32 {
	if x != nil {
		return x.DRIdentityID
	}
	return 0
}

type CThostFtdcBrokerUserRightAssignField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID     string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	DRIdentityID int32  `protobuf:"varint,2,opt,name=DRIdentityID,proto3" json:"DRIdentityID,omitempty"`
	Tradeable    int32  `protobuf:"varint,3,opt,name=Tradeable,proto3" json:"Tradeable,omitempty"`
}

func (x *CThostFtdcBrokerUserRightAssignField) Reset() {
	*x = CThostFtdcBrokerUserRightAssignField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcBrokerUserRightAssignField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcBrokerUserRightAssignField) ProtoMessage() {}

func (x *CThostFtdcBrokerUserRightAssignField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcBrokerUserRightAssignField.ProtoReflect.Descriptor instead.
func (*CThostFtdcBrokerUserRightAssignField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{320}
}

func (x *CThostFtdcBrokerUserRightAssignField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcBrokerUserRightAssignField) GetDRIdentityID() int32 {
	if x != nil {
		return x.DRIdentityID
	}
	return 0
}

func (x *CThostFtdcBrokerUserRightAssignField) GetTradeable() int32 {
	if x != nil {
		return x.Tradeable
	}
	return 0
}

type CThostFtdcDRTransferField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrigDRIdentityID int32  `protobuf:"varint,1,opt,name=OrigDRIdentityID,proto3" json:"OrigDRIdentityID,omitempty"`
	DestDRIdentityID int32  `protobuf:"varint,2,opt,name=DestDRIdentityID,proto3" json:"DestDRIdentityID,omitempty"`
	OrigBrokerID     string `protobuf:"bytes,3,opt,name=OrigBrokerID,proto3" json:"OrigBrokerID,omitempty"`
	DestBrokerID     string `protobuf:"bytes,4,opt,name=DestBrokerID,proto3" json:"DestBrokerID,omitempty"`
}

func (x *CThostFtdcDRTransferField) Reset() {
	*x = CThostFtdcDRTransferField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcDRTransferField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcDRTransferField) ProtoMessage() {}

func (x *CThostFtdcDRTransferField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcDRTransferField.ProtoReflect.Descriptor instead.
func (*CThostFtdcDRTransferField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{321}
}

func (x *CThostFtdcDRTransferField) GetOrigDRIdentityID() int32 {
	if x != nil {
		return x.OrigDRIdentityID
	}
	return 0
}

func (x *CThostFtdcDRTransferField) GetDestDRIdentityID() int32 {
	if x != nil {
		return x.DestDRIdentityID
	}
	return 0
}

func (x *CThostFtdcDRTransferField) GetOrigBrokerID() string {
	if x != nil {
		return x.OrigBrokerID
	}
	return ""
}

func (x *CThostFtdcDRTransferField) GetDestBrokerID() string {
	if x != nil {
		return x.DestBrokerID
	}
	return ""
}

type CThostFtdcFensUserInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID  string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	LoginMode int32  `protobuf:"varint,3,opt,name=LoginMode,proto3" json:"LoginMode,omitempty"`
}

func (x *CThostFtdcFensUserInfoField) Reset() {
	*x = CThostFtdcFensUserInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcFensUserInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcFensUserInfoField) ProtoMessage() {}

func (x *CThostFtdcFensUserInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcFensUserInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcFensUserInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{322}
}

func (x *CThostFtdcFensUserInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcFensUserInfoField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcFensUserInfoField) GetLoginMode() int32 {
	if x != nil {
		return x.LoginMode
	}
	return 0
}

type CThostFtdcCurrTransferIdentityField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityID int32 `protobuf:"varint,1,opt,name=IdentityID,proto3" json:"IdentityID,omitempty"`
}

func (x *CThostFtdcCurrTransferIdentityField) Reset() {
	*x = CThostFtdcCurrTransferIdentityField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCurrTransferIdentityField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCurrTransferIdentityField) ProtoMessage() {}

func (x *CThostFtdcCurrTransferIdentityField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCurrTransferIdentityField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCurrTransferIdentityField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{323}
}

func (x *CThostFtdcCurrTransferIdentityField) GetIdentityID() int32 {
	if x != nil {
		return x.IdentityID
	}
	return 0
}

type CThostFtdcLoginForbiddenUserField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID  string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID    string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	IPAddress string `protobuf:"bytes,3,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
}

func (x *CThostFtdcLoginForbiddenUserField) Reset() {
	*x = CThostFtdcLoginForbiddenUserField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcLoginForbiddenUserField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcLoginForbiddenUserField) ProtoMessage() {}

func (x *CThostFtdcLoginForbiddenUserField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcLoginForbiddenUserField.ProtoReflect.Descriptor instead.
func (*CThostFtdcLoginForbiddenUserField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{324}
}

func (x *CThostFtdcLoginForbiddenUserField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcLoginForbiddenUserField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcLoginForbiddenUserField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

type CThostFtdcQryLoginForbiddenUserField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcQryLoginForbiddenUserField) Reset() {
	*x = CThostFtdcQryLoginForbiddenUserField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryLoginForbiddenUserField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryLoginForbiddenUserField) ProtoMessage() {}

func (x *CThostFtdcQryLoginForbiddenUserField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryLoginForbiddenUserField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryLoginForbiddenUserField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{325}
}

func (x *CThostFtdcQryLoginForbiddenUserField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryLoginForbiddenUserField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcMulticastGroupInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIP   string `protobuf:"bytes,1,opt,name=GroupIP,proto3" json:"GroupIP,omitempty"`
	GroupPort int32  `protobuf:"varint,2,opt,name=GroupPort,proto3" json:"GroupPort,omitempty"`
	SourceIP  string `protobuf:"bytes,3,opt,name=SourceIP,proto3" json:"SourceIP,omitempty"`
}

func (x *CThostFtdcMulticastGroupInfoField) Reset() {
	*x = CThostFtdcMulticastGroupInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcMulticastGroupInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcMulticastGroupInfoField) ProtoMessage() {}

func (x *CThostFtdcMulticastGroupInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcMulticastGroupInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcMulticastGroupInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{326}
}

func (x *CThostFtdcMulticastGroupInfoField) GetGroupIP() string {
	if x != nil {
		return x.GroupIP
	}
	return ""
}

func (x *CThostFtdcMulticastGroupInfoField) GetGroupPort() int32 {
	if x != nil {
		return x.GroupPort
	}
	return 0
}

func (x *CThostFtdcMulticastGroupInfoField) GetSourceIP() string {
	if x != nil {
		return x.SourceIP
	}
	return ""
}

type CThostFtdcTradingAccountReserveField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string  `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID  string  `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Reserve    float64 `protobuf:"fixed64,3,opt,name=Reserve,proto3" json:"Reserve,omitempty"`
	CurrencyID string  `protobuf:"bytes,4,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcTradingAccountReserveField) Reset() {
	*x = CThostFtdcTradingAccountReserveField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcTradingAccountReserveField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcTradingAccountReserveField) ProtoMessage() {}

func (x *CThostFtdcTradingAccountReserveField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcTradingAccountReserveField.ProtoReflect.Descriptor instead.
func (*CThostFtdcTradingAccountReserveField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{327}
}

func (x *CThostFtdcTradingAccountReserveField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcTradingAccountReserveField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcTradingAccountReserveField) GetReserve() float64 {
	if x != nil {
		return x.Reserve
	}
	return 0
}

func (x *CThostFtdcTradingAccountReserveField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcQryLoginForbiddenIPField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAddress string `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
}

func (x *CThostFtdcQryLoginForbiddenIPField) Reset() {
	*x = CThostFtdcQryLoginForbiddenIPField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryLoginForbiddenIPField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryLoginForbiddenIPField) ProtoMessage() {}

func (x *CThostFtdcQryLoginForbiddenIPField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryLoginForbiddenIPField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryLoginForbiddenIPField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{328}
}

func (x *CThostFtdcQryLoginForbiddenIPField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

type CThostFtdcQryIPListField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IPAddress string `protobuf:"bytes,1,opt,name=IPAddress,proto3" json:"IPAddress,omitempty"`
}

func (x *CThostFtdcQryIPListField) Reset() {
	*x = CThostFtdcQryIPListField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryIPListField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryIPListField) ProtoMessage() {}

func (x *CThostFtdcQryIPListField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryIPListField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryIPListField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{329}
}

func (x *CThostFtdcQryIPListField) GetIPAddress() string {
	if x != nil {
		return x.IPAddress
	}
	return ""
}

type CThostFtdcQryUserRightsAssignField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID   string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcQryUserRightsAssignField) Reset() {
	*x = CThostFtdcQryUserRightsAssignField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryUserRightsAssignField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryUserRightsAssignField) ProtoMessage() {}

func (x *CThostFtdcQryUserRightsAssignField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryUserRightsAssignField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryUserRightsAssignField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{330}
}

func (x *CThostFtdcQryUserRightsAssignField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQryUserRightsAssignField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcReserveOpenAccountConfirmField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	InstallID          int32  `protobuf:"varint,28,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,29,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,30,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	Digest             string `protobuf:"bytes,31,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32  `protobuf:"varint,32,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,33,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	TID                int32  `protobuf:"varint,34,opt,name=TID,proto3" json:"TID,omitempty"`
	AccountID          string `protobuf:"bytes,35,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	Password           string `protobuf:"bytes,36,opt,name=Password,proto3" json:"Password,omitempty"`
	BankReserveOpenSeq string `protobuf:"bytes,37,opt,name=BankReserveOpenSeq,proto3" json:"BankReserveOpenSeq,omitempty"`
	BookDate           string `protobuf:"bytes,38,opt,name=BookDate,proto3" json:"BookDate,omitempty"`
	BookPsw            string `protobuf:"bytes,39,opt,name=BookPsw,proto3" json:"BookPsw,omitempty"`
	ErrorID            int32  `protobuf:"varint,40,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg           []byte `protobuf:"bytes,41,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcReserveOpenAccountConfirmField) Reset() {
	*x = CThostFtdcReserveOpenAccountConfirmField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReserveOpenAccountConfirmField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReserveOpenAccountConfirmField) ProtoMessage() {}

func (x *CThostFtdcReserveOpenAccountConfirmField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReserveOpenAccountConfirmField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReserveOpenAccountConfirmField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{331}
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBankReserveOpenSeq() string {
	if x != nil {
		return x.BankReserveOpenSeq
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBookDate() string {
	if x != nil {
		return x.BookDate
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetBookPsw() string {
	if x != nil {
		return x.BookPsw
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountConfirmField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcReserveOpenAccountField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeCode          string `protobuf:"bytes,1,opt,name=TradeCode,proto3" json:"TradeCode,omitempty"`
	BankID             string `protobuf:"bytes,2,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankBranchID       string `protobuf:"bytes,3,opt,name=BankBranchID,proto3" json:"BankBranchID,omitempty"`
	BrokerID           string `protobuf:"bytes,4,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerBranchID     string `protobuf:"bytes,5,opt,name=BrokerBranchID,proto3" json:"BrokerBranchID,omitempty"`
	TradeDate          string `protobuf:"bytes,6,opt,name=TradeDate,proto3" json:"TradeDate,omitempty"`
	TradeTime          string `protobuf:"bytes,7,opt,name=TradeTime,proto3" json:"TradeTime,omitempty"`
	BankSerial         string `protobuf:"bytes,8,opt,name=BankSerial,proto3" json:"BankSerial,omitempty"`
	TradingDay         string `protobuf:"bytes,9,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	PlateSerial        int32  `protobuf:"varint,10,opt,name=PlateSerial,proto3" json:"PlateSerial,omitempty"`
	LastFragment       int32  `protobuf:"varint,11,opt,name=LastFragment,proto3" json:"LastFragment,omitempty"`
	SessionID          int32  `protobuf:"varint,12,opt,name=SessionID,proto3" json:"SessionID,omitempty"`
	CustomerName       []byte `protobuf:"bytes,13,opt,name=CustomerName,proto3" json:"CustomerName,omitempty"`
	IdCardType         int32  `protobuf:"varint,14,opt,name=IdCardType,proto3" json:"IdCardType,omitempty"`
	IdentifiedCardNo   string `protobuf:"bytes,15,opt,name=IdentifiedCardNo,proto3" json:"IdentifiedCardNo,omitempty"`
	Gender             int32  `protobuf:"varint,16,opt,name=Gender,proto3" json:"Gender,omitempty"`
	CountryCode        string `protobuf:"bytes,17,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	CustType           int32  `protobuf:"varint,18,opt,name=CustType,proto3" json:"CustType,omitempty"`
	Address            string `protobuf:"bytes,19,opt,name=Address,proto3" json:"Address,omitempty"`
	ZipCode            string `protobuf:"bytes,20,opt,name=ZipCode,proto3" json:"ZipCode,omitempty"`
	Telephone          string `protobuf:"bytes,21,opt,name=Telephone,proto3" json:"Telephone,omitempty"`
	MobilePhone        string `protobuf:"bytes,22,opt,name=MobilePhone,proto3" json:"MobilePhone,omitempty"`
	Fax                string `protobuf:"bytes,23,opt,name=Fax,proto3" json:"Fax,omitempty"`
	EMail              string `protobuf:"bytes,24,opt,name=EMail,proto3" json:"EMail,omitempty"`
	MoneyAccountStatus int32  `protobuf:"varint,25,opt,name=MoneyAccountStatus,proto3" json:"MoneyAccountStatus,omitempty"`
	BankAccount        string `protobuf:"bytes,26,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	BankPassWord       string `protobuf:"bytes,27,opt,name=BankPassWord,proto3" json:"BankPassWord,omitempty"`
	InstallID          int32  `protobuf:"varint,28,opt,name=InstallID,proto3" json:"InstallID,omitempty"`
	VerifyCertNoFlag   int32  `protobuf:"varint,29,opt,name=VerifyCertNoFlag,proto3" json:"VerifyCertNoFlag,omitempty"`
	CurrencyID         string `protobuf:"bytes,30,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
	Digest             string `protobuf:"bytes,31,opt,name=Digest,proto3" json:"Digest,omitempty"`
	BankAccType        int32  `protobuf:"varint,32,opt,name=BankAccType,proto3" json:"BankAccType,omitempty"`
	BrokerIDByBank     string `protobuf:"bytes,33,opt,name=BrokerIDByBank,proto3" json:"BrokerIDByBank,omitempty"`
	TID                int32  `protobuf:"varint,34,opt,name=TID,proto3" json:"TID,omitempty"`
	ReserveOpenAccStas int32  `protobuf:"varint,35,opt,name=ReserveOpenAccStas,proto3" json:"ReserveOpenAccStas,omitempty"`
	ErrorID            int32  `protobuf:"varint,36,opt,name=ErrorID,proto3" json:"ErrorID,omitempty"`
	ErrorMsg           []byte `protobuf:"bytes,37,opt,name=ErrorMsg,proto3" json:"ErrorMsg,omitempty"`
}

func (x *CThostFtdcReserveOpenAccountField) Reset() {
	*x = CThostFtdcReserveOpenAccountField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReserveOpenAccountField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReserveOpenAccountField) ProtoMessage() {}

func (x *CThostFtdcReserveOpenAccountField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReserveOpenAccountField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReserveOpenAccountField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{332}
}

func (x *CThostFtdcReserveOpenAccountField) GetTradeCode() string {
	if x != nil {
		return x.TradeCode
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetBankBranchID() string {
	if x != nil {
		return x.BankBranchID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetBrokerBranchID() string {
	if x != nil {
		return x.BrokerBranchID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetBankSerial() string {
	if x != nil {
		return x.BankSerial
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetPlateSerial() int32 {
	if x != nil {
		return x.PlateSerial
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetLastFragment() int32 {
	if x != nil {
		return x.LastFragment
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetSessionID() int32 {
	if x != nil {
		return x.SessionID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetCustomerName() []byte {
	if x != nil {
		return x.CustomerName
	}
	return nil
}

func (x *CThostFtdcReserveOpenAccountField) GetIdCardType() int32 {
	if x != nil {
		return x.IdCardType
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetIdentifiedCardNo() string {
	if x != nil {
		return x.IdentifiedCardNo
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetCustType() int32 {
	if x != nil {
		return x.CustType
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetFax() string {
	if x != nil {
		return x.Fax
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetEMail() string {
	if x != nil {
		return x.EMail
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetMoneyAccountStatus() int32 {
	if x != nil {
		return x.MoneyAccountStatus
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetBankPassWord() string {
	if x != nil {
		return x.BankPassWord
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetInstallID() int32 {
	if x != nil {
		return x.InstallID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetVerifyCertNoFlag() int32 {
	if x != nil {
		return x.VerifyCertNoFlag
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetBankAccType() int32 {
	if x != nil {
		return x.BankAccType
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetBrokerIDByBank() string {
	if x != nil {
		return x.BrokerIDByBank
	}
	return ""
}

func (x *CThostFtdcReserveOpenAccountField) GetTID() int32 {
	if x != nil {
		return x.TID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetReserveOpenAccStas() int32 {
	if x != nil {
		return x.ReserveOpenAccStas
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetErrorID() int32 {
	if x != nil {
		return x.ErrorID
	}
	return 0
}

func (x *CThostFtdcReserveOpenAccountField) GetErrorMsg() []byte {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type CThostFtdcAccountPropertyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID          string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	AccountID         string `protobuf:"bytes,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	BankID            string `protobuf:"bytes,3,opt,name=BankID,proto3" json:"BankID,omitempty"`
	BankAccount       string `protobuf:"bytes,4,opt,name=BankAccount,proto3" json:"BankAccount,omitempty"`
	OpenName          []byte `protobuf:"bytes,5,opt,name=OpenName,proto3" json:"OpenName,omitempty"`
	OpenBank          string `protobuf:"bytes,6,opt,name=OpenBank,proto3" json:"OpenBank,omitempty"`
	IsActive          int32  `protobuf:"varint,7,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	AccountSourceType int32  `protobuf:"varint,8,opt,name=AccountSourceType,proto3" json:"AccountSourceType,omitempty"`
	OpenDate          string `protobuf:"bytes,9,opt,name=OpenDate,proto3" json:"OpenDate,omitempty"`
	CancelDate        string `protobuf:"bytes,10,opt,name=CancelDate,proto3" json:"CancelDate,omitempty"`
	OperatorID        string `protobuf:"bytes,11,opt,name=OperatorID,proto3" json:"OperatorID,omitempty"`
	OperateDate       string `protobuf:"bytes,12,opt,name=OperateDate,proto3" json:"OperateDate,omitempty"`
	OperateTime       string `protobuf:"bytes,13,opt,name=OperateTime,proto3" json:"OperateTime,omitempty"`
	CurrencyID        string `protobuf:"bytes,14,opt,name=CurrencyID,proto3" json:"CurrencyID,omitempty"`
}

func (x *CThostFtdcAccountPropertyField) Reset() {
	*x = CThostFtdcAccountPropertyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcAccountPropertyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcAccountPropertyField) ProtoMessage() {}

func (x *CThostFtdcAccountPropertyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcAccountPropertyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcAccountPropertyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{333}
}

func (x *CThostFtdcAccountPropertyField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetBankID() string {
	if x != nil {
		return x.BankID
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetBankAccount() string {
	if x != nil {
		return x.BankAccount
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetOpenName() []byte {
	if x != nil {
		return x.OpenName
	}
	return nil
}

func (x *CThostFtdcAccountPropertyField) GetOpenBank() string {
	if x != nil {
		return x.OpenBank
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *CThostFtdcAccountPropertyField) GetAccountSourceType() int32 {
	if x != nil {
		return x.AccountSourceType
	}
	return 0
}

func (x *CThostFtdcAccountPropertyField) GetOpenDate() string {
	if x != nil {
		return x.OpenDate
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetCancelDate() string {
	if x != nil {
		return x.CancelDate
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetOperatorID() string {
	if x != nil {
		return x.OperatorID
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetOperateDate() string {
	if x != nil {
		return x.OperateDate
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetOperateTime() string {
	if x != nil {
		return x.OperateTime
	}
	return ""
}

func (x *CThostFtdcAccountPropertyField) GetCurrencyID() string {
	if x != nil {
		return x.CurrencyID
	}
	return ""
}

type CThostFtdcQryCurrDRIdentityField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRIdentityID int32 `protobuf:"varint,1,opt,name=DRIdentityID,proto3" json:"DRIdentityID,omitempty"`
}

func (x *CThostFtdcQryCurrDRIdentityField) Reset() {
	*x = CThostFtdcQryCurrDRIdentityField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQryCurrDRIdentityField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQryCurrDRIdentityField) ProtoMessage() {}

func (x *CThostFtdcQryCurrDRIdentityField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQryCurrDRIdentityField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQryCurrDRIdentityField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{334}
}

func (x *CThostFtdcQryCurrDRIdentityField) GetDRIdentityID() int32 {
	if x != nil {
		return x.DRIdentityID
	}
	return 0
}

type CThostFtdcCurrDRIdentityField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DRIdentityID int32 `protobuf:"varint,1,opt,name=DRIdentityID,proto3" json:"DRIdentityID,omitempty"`
}

func (x *CThostFtdcCurrDRIdentityField) Reset() {
	*x = CThostFtdcCurrDRIdentityField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcCurrDRIdentityField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcCurrDRIdentityField) ProtoMessage() {}

func (x *CThostFtdcCurrDRIdentityField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcCurrDRIdentityField.ProtoReflect.Descriptor instead.
func (*CThostFtdcCurrDRIdentityField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{335}
}

func (x *CThostFtdcCurrDRIdentityField) GetDRIdentityID() int32 {
	if x != nil {
		return x.DRIdentityID
	}
	return 0
}

type CThostFtdcQrySecAgentCheckModeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID   string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	InvestorID string `protobuf:"bytes,2,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcQrySecAgentCheckModeField) Reset() {
	*x = CThostFtdcQrySecAgentCheckModeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySecAgentCheckModeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySecAgentCheckModeField) ProtoMessage() {}

func (x *CThostFtdcQrySecAgentCheckModeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySecAgentCheckModeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySecAgentCheckModeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{336}
}

func (x *CThostFtdcQrySecAgentCheckModeField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySecAgentCheckModeField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcQrySecAgentTradeInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID         string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	BrokerSecAgentID string `protobuf:"bytes,2,opt,name=BrokerSecAgentID,proto3" json:"BrokerSecAgentID,omitempty"`
}

func (x *CThostFtdcQrySecAgentTradeInfoField) Reset() {
	*x = CThostFtdcQrySecAgentTradeInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQrySecAgentTradeInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQrySecAgentTradeInfoField) ProtoMessage() {}

func (x *CThostFtdcQrySecAgentTradeInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQrySecAgentTradeInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQrySecAgentTradeInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{337}
}

func (x *CThostFtdcQrySecAgentTradeInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcQrySecAgentTradeInfoField) GetBrokerSecAgentID() string {
	if x != nil {
		return x.BrokerSecAgentID
	}
	return ""
}

type CThostFtdcUserSystemInfoField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID            string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID              string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ClientSystemInfoLen int32  `protobuf:"varint,3,opt,name=ClientSystemInfoLen,proto3" json:"ClientSystemInfoLen,omitempty"`
	ClientSystemInfo    string `protobuf:"bytes,4,opt,name=ClientSystemInfo,proto3" json:"ClientSystemInfo,omitempty"`
	ClientPublicIP      string `protobuf:"bytes,5,opt,name=ClientPublicIP,proto3" json:"ClientPublicIP,omitempty"`
	ClientIPPort        int32  `protobuf:"varint,6,opt,name=ClientIPPort,proto3" json:"ClientIPPort,omitempty"`
	ClientLoginTime     string `protobuf:"bytes,7,opt,name=ClientLoginTime,proto3" json:"ClientLoginTime,omitempty"`
	ClientAppID         string `protobuf:"bytes,8,opt,name=ClientAppID,proto3" json:"ClientAppID,omitempty"`
}

func (x *CThostFtdcUserSystemInfoField) Reset() {
	*x = CThostFtdcUserSystemInfoField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcUserSystemInfoField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcUserSystemInfoField) ProtoMessage() {}

func (x *CThostFtdcUserSystemInfoField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcUserSystemInfoField.ProtoReflect.Descriptor instead.
func (*CThostFtdcUserSystemInfoField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{338}
}

func (x *CThostFtdcUserSystemInfoField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcUserSystemInfoField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcUserSystemInfoField) GetClientSystemInfoLen() int32 {
	if x != nil {
		return x.ClientSystemInfoLen
	}
	return 0
}

func (x *CThostFtdcUserSystemInfoField) GetClientSystemInfo() string {
	if x != nil {
		return x.ClientSystemInfo
	}
	return ""
}

func (x *CThostFtdcUserSystemInfoField) GetClientPublicIP() string {
	if x != nil {
		return x.ClientPublicIP
	}
	return ""
}

func (x *CThostFtdcUserSystemInfoField) GetClientIPPort() int32 {
	if x != nil {
		return x.ClientIPPort
	}
	return 0
}

func (x *CThostFtdcUserSystemInfoField) GetClientLoginTime() string {
	if x != nil {
		return x.ClientLoginTime
	}
	return ""
}

func (x *CThostFtdcUserSystemInfoField) GetClientAppID() string {
	if x != nil {
		return x.ClientAppID
	}
	return ""
}

type CThostFtdcReqUserAuthMethodField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID   string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcReqUserAuthMethodField) Reset() {
	*x = CThostFtdcReqUserAuthMethodField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqUserAuthMethodField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqUserAuthMethodField) ProtoMessage() {}

func (x *CThostFtdcReqUserAuthMethodField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqUserAuthMethodField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqUserAuthMethodField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{339}
}

func (x *CThostFtdcReqUserAuthMethodField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqUserAuthMethodField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqUserAuthMethodField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcRspUserAuthMethodField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsableAuthMethod int32 `protobuf:"varint,1,opt,name=UsableAuthMethod,proto3" json:"UsableAuthMethod,omitempty"`
}

func (x *CThostFtdcRspUserAuthMethodField) Reset() {
	*x = CThostFtdcRspUserAuthMethodField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspUserAuthMethodField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspUserAuthMethodField) ProtoMessage() {}

func (x *CThostFtdcRspUserAuthMethodField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspUserAuthMethodField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspUserAuthMethodField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{340}
}

func (x *CThostFtdcRspUserAuthMethodField) GetUsableAuthMethod() int32 {
	if x != nil {
		return x.UsableAuthMethod
	}
	return 0
}

type CThostFtdcReqGenUserCaptchaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID   string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcReqGenUserCaptchaField) Reset() {
	*x = CThostFtdcReqGenUserCaptchaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqGenUserCaptchaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqGenUserCaptchaField) ProtoMessage() {}

func (x *CThostFtdcReqGenUserCaptchaField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqGenUserCaptchaField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqGenUserCaptchaField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{341}
}

func (x *CThostFtdcReqGenUserCaptchaField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqGenUserCaptchaField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqGenUserCaptchaField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcRspGenUserCaptchaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID       string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID         string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CaptchaInfoLen int32  `protobuf:"varint,3,opt,name=CaptchaInfoLen,proto3" json:"CaptchaInfoLen,omitempty"`
	CaptchaInfo    string `protobuf:"bytes,4,opt,name=CaptchaInfo,proto3" json:"CaptchaInfo,omitempty"`
}

func (x *CThostFtdcRspGenUserCaptchaField) Reset() {
	*x = CThostFtdcRspGenUserCaptchaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspGenUserCaptchaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspGenUserCaptchaField) ProtoMessage() {}

func (x *CThostFtdcRspGenUserCaptchaField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspGenUserCaptchaField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspGenUserCaptchaField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{342}
}

func (x *CThostFtdcRspGenUserCaptchaField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcRspGenUserCaptchaField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcRspGenUserCaptchaField) GetCaptchaInfoLen() int32 {
	if x != nil {
		return x.CaptchaInfoLen
	}
	return 0
}

func (x *CThostFtdcRspGenUserCaptchaField) GetCaptchaInfo() string {
	if x != nil {
		return x.CaptchaInfo
	}
	return ""
}

type CThostFtdcReqGenUserTextField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID   string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID     string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CThostFtdcReqGenUserTextField) Reset() {
	*x = CThostFtdcReqGenUserTextField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqGenUserTextField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqGenUserTextField) ProtoMessage() {}

func (x *CThostFtdcReqGenUserTextField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqGenUserTextField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqGenUserTextField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{343}
}

func (x *CThostFtdcReqGenUserTextField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqGenUserTextField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqGenUserTextField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CThostFtdcRspGenUserTextField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserTextSeq int32 `protobuf:"varint,1,opt,name=UserTextSeq,proto3" json:"UserTextSeq,omitempty"`
}

func (x *CThostFtdcRspGenUserTextField) Reset() {
	*x = CThostFtdcRspGenUserTextField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspGenUserTextField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspGenUserTextField) ProtoMessage() {}

func (x *CThostFtdcRspGenUserTextField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspGenUserTextField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspGenUserTextField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{344}
}

func (x *CThostFtdcRspGenUserTextField) GetUserTextSeq() int32 {
	if x != nil {
		return x.UserTextSeq
	}
	return 0
}

type CThostFtdcReqUserLoginWithCaptchaField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay           string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID             string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID               string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Password             string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	UserProductInfo      string `protobuf:"bytes,5,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	InterfaceProductInfo string `protobuf:"bytes,6,opt,name=InterfaceProductInfo,proto3" json:"InterfaceProductInfo,omitempty"`
	ProtocolInfo         string `protobuf:"bytes,7,opt,name=ProtocolInfo,proto3" json:"ProtocolInfo,omitempty"`
	MacAddress           string `protobuf:"bytes,8,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ClientIPAddress      string `protobuf:"bytes,9,opt,name=ClientIPAddress,proto3" json:"ClientIPAddress,omitempty"`
	LoginRemark          string `protobuf:"bytes,10,opt,name=LoginRemark,proto3" json:"LoginRemark,omitempty"`
	Captcha              string `protobuf:"bytes,11,opt,name=Captcha,proto3" json:"Captcha,omitempty"`
	ClientIPPort         int32  `protobuf:"varint,12,opt,name=ClientIPPort,proto3" json:"ClientIPPort,omitempty"`
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) Reset() {
	*x = CThostFtdcReqUserLoginWithCaptchaField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqUserLoginWithCaptchaField) ProtoMessage() {}

func (x *CThostFtdcReqUserLoginWithCaptchaField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqUserLoginWithCaptchaField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqUserLoginWithCaptchaField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{345}
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetInterfaceProductInfo() string {
	if x != nil {
		return x.InterfaceProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetProtocolInfo() string {
	if x != nil {
		return x.ProtocolInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetClientIPAddress() string {
	if x != nil {
		return x.ClientIPAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetLoginRemark() string {
	if x != nil {
		return x.LoginRemark
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetCaptcha() string {
	if x != nil {
		return x.Captcha
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithCaptchaField) GetClientIPPort() int32 {
	if x != nil {
		return x.ClientIPPort
	}
	return 0
}

type CThostFtdcReqUserLoginWithTextField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay           string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID             string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID               string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Password             string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	UserProductInfo      string `protobuf:"bytes,5,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	InterfaceProductInfo string `protobuf:"bytes,6,opt,name=InterfaceProductInfo,proto3" json:"InterfaceProductInfo,omitempty"`
	ProtocolInfo         string `protobuf:"bytes,7,opt,name=ProtocolInfo,proto3" json:"ProtocolInfo,omitempty"`
	MacAddress           string `protobuf:"bytes,8,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ClientIPAddress      string `protobuf:"bytes,9,opt,name=ClientIPAddress,proto3" json:"ClientIPAddress,omitempty"`
	LoginRemark          string `protobuf:"bytes,10,opt,name=LoginRemark,proto3" json:"LoginRemark,omitempty"`
	Text                 string `protobuf:"bytes,11,opt,name=Text,proto3" json:"Text,omitempty"`
	ClientIPPort         int32  `protobuf:"varint,12,opt,name=ClientIPPort,proto3" json:"ClientIPPort,omitempty"`
}

func (x *CThostFtdcReqUserLoginWithTextField) Reset() {
	*x = CThostFtdcReqUserLoginWithTextField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqUserLoginWithTextField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqUserLoginWithTextField) ProtoMessage() {}

func (x *CThostFtdcReqUserLoginWithTextField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqUserLoginWithTextField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqUserLoginWithTextField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{346}
}

func (x *CThostFtdcReqUserLoginWithTextField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetInterfaceProductInfo() string {
	if x != nil {
		return x.InterfaceProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetProtocolInfo() string {
	if x != nil {
		return x.ProtocolInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetClientIPAddress() string {
	if x != nil {
		return x.ClientIPAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetLoginRemark() string {
	if x != nil {
		return x.LoginRemark
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithTextField) GetClientIPPort() int32 {
	if x != nil {
		return x.ClientIPPort
	}
	return 0
}

type CThostFtdcReqUserLoginWithOTPField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradingDay           string `protobuf:"bytes,1,opt,name=TradingDay,proto3" json:"TradingDay,omitempty"`
	BrokerID             string `protobuf:"bytes,2,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID               string `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Password             string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	UserProductInfo      string `protobuf:"bytes,5,opt,name=UserProductInfo,proto3" json:"UserProductInfo,omitempty"`
	InterfaceProductInfo string `protobuf:"bytes,6,opt,name=InterfaceProductInfo,proto3" json:"InterfaceProductInfo,omitempty"`
	ProtocolInfo         string `protobuf:"bytes,7,opt,name=ProtocolInfo,proto3" json:"ProtocolInfo,omitempty"`
	MacAddress           string `protobuf:"bytes,8,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`
	ClientIPAddress      string `protobuf:"bytes,9,opt,name=ClientIPAddress,proto3" json:"ClientIPAddress,omitempty"`
	LoginRemark          string `protobuf:"bytes,10,opt,name=LoginRemark,proto3" json:"LoginRemark,omitempty"`
	OTPPassword          string `protobuf:"bytes,11,opt,name=OTPPassword,proto3" json:"OTPPassword,omitempty"`
	ClientIPPort         int32  `protobuf:"varint,12,opt,name=ClientIPPort,proto3" json:"ClientIPPort,omitempty"`
}

func (x *CThostFtdcReqUserLoginWithOTPField) Reset() {
	*x = CThostFtdcReqUserLoginWithOTPField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqUserLoginWithOTPField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqUserLoginWithOTPField) ProtoMessage() {}

func (x *CThostFtdcReqUserLoginWithOTPField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqUserLoginWithOTPField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqUserLoginWithOTPField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{347}
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetTradingDay() string {
	if x != nil {
		return x.TradingDay
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetUserProductInfo() string {
	if x != nil {
		return x.UserProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetInterfaceProductInfo() string {
	if x != nil {
		return x.InterfaceProductInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetProtocolInfo() string {
	if x != nil {
		return x.ProtocolInfo
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetClientIPAddress() string {
	if x != nil {
		return x.ClientIPAddress
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetLoginRemark() string {
	if x != nil {
		return x.LoginRemark
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetOTPPassword() string {
	if x != nil {
		return x.OTPPassword
	}
	return ""
}

func (x *CThostFtdcReqUserLoginWithOTPField) GetClientIPPort() int32 {
	if x != nil {
		return x.ClientIPPort
	}
	return 0
}

type CThostFtdcReqApiHandshakeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CryptoKeyVersion string `protobuf:"bytes,1,opt,name=CryptoKeyVersion,proto3" json:"CryptoKeyVersion,omitempty"`
}

func (x *CThostFtdcReqApiHandshakeField) Reset() {
	*x = CThostFtdcReqApiHandshakeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqApiHandshakeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqApiHandshakeField) ProtoMessage() {}

func (x *CThostFtdcReqApiHandshakeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqApiHandshakeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqApiHandshakeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{348}
}

func (x *CThostFtdcReqApiHandshakeField) GetCryptoKeyVersion() string {
	if x != nil {
		return x.CryptoKeyVersion
	}
	return ""
}

type CThostFtdcRspApiHandshakeField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrontHandshakeDataLen int32  `protobuf:"varint,1,opt,name=FrontHandshakeDataLen,proto3" json:"FrontHandshakeDataLen,omitempty"`
	FrontHandshakeData    string `protobuf:"bytes,2,opt,name=FrontHandshakeData,proto3" json:"FrontHandshakeData,omitempty"`
	IsApiAuthEnabled      int32  `protobuf:"varint,3,opt,name=IsApiAuthEnabled,proto3" json:"IsApiAuthEnabled,omitempty"`
}

func (x *CThostFtdcRspApiHandshakeField) Reset() {
	*x = CThostFtdcRspApiHandshakeField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcRspApiHandshakeField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcRspApiHandshakeField) ProtoMessage() {}

func (x *CThostFtdcRspApiHandshakeField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcRspApiHandshakeField.ProtoReflect.Descriptor instead.
func (*CThostFtdcRspApiHandshakeField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{349}
}

func (x *CThostFtdcRspApiHandshakeField) GetFrontHandshakeDataLen() int32 {
	if x != nil {
		return x.FrontHandshakeDataLen
	}
	return 0
}

func (x *CThostFtdcRspApiHandshakeField) GetFrontHandshakeData() string {
	if x != nil {
		return x.FrontHandshakeData
	}
	return ""
}

func (x *CThostFtdcRspApiHandshakeField) GetIsApiAuthEnabled() int32 {
	if x != nil {
		return x.IsApiAuthEnabled
	}
	return 0
}

type CThostFtdcReqVerifyApiKeyField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiHandshakeDataLen int32  `protobuf:"varint,1,opt,name=ApiHandshakeDataLen,proto3" json:"ApiHandshakeDataLen,omitempty"`
	ApiHandshakeData    string `protobuf:"bytes,2,opt,name=ApiHandshakeData,proto3" json:"ApiHandshakeData,omitempty"`
}

func (x *CThostFtdcReqVerifyApiKeyField) Reset() {
	*x = CThostFtdcReqVerifyApiKeyField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqVerifyApiKeyField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqVerifyApiKeyField) ProtoMessage() {}

func (x *CThostFtdcReqVerifyApiKeyField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqVerifyApiKeyField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqVerifyApiKeyField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{350}
}

func (x *CThostFtdcReqVerifyApiKeyField) GetApiHandshakeDataLen() int32 {
	if x != nil {
		return x.ApiHandshakeDataLen
	}
	return 0
}

func (x *CThostFtdcReqVerifyApiKeyField) GetApiHandshakeData() string {
	if x != nil {
		return x.ApiHandshakeData
	}
	return ""
}

type CThostFtdcDepartmentUserField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerID      string `protobuf:"bytes,1,opt,name=BrokerID,proto3" json:"BrokerID,omitempty"`
	UserID        string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	InvestorRange int32  `protobuf:"varint,3,opt,name=InvestorRange,proto3" json:"InvestorRange,omitempty"`
	InvestorID    string `protobuf:"bytes,4,opt,name=InvestorID,proto3" json:"InvestorID,omitempty"`
}

func (x *CThostFtdcDepartmentUserField) Reset() {
	*x = CThostFtdcDepartmentUserField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcDepartmentUserField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcDepartmentUserField) ProtoMessage() {}

func (x *CThostFtdcDepartmentUserField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcDepartmentUserField.ProtoReflect.Descriptor instead.
func (*CThostFtdcDepartmentUserField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{351}
}

func (x *CThostFtdcDepartmentUserField) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *CThostFtdcDepartmentUserField) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CThostFtdcDepartmentUserField) GetInvestorRange() int32 {
	if x != nil {
		return x.InvestorRange
	}
	return 0
}

func (x *CThostFtdcDepartmentUserField) GetInvestorID() string {
	if x != nil {
		return x.InvestorID
	}
	return ""
}

type CThostFtdcQueryFreqField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryFreq int32 `protobuf:"varint,1,opt,name=QueryFreq,proto3" json:"QueryFreq,omitempty"`
}

func (x *CThostFtdcQueryFreqField) Reset() {
	*x = CThostFtdcQueryFreqField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcQueryFreqField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcQueryFreqField) ProtoMessage() {}

func (x *CThostFtdcQueryFreqField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcQueryFreqField.ProtoReflect.Descriptor instead.
func (*CThostFtdcQueryFreqField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{352}
}

func (x *CThostFtdcQueryFreqField) GetQueryFreq() int32 {
	if x != nil {
		return x.QueryFreq
	}
	return 0
}

type CThostFtdcReqRegisterFrontField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fronts []string `protobuf:"bytes,1,rep,name=Fronts,proto3" json:"Fronts,omitempty"`
}

func (x *CThostFtdcReqRegisterFrontField) Reset() {
	*x = CThostFtdcReqRegisterFrontField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqRegisterFrontField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqRegisterFrontField) ProtoMessage() {}

func (x *CThostFtdcReqRegisterFrontField) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqRegisterFrontField.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqRegisterFrontField) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{353}
}

func (x *CThostFtdcReqRegisterFrontField) GetFronts() []string {
	if x != nil {
		return x.Fronts
	}
	return nil
}

type CThostFtdcReqSubscribeMarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []string `protobuf:"bytes,1,rep,name=Instruments,proto3" json:"Instruments,omitempty"`
}

func (x *CThostFtdcReqSubscribeMarketData) Reset() {
	*x = CThostFtdcReqSubscribeMarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqSubscribeMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqSubscribeMarketData) ProtoMessage() {}

func (x *CThostFtdcReqSubscribeMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqSubscribeMarketData.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqSubscribeMarketData) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{354}
}

func (x *CThostFtdcReqSubscribeMarketData) GetInstruments() []string {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type CThostFtdcReqUnSubscribeMarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []string `protobuf:"bytes,1,rep,name=Instruments,proto3" json:"Instruments,omitempty"`
}

func (x *CThostFtdcReqUnSubscribeMarketData) Reset() {
	*x = CThostFtdcReqUnSubscribeMarketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqUnSubscribeMarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqUnSubscribeMarketData) ProtoMessage() {}

func (x *CThostFtdcReqUnSubscribeMarketData) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqUnSubscribeMarketData.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqUnSubscribeMarketData) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{355}
}

func (x *CThostFtdcReqUnSubscribeMarketData) GetInstruments() []string {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type CThostFtdcReqSubscribeForQuoteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []string `protobuf:"bytes,1,rep,name=Instruments,proto3" json:"Instruments,omitempty"`
}

func (x *CThostFtdcReqSubscribeForQuoteRsp) Reset() {
	*x = CThostFtdcReqSubscribeForQuoteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqSubscribeForQuoteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqSubscribeForQuoteRsp) ProtoMessage() {}

func (x *CThostFtdcReqSubscribeForQuoteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqSubscribeForQuoteRsp.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqSubscribeForQuoteRsp) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{356}
}

func (x *CThostFtdcReqSubscribeForQuoteRsp) GetInstruments() []string {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type CThostFtdcReqUnSubscribeForQuoteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []string `protobuf:"bytes,1,rep,name=Instruments,proto3" json:"Instruments,omitempty"`
}

func (x *CThostFtdcReqUnSubscribeForQuoteRsp) Reset() {
	*x = CThostFtdcReqUnSubscribeForQuoteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctp_ctp_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CThostFtdcReqUnSubscribeForQuoteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CThostFtdcReqUnSubscribeForQuoteRsp) ProtoMessage() {}

func (x *CThostFtdcReqUnSubscribeForQuoteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_ctp_ctp_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CThostFtdcReqUnSubscribeForQuoteRsp.ProtoReflect.Descriptor instead.
func (*CThostFtdcReqUnSubscribeForQuoteRsp) Descriptor() ([]byte, []int) {
	return file_ctp_ctp_proto_rawDescGZIP(), []int{357}
}

func (x *CThostFtdcReqUnSubscribeForQuoteRsp) GetInstruments() []string {
	if x != nil {
		return x.Instruments
	}
	return nil
}

var File_ctp_ctp_proto protoreflect.FileDescriptor

var file_ctp_ctp_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x74, 0x70, 0x2f, 0x63, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x63, 0x74, 0x70, 0x22, 0x66, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x44, 0x69, 0x73, 0x73, 0x65, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x22, 0xc9, 0x03, 0x0a,
	0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x1b, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x48, 0x46, 0x45, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x48, 0x46, 0x45, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x44, 0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x5a,
	0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x5a,
	0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x46, 0x45, 0x58, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x46, 0x45, 0x58, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x4e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x4e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x19,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x54, 0x0a,
	0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x52, 0x65, 0x71, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x41, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41,
	0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x70, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x32, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x48, 0x46, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x53, 0x48, 0x46, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x44, 0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44,
	0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x5a, 0x43, 0x45, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x5a, 0x43, 0x45, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x46, 0x45, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x46, 0x45, 0x58, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x4e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x49, 0x4e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x97, 0x03, 0x0a,
	0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b,
	0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xf2, 0x01, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x50, 0x77, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x50, 0x77,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x26,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x73,
	0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x52, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x43,
	0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x26, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x50, 0x77,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x63, 0x63, 0x50, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xdc, 0x01, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61,
	0x6e, 0x6b, 0x52, 0x73, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x51, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x50, 0x77, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63,
	0x63, 0x50, 0x77, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x21, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x51,
	0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x52, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x6d, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4b, 0x0a, 0x23,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x51, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcf, 0x03, 0x0a, 0x23, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x51, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x73, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x22, 0x4e, 0x0a, 0x16, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x17,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xe0, 0x05, 0x0a, 0x16, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x14,
	0x4d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x6f, 0x72, 0x74,
	0x67, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65,
	0x46, 0x75, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0xe3, 0x09, 0x0a, 0x19, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x59, 0x65, 0x61, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x59, 0x65,
	0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4d, 0x69, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x4d,
	0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x4d, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x4c,
	0x69, 0x66, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x2a, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x36, 0x0a, 0x16,
	0x4d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x4d, 0x61,
	0x78, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x15, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x41, 0x62, 0x62, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x41, 0x62, 0x62, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x15, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0xcf, 0x03, 0x0a, 0x17, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x22, 0xae, 0x02, 0x0a,
	0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x99, 0x01,
	0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x50, 0x61, 0x72, 0x74,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x5e, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x0f, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x4d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x65,
	0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x50, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x46, 0x75,
	0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74,
	0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x64, 0x4d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x75, 0x6e,
	0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4d, 0x6f, 0x72, 0x74, 0x67,
	0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x46, 0x0a, 0x1e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79,
	0x41, 0x6c, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61,
	0x70, 0x22, 0xe7, 0x0d, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f,
	0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x59, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x59, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x6e,
	0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c,
	0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4f, 0x70, 0x65,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x55, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a,
	0x10, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x50,
	0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4c,
	0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x62, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x72,
	0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x59, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x59, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x95, 0x04, 0x0a, 0x23,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x22, 0xb7, 0x04, 0x0a, 0x27, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xd4, 0x0b,
	0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x69,
	0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x34, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x73, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x34, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x35, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x35, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x35, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x35, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x19, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x54, 0x50, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x54, 0x50, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x22, 0x89, 0x02, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x6b, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x57, 0x65,
	0x61, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x87, 0x01, 0x0a,
	0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd6, 0x05, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x97, 0x02, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0xd7, 0x03, 0x0a, 0x29, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4c,
	0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x6e,
	0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22,
	0xef, 0x06, 0x0a, 0x27, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x6e,
	0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x45, 0x78, 0x63, 0x68, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x45, 0x78, 0x63, 0x68, 0x4c, 0x6f, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x40, 0x0a, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x4c, 0x6f, 0x6e, 0x67,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x45, 0x78, 0x63, 0x68, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x1c, 0x45, 0x78, 0x63, 0x68, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x45, 0x78, 0x63,
	0x68, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4e, 0x6f, 0x4c,
	0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x4e, 0x6f, 0x4c,
	0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x4e, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x4e, 0x6f, 0x4c, 0x6f, 0x6e, 0x67,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x4e, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0xd5, 0x01, 0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x62, 0x0a, 0x1c, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x96, 0x01,
	0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x22, 0x78, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x44,
	0x22, 0x88, 0x06, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x48, 0x46, 0x45, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x48, 0x46, 0x45, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x5a, 0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x5a, 0x43, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x46, 0x45,
	0x58, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x46, 0x45,
	0x58, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x4e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x49, 0x4e, 0x45, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x51,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x49, 0x73, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x72, 0x0a, 0x18, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41,
	0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xa2, 0x01, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0xa7, 0x08, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x54, 0x44, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x47, 0x54, 0x44, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xae, 0x11, 0x0a,
	0x14, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x54, 0x44, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x54, 0x44, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x69,
	0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f,
	0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49,
	0x44, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x44, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x5a,
	0x43, 0x45, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x5a, 0x43, 0x45, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc6, 0x0c,
	0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f,
	0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x54,
	0x44, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x54, 0x44,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x27, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xb9, 0x04, 0x0a,
	0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc6, 0x07, 0x0a, 0x1a, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x92, 0x05, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x27, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xd8, 0x05, 0x0a,
	0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf4, 0x07, 0x0a, 0x14, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74,
	0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x71, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xa6,
	0x03, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a,
	0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc2, 0x02, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61,
	0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d,
	0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x88, 0x02, 0x0a,
	0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0xd0, 0x01, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0xf7, 0x01, 0x0a, 0x1f, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x75, 0x6e,
	0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x71, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x6f, 0x72, 0x74,
	0x67, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0xd6, 0x03,
	0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x22, 0xdb, 0x01, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xf4, 0x0e, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53,
	0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x4d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x61, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x42, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x65,
	0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x50, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72,
	0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x46, 0x75,
	0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74,
	0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x75, 0x6e, 0x64, 0x4d,
	0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f,
	0x75, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x75, 0x6e,
	0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4d, 0x6f, 0x72, 0x74, 0x67,
	0x61, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x46, 0x0a, 0x1e, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79,
	0x41, 0x6c, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x41, 0x6c, 0x67, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65,
	0x6e, 0x53, 0x77, 0x61, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x77, 0x61, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x22, 0xee, 0x0d, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x59, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x59, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4c, 0x6f, 0x6e, 0x67,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50,
	0x72, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x55, 0x73, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4c, 0x6f, 0x6e, 0x67,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f,
	0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41,
	0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x59, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x59, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x73, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xd8, 0x03, 0x0a, 0x2a, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4c,
	0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x6e,
	0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x17, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x22, 0xe0, 0x03, 0x0a, 0x2e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x2c, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xad, 0x02, 0x0a, 0x17, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x22, 0xa3, 0x02, 0x0a, 0x17, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xc8, 0x01, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x1a, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xdf, 0x01, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0xea, 0x01, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x22, 0xd0, 0x01, 0x0a, 0x2a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x28, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x36, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7c, 0x0a, 0x18, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x23, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53, 0x75, 0x70, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x1d, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0xc7, 0x01, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b,
	0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xa5, 0x01, 0x0a, 0x25,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x51, 0x72, 0x79, 0x53, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x1a, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x22, 0x67, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x1c, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x5a, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x1d,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x5f, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f,
	0x22, 0xbc, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22,
	0xa4, 0x01, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72,
	0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x8a, 0x01, 0x0a, 0x2a, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x66,
	0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53,
	0x79, 0x6e, 0x63, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x22, 0xd0, 0x02, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x48, 0x69, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x8c, 0x02, 0x0a, 0x24, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4d, 0x69, 0x6e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xb6, 0x05, 0x0a, 0x26, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x53, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x48, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x48, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x3c, 0x0a, 0x19, 0x48, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x19, 0x48, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x41, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x18, 0x41, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x41, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x41, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x73, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x4d, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x4d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0xfa, 0x04, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x95,
	0x03, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4d, 0x69, 0x6e, 0x69,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x69, 0x6e, 0x69, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xb4, 0x02, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xcb, 0x01,
	0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x19, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xc5, 0x05, 0x0a, 0x1d, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78,
	0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x91, 0x04, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x65, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xee, 0x0b, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f,
	0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x45,
	0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45,
	0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc6, 0x07, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x65, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x95,
	0x02, 0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0xa4, 0x08, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x73, 0x69,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xcb, 0x01,
	0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7f, 0x0a, 0x21, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x65, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xc2, 0x05, 0x0a,
	0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x22, 0xa9, 0x01, 0x0a, 0x29, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x65, 0x63, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0xf9, 0x05,
	0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x72, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x5c, 0x0a, 0x1e, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x72, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xc5, 0x04, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x72, 0x72, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x65,
	0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0x62, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x45, 0x72, 0x72, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x22, 0xf0, 0x01, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x29, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xba, 0x02, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x91, 0x06, 0x0a, 0x17, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x46, 0x6f,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x46, 0x6f, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x51, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x71, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x74, 0x6f, 0x53, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x51, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xb5, 0x03, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6f,
	0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xca,
	0x01, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x81, 0x06, 0x0a, 0x19,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x42, 0x69, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x73, 0x6b, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x42, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x73, 0x6b, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x73, 0x6b, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x64, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x69, 0x64, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x73, 0x6b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x73,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x42, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x46,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x91, 0x04, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x9e, 0x0d, 0x0a, 0x14, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x73, 0x6b,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41,
	0x73, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x73, 0x6b, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x73, 0x6b, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x64, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x69,
	0x64, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49,
	0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41,
	0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x71, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x82, 0x07, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xad, 0x02, 0x0a, 0x17, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xa0, 0x09, 0x0a, 0x1c, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x41, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x73, 0x6b, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42,
	0x69, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x73, 0x6b, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x41, 0x73, 0x6b, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x64, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x69, 0x64, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42,
	0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x7b, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x22, 0xb2, 0x04, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x25, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x22, 0xbd, 0x01, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x22, 0xe8, 0x01, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x46,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x73, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6f, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xdb, 0x01, 0x0a, 0x1b,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x1e, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xfa, 0x02, 0x0a,
	0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc7, 0x05, 0x0a, 0x1f, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xd3, 0x03, 0x0a, 0x27, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x22, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xa8, 0x01, 0x0a,
	0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x47, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x22, 0xba, 0x03, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d,
	0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xeb,
	0x07, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43, 0x6f, 0x6d,
	0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xc2, 0x01, 0x0a,
	0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x22, 0xb1, 0x05, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0xcc, 0x01, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x22, 0xac, 0x01, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x51, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x52,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xc2, 0x01, 0x0a, 0x1c, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0xb8, 0x04, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x4d,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69,
	0x6b, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4d, 0x4d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xdb, 0x03, 0x0a, 0x29, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x4d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x2c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4d, 0x4d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xf8, 0x02, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x22, 0x8b, 0x01, 0x0a, 0x29, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x99,
	0x01, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xb3, 0x03, 0x0a, 0x25, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x55, 0x4c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65,
	0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48,
	0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x6e, 0x67,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x17, 0x4c, 0x6f, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x22, 0x95, 0x02, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x63,
	0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x41, 0x72, 0x62, 0x69, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x41, 0x72, 0x62, 0x69, 0x4f, 0x70,
	0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x70,
	0x65, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x49, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x15, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x49, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65, 0x22, 0xcd, 0x04, 0x0a, 0x23, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4f, 0x70,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbb, 0x04, 0x0a, 0x29, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x9a, 0x0b, 0x0a, 0x1e, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4f,
	0x70, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x74, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a,
	0x18, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x71, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xdc, 0x07, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x22, 0xb8,
	0x07, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4f, 0x70, 0x74,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a,
	0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x45, 0x78, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x27, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x22, 0xd4, 0x05, 0x0a, 0x2c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x4f, 0x70, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4f, 0x70, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x22, 0xda, 0x02, 0x0a, 0x1c, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x53, 0x77, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x71, 0x4e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x12, 0x26, 0x0a,
	0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x53, 0x77, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x6f, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x77, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x77, 0x61,
	0x70, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x77, 0x61, 0x70, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x22, 0xd7, 0x02, 0x0a,
	0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x55, 0x6e,
	0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x7e, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xd6, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb6, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x65,
	0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x06, 0x0a, 0x19, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x4c, 0x6f, 0x77, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x72,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x12,
	0x50, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x50, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x72, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x50, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0xc1, 0x02, 0x0a, 0x1f, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x4c, 0x6f, 0x77, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x55, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a,
	0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x54, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x22, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x22, 0x9c, 0x01, 0x0a,
	0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x64, 0x32, 0x33, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x22, 0x9c, 0x01, 0x0a, 0x1e,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x6b, 0x32, 0x33, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x69, 0x64, 0x34, 0x35, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x69, 0x64,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42,
	0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x22, 0x9c, 0x01, 0x0a, 0x1e, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x73, 0x6b, 0x34, 0x35, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41,
	0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x73,
	0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x35, 0x22, 0xaf, 0x01, 0x0a, 0x23, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x22, 0x43, 0x0a, 0x21, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x47, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xd3, 0x02, 0x0a, 0x1f, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x4e, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6c,
	0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x22, 0x9a, 0x01, 0x0a,
	0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0xb4, 0x01, 0x0a, 0x26, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x22, 0x97, 0x01, 0x0a, 0x17, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x1e, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61,
	0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x63, 0x68, 0x49, 0x44, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x28, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xa9, 0x08, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f,
	0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x42, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x22, 0x9d, 0x01, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x44, 0x22, 0xd8, 0x05, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x4d, 0x44, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x78, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x4d, 0x44,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x36, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x15, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x96, 0x01, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x46, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x46,
	0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x27, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3f,
	0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xce, 0x03, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x41,
	0x6c, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x38,
	0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x73, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x49, 0x73, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f,
	0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x22, 0xaf, 0x01, 0x0a, 0x2d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x31, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x2b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x22, 0x8e, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x67,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x65, 0x67, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x65, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4c, 0x65, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x3e, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x22, 0xeb, 0x01, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43,
	0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x65, 0x67, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x65, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x4c, 0x65, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x4c, 0x65, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4c, 0x65, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6d, 0x70, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x63, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x51, 0x72, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xa6, 0x03,
	0x0a, 0x16, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4c, 0x69, 0x6e, 0x6b,
	0x4d, 0x61, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x4f, 0x41, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x55, 0x4f, 0x41, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xca, 0x02, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x74, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b,
	0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42,
	0x61, 0x6e, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe2, 0x05, 0x0a, 0x2c, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x67, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x65, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x65,
	0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xb8, 0x09,
	0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54,
	0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x47, 0x54, 0x44, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47,
	0x54, 0x44, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73,
	0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd6, 0x05, 0x0a, 0x20, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79,
	0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0xc3, 0x01, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xc9, 0x01, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x22, 0xa8, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xba,
	0x01, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xfa, 0x01, 0x0a, 0x28,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x75,
	0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x6f, 0x72, 0x74, 0x67,
	0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xdd, 0x01, 0x0a, 0x2f, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x62,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x7f, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x50, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x49, 0x50, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x20, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xc4, 0x02, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x81,
	0x01, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x22, 0x58, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x72, 0x79, 0x45, 0x72, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0xdb, 0x08, 0x0a,
	0x17, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x72, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x62,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x54, 0x44, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x54, 0x44, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf4, 0x11, 0x0a, 0x24, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6d, 0x62, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x62, 0x48, 0x65, 0x64,
	0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f,
	0x6d, 0x62, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x54, 0x44, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x54, 0x44, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x49, 0x44, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x73, 0x67, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x71, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x5a, 0x43, 0x45,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x5a, 0x43, 0x45, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x73, 0x53, 0x77, 0x61, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x44, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x5e, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x45, 0x72, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x22, 0xff, 0x07, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x45, 0x72, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x79, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x22, 0x44, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xe1, 0x02, 0x0a, 0x2b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x4d, 0x61, 0x78, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xd8, 0x02, 0x0a, 0x22, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x36,
	0x0a, 0x16, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x86, 0x01, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xab, 0x02,
	0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x21, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22, 0xae, 0x03, 0x0a,
	0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f,
	0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0x3e, 0x0a,
	0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x43, 0x46,
	0x4d, 0x4d, 0x43, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x22, 0xf1, 0x01,
	0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43, 0x46, 0x4d, 0x4d,
	0x43, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x4b, 0x69, 0x6e,
	0x64, 0x22, 0xbd, 0x01, 0x0a, 0x25, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4b,
	0x65, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0x66, 0x0a, 0x28, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x93, 0x02, 0x0a, 0x21, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x54, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x54, 0x50, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x54, 0x50, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x73, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x72, 0x69,
	0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x72,
	0x69, 0x66, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x54, 0x50, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x54, 0x50, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xb0, 0x01, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x54, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x54, 0x50, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x4f, 0x54, 0x50, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4f, 0x54, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4f, 0x54, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4f, 0x54,
	0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4f,
	0x54, 0x50, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0f, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x51, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x22, 0xb7, 0x02, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x45, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x22, 0xc6, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x45, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xf4, 0x01, 0x0a, 0x2c, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x22, 0xf3, 0x08, 0x0a, 0x29, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x46, 0x72,
	0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f,
	0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4c, 0x6f, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x45, 0x78,
	0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x68, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x46, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x43, 0x61, 0x73, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x45, 0x78, 0x63, 0x68, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x6f,
	0x6e, 0x67, 0x45, 0x78, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x4c, 0x6f, 0x6e, 0x67, 0x45, 0x78,
	0x63, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x15, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x63, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x48, 0x65, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x2c, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xb5, 0x01, 0x0a, 0x27, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x5e, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x83, 0x01, 0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x22, 0xfb, 0x02, 0x0a, 0x17, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x4e, 0x65, 0x77, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x55, 0x52, 0x4c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x44, 0x22, 0xba, 0x01, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x51, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x65, 0x77, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x55, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0xc1, 0x0b, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52,
	0x65, 0x71, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x61,
	0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x4d, 0x61,
	0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x61, 0x73, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x61, 0x73, 0x68, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41,
	0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x0b, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x46, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46,
	0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x61, 0x73, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x61,
	0x73, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75,
	0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x63, 0x75, 0x41, 0x63, 0x63, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65,
	0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd1, 0x0a, 0x0a, 0x1f, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61,
	0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x61, 0x78, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x4d, 0x61, 0x69,
	0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x2e,
	0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x65,
	0x77, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x4e, 0x65, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61,
	0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f,
	0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb8,
	0x0b, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e,
	0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x43, 0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x46, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f,
	0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xee, 0x0b, 0x0a, 0x1a, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65,
	0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x65,
	0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x43, 0x75, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63,
	0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a,
	0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xea, 0x0d, 0x0a, 0x18, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e,
	0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42,
	0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x46, 0x65, 0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x75, 0x73, 0x74, 0x46, 0x65, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x43, 0x75,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41,
	0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x54, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x0e, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2c,
	0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65,
	0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x50,
	0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x65,
	0x65, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x43, 0x75, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63,
	0x63, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a,
	0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd2, 0x09, 0x0a, 0x1e, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e,
	0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41,
	0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x54, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c,
	0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xa2, 0x0a, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73,
	0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6b,
	0x55, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x05, 0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x4f, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49,
	0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x22, 0xfe, 0x05, 0x0a,
	0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x69, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50,
	0x69, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x99, 0x05,
	0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42,
	0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x22, 0xcf, 0x05, 0x0a, 0x1f, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f,
	0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xb2, 0x07, 0x0a, 0x2a,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xa0, 0x07, 0x0a, 0x2a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52,
	0x73, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42,
	0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x22, 0xe5, 0x03, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x52, 0x65, 0x71, 0x44, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a, 0x1b, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xf3, 0x04, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73,
	0x57, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0xd7, 0x01, 0x0a, 0x1d, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x2e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x02, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x65, 0x71,
	0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x44, 0x65, 0x73, 0x63, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf5,
	0x04, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71,
	0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x22, 0xab, 0x05, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0xdb, 0x0a, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61,
	0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63,
	0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63,
	0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77,
	0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72,
	0x4e, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10,
	0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x55, 0x73, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xb9, 0x07, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x75, 0x73, 0x74,
	0x46, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x43, 0x75, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x65,
	0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x94,
	0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x81, 0x06, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e,
	0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x54, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69, 0x6e,
	0x4b, 0x65, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x69, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xd2, 0x05, 0x0a, 0x22, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0xae,
	0x05, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22,
	0xb9, 0x01, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42,
	0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0xe2, 0x04, 0x0a, 0x1e,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x70,
	0x65, 0x6e, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x75,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x75, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xf4, 0x0b, 0x0a, 0x1a, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x61, 0x78, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x4d, 0x61,
	0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x12,
	0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73,
	0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61,
	0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43,
	0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x61, 0x73,
	0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x61, 0x73, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x54,
	0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf6, 0x0b, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x46, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46,
	0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x61, 0x73, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x43, 0x61,
	0x73, 0x68, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75,
	0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65,
	0x63, 0x75, 0x41, 0x63, 0x63, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x53, 0x65, 0x63, 0x75, 0x41, 0x63, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65,
	0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x70,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x84, 0x0b, 0x0a, 0x1c, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42,
	0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x75, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x61, 0x78,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x4d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x4d, 0x61, 0x69,
	0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57,
	0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x42, 0x61,
	0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f,
	0x72, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x6e,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72,
	0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x50,
	0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61,
	0x6e, 0x6b, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x63,
	0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x53, 0x65, 0x63, 0x75, 0x50, 0x77, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x54,
	0x49, 0x44, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x4c,
	0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x4c, 0x6f, 0x6e, 0x67, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x43,
	0x49, 0x44, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x95, 0x01, 0x0a, 0x21, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x43, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x22, 0x79, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x52, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44,
	0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x24,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x44, 0x52, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x4f, 0x72, 0x69, 0x67,
	0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x44, 0x65, 0x73, 0x74, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x44, 0x65, 0x73, 0x74, 0x44, 0x52, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4f, 0x72, 0x69, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x65, 0x73, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x6f, 0x0a, 0x1b, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x46, 0x65,
	0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x45, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43,
	0x75, 0x72, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x22, 0x75, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x5a, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x21, 0x43,
	0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x50, 0x22, 0x9a, 0x01, 0x0a, 0x24, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49,
	0x44, 0x22, 0x42, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51,
	0x72, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x49, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x49, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x58, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xb4, 0x0a, 0x0a, 0x28, 0x43, 0x54,
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x46, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x61, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x71, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x53, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x6f, 0x6f, 0x6b, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x73, 0x77, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x42, 0x6f, 0x6f, 0x6b, 0x50, 0x73, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0xbd, 0x09, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x43, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x46, 0x61, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x46, 0x61, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x4d, 0x61, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6b,
	0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x42, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74,
	0x4e, 0x6f, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x42, 0x79, 0x42, 0x61,
	0x6e, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x49, 0x44, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x54, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x53, 0x74, 0x61, 0x73,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x63, 0x63, 0x53, 0x74, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x22, 0xd6, 0x03, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x20, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x43, 0x75, 0x72, 0x72, 0x44, 0x52,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x22, 0x43, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x43,
	0x75, 0x72, 0x72, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x52, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74,
	0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x6d, 0x0a, 0x23, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xc9, 0x02, 0x0a, 0x1d, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x55, 0x73, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e,
	0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74,
	0x64, 0x63, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x20,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x55, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x76, 0x0a, 0x20,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x47, 0x65, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0xa0, 0x01, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x47, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x74, 0x63, 0x68, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x47, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x1d,
	0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x47, 0x65, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x71, 0x22,
	0xc4, 0x03, 0x0a, 0x26, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65,
	0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61,
	0x70, 0x74, 0x63, 0x68, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74,
	0x63, 0x68, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f, 0x73,
	0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50,
	0x50, 0x6f, 0x72, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x22, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x54, 0x50, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x54, 0x50,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x4f, 0x54, 0x50, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0x4c, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71,
	0x41, 0x70, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x01,
	0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x73, 0x70, 0x41,
	0x70, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x41, 0x70, 0x69, 0x41,
	0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x49, 0x73, 0x41, 0x70, 0x69, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x7e, 0x0a, 0x1e, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63,
	0x52, 0x65, 0x71, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x41, 0x70, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x48, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x41, 0x70, 0x69, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x99, 0x01, 0x0a, 0x1d, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x22, 0x38,
	0x0a, 0x18, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x72, 0x65, 0x71, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x72, 0x65, 0x71, 0x22, 0x39, 0x0a, 0x1f, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x20, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64,
	0x63, 0x52, 0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x46, 0x0a, 0x22, 0x43, 0x54, 0x68,
	0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x45, 0x0a, 0x21, 0x43, 0x54, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52,
	0x65, 0x71, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6f, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x23, 0x43, 0x54, 0x68, 0x6f,
	0x73, 0x74, 0x46, 0x74, 0x64, 0x63, 0x52, 0x65, 0x71, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2a, 0xf0, 0x3a, 0x0a, 0x0e, 0x43, 0x74, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x28, 0x0a,
	0x24, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e,
	0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x47,
	0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x10, 0x09, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x47, 0x65, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10,
	0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x50, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x0c,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0d, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x11, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72,
	0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x12,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x45, 0x78, 0x65, 0x63,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x13, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x73, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x16, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x19, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x1c,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x10, 0x1d, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44, 0x5f, 0x4f, 0x6e,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x10, 0x20, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x21, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x10, 0x22,
	0x12, 0x27, 0x0a, 0x23, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x10, 0x24, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0x25, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x26, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73,
	0x70, 0x51, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x10, 0x27, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73,
	0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70,
	0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x10,
	0x29, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x2b, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x10, 0x2c, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73,
	0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x10, 0x2d, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x10, 0x2e, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x45, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0x2f, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x10, 0x30, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70,
	0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x10, 0x31, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x44, 0x5f, 0x4f, 0x6e,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x10, 0x32,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10, 0x33, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x43, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x10, 0x34, 0x12, 0x1e, 0x0a,
	0x1a, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x78, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x10, 0x35, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x36, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4d, 0x4d, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x10, 0x37, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73,
	0x70, 0x51, 0x72, 0x79, 0x4d, 0x4d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x10, 0x38, 0x12, 0x26, 0x0a, 0x22, 0x54,
	0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74,
	0x65, 0x10, 0x39, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3a, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x3b, 0x12, 0x20, 0x0a, 0x1c,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x3c, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x73,
	0x74, 0x10, 0x3d, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x52, 0x61, 0x74, 0x65, 0x10, 0x3e, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x44, 0x5f, 0x4f, 0x6e,
	0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0x3f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79,
	0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0x40, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0x41,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x42,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x43, 0x12, 0x22, 0x0a, 0x1e, 0x54,
	0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x10, 0x44, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x45, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x46, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x47, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x49, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x10, 0x4a, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x4b, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x4c, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x74, 0x6e, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x10, 0x4e, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x4f, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x50, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x10, 0x51, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52,
	0x74, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x10, 0x52, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52,
	0x74, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x53, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52,
	0x74, 0x6e, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x10, 0x54, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x10, 0x55, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72,
	0x72, 0x52, 0x74, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10,
	0x56, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x57, 0x12, 0x17, 0x0a,
	0x13, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x10, 0x58, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x74, 0x6e, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x59, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x5a, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x5b, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x5c,
	0x12, 0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x5d, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x74, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x5e, 0x12, 0x1f,
	0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x43, 0x6f, 0x6d,
	0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x5f, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x10, 0x60, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x61, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x62, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x10, 0x63, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0x64, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x10, 0x65, 0x12,
	0x29, 0x0a, 0x25, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x66, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x44,
	0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x10, 0x67, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x10, 0x68, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x10, 0x69, 0x12, 0x28, 0x0a, 0x24,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x72,
	0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79,
	0x42, 0x61, 0x6e, 0x6b, 0x10, 0x6a, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x74, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x6b, 0x12, 0x24, 0x0a, 0x20,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x10, 0x6c, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x10, 0x6d, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x10, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x74, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x6f, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x42, 0x61, 0x6e, 0x6b, 0x54,
	0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x70, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x10, 0x71, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x45,
	0x72, 0x72, 0x52, 0x74, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x42, 0x61, 0x6e, 0x6b, 0x54,
	0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x72, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x44, 0x5f, 0x4f, 0x6e,
	0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x44, 0x5f, 0x4f,
	0x6e, 0x45, 0x72, 0x72, 0x52, 0x74, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10,
	0x74, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x6c, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x75, 0x12, 0x2a, 0x0a,
	0x26, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x6c, 0x46,
	0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x76, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x77, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x10, 0x78, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73,
	0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x79,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x10, 0x7a, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x10, 0x7b,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x74, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x10,
	0x7c, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10,
	0x7d, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x44, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x10, 0x7e, 0x12, 0x0b,
	0x0a, 0x07, 0x54, 0x44, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x7f, 0x12, 0x08, 0x0a, 0x03, 0x54,
	0x44, 0x5f, 0x10, 0x80, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x10, 0x81, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x54, 0x44, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x82, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x65, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x10, 0x83, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x10, 0x84, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54,
	0x44, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x10, 0x85, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44,
	0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x10, 0x86, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x44, 0x5f, 0x52,
	0x65, 0x71, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x87,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x88,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x89, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x10, 0x8a, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x8b, 0x01, 0x12, 0x1d, 0x0a, 0x18,
	0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x8c, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x54,
	0x44, 0x5f, 0x52, 0x65, 0x71, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x10, 0x8d, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x10, 0x8e, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x10, 0x8f, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x47, 0x65, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x10,
	0x90, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61,
	0x10, 0x91, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x10, 0x92,
	0x01, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x54, 0x50, 0x10, 0x93, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x10, 0x94, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x10, 0x95, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x50, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x96, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x97, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x98, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x99, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x9a, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x9b, 0x01, 0x12, 0x1a,
	0x0a, 0x15, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x9c, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x9d, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x9e,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0x9f, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa0,
	0x01, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa1, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0xa2, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xa3, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x43, 0x6f, 0x6d, 0x62,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x10, 0xa4, 0x01, 0x12,
	0x13, 0x0a, 0x0e, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x10, 0xa5, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0xa6, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x54, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa7, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0xa8, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x44, 0x5f, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x10, 0xa9, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x10, 0xaa, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x10, 0xab, 0x01, 0x12, 0x26,
	0x0a, 0x21, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x10, 0xac, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0xad, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x10, 0xae, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51,
	0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xaf, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xb0, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xb1, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x6b, 0x10, 0xb2, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x54, 0x44, 0x5f, 0x52,
	0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x10, 0xb3, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x10, 0xb4, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0xb5, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x54, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x10, 0xb6, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x51, 0x72, 0x79, 0x43, 0x46, 0x4d, 0x4d, 0x43, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x10, 0xb7, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x45, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0xb8, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x10, 0xb9, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72,
	0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x10, 0xba, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x10, 0xbb, 0x01, 0x12, 0x1a,
	0x0a, 0x15, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x10, 0xbc, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x43, 0x49, 0x44, 0x4d, 0x61, 0x70, 0x10, 0xbd, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x78, 0x63,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x10, 0xbe, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x44, 0x5f, 0x52,
	0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x10, 0xbf, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72,
	0x79, 0x4d, 0x4d, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x10, 0xc0, 0x01, 0x12, 0x23,
	0x0a, 0x1e, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4d, 0x4d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65,
	0x10, 0xc1, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x10, 0xc2, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xc3, 0x01,
	0x12, 0x1f, 0x0a, 0x1a, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0xc4,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x53, 0x65,
	0x63, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x10,
	0xc5, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x10, 0xc6, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x51, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x10, 0xc7, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0xc8, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x46,
	0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0xc9, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x10, 0xca, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0xcb, 0x01, 0x12, 0x18,
	0x0a, 0x13, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x10, 0xcc, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x44, 0x5f, 0x52,
	0x65, 0x71, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x75, 0x61, 0x72, 0x64, 0x10, 0xcd, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x54,
	0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x62, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0xce, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51,
	0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x10, 0xcf, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10,
	0xd0, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x10, 0xd1, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0xd2, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x54, 0x44, 0x5f,
	0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x50, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd3, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x10, 0xd4, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x54, 0x44, 0x5f, 0x52, 0x65,
	0x71, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x10, 0xd5, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x44,
	0x5f, 0x52, 0x65, 0x71, 0x51, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x73, 0x10, 0xd6, 0x01, 0x12, 0x28, 0x0a, 0x23,
	0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x46, 0x4d, 0x4d, 0x43,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x10, 0xd7, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x6f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0xd8, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x54,
	0x44, 0x5f, 0x52, 0x65, 0x71, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x54,
	0x6f, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0xd9, 0x01,
	0x12, 0x28, 0x0a, 0x23, 0x54, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x42,
	0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0xda, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x44,
	0x5f, 0x4f, 0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0xdb, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0xdc,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0xdd, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x10, 0xde, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0xdf, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10,
	0xe0, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x53, 0x75,
	0x62, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xe1, 0x01, 0x12, 0x1c,
	0x0a, 0x17, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xe2, 0x01, 0x12, 0x1b, 0x0a, 0x16,
	0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x52, 0x73, 0x70, 0x53, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x52, 0x73, 0x70, 0x10, 0xe3, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x44, 0x5f,
	0x4f, 0x6e, 0x52, 0x73, 0x70, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x73, 0x70, 0x10, 0xe4, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x44, 0x5f, 0x4f,
	0x6e, 0x52, 0x74, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x10, 0xe5, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x44, 0x5f, 0x4f, 0x6e, 0x52,
	0x74, 0x6e, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x73, 0x70, 0x10, 0xe6, 0x01,
	0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x44, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0xe7,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x44, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x10, 0xe8, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x4d, 0x44, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0xe9, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x4d, 0x44, 0x5f, 0x10, 0xea, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x44, 0x5f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x10, 0xeb, 0x01, 0x12, 0x1a,
	0x0a, 0x15, 0x4d, 0x44, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0xec, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x44,
	0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x65, 0x6e, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0xed, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x44, 0x5f, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x69, 0x10, 0xee, 0x01, 0x12, 0x1b, 0x0a,
	0x16, 0x4d, 0x44, 0x5f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xef, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x44,
	0x5f, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xf0, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x44, 0x5f,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x10, 0xf1, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x44, 0x5f, 0x55, 0x6e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x6f, 0x72, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x10, 0xf2, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x44, 0x5f, 0x52, 0x65,
	0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0xf3, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x4d, 0x44, 0x5f, 0x52, 0x65, 0x71, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x10, 0xf4, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41,
	0x54, 0x10, 0x90, 0x4e, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x73, 0x68, 0x65, 0x6e, 0x6a, 0x69, 0x61, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x63,
	0x74, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ctp_ctp_proto_rawDescOnce sync.Once
	file_ctp_ctp_proto_rawDescData = file_ctp_ctp_proto_rawDesc
)

func file_ctp_ctp_proto_rawDescGZIP() []byte {
	file_ctp_ctp_proto_rawDescOnce.Do(func() {
		file_ctp_ctp_proto_rawDescData = protoimpl.X.CompressGZIP(file_ctp_ctp_proto_rawDescData)
	})
	return file_ctp_ctp_proto_rawDescData
}

var file_ctp_ctp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ctp_ctp_proto_msgTypes = make([]protoimpl.MessageInfo, 358)
var file_ctp_ctp_proto_goTypes = []interface{}{
	(CtpMessageType)(0),                                     // 0: ctp.CtpMessageType
	(*CThostFtdcDisseminationField)(nil),                    // 1: ctp.CThostFtdcDisseminationField
	(*CThostFtdcReqUserLoginField)(nil),                     // 2: ctp.CThostFtdcReqUserLoginField
	(*CThostFtdcRspUserLoginField)(nil),                     // 3: ctp.CThostFtdcRspUserLoginField
	(*CThostFtdcUserLogoutField)(nil),                       // 4: ctp.CThostFtdcUserLogoutField
	(*CThostFtdcForceUserLogoutField)(nil),                  // 5: ctp.CThostFtdcForceUserLogoutField
	(*CThostFtdcReqAuthenticateField)(nil),                  // 6: ctp.CThostFtdcReqAuthenticateField
	(*CThostFtdcRspAuthenticateField)(nil),                  // 7: ctp.CThostFtdcRspAuthenticateField
	(*CThostFtdcAuthenticationInfoField)(nil),               // 8: ctp.CThostFtdcAuthenticationInfoField
	(*CThostFtdcRspUserLogin2Field)(nil),                    // 9: ctp.CThostFtdcRspUserLogin2Field
	(*CThostFtdcTransferHeaderField)(nil),                   // 10: ctp.CThostFtdcTransferHeaderField
	(*CThostFtdcTransferBankToFutureReqField)(nil),          // 11: ctp.CThostFtdcTransferBankToFutureReqField
	(*CThostFtdcTransferBankToFutureRspField)(nil),          // 12: ctp.CThostFtdcTransferBankToFutureRspField
	(*CThostFtdcTransferFutureToBankReqField)(nil),          // 13: ctp.CThostFtdcTransferFutureToBankReqField
	(*CThostFtdcTransferFutureToBankRspField)(nil),          // 14: ctp.CThostFtdcTransferFutureToBankRspField
	(*CThostFtdcTransferQryBankReqField)(nil),               // 15: ctp.CThostFtdcTransferQryBankReqField
	(*CThostFtdcTransferQryBankRspField)(nil),               // 16: ctp.CThostFtdcTransferQryBankRspField
	(*CThostFtdcTransferQryDetailReqField)(nil),             // 17: ctp.CThostFtdcTransferQryDetailReqField
	(*CThostFtdcTransferQryDetailRspField)(nil),             // 18: ctp.CThostFtdcTransferQryDetailRspField
	(*CThostFtdcRspInfoField)(nil),                          // 19: ctp.CThostFtdcRspInfoField
	(*CThostFtdcExchangeField)(nil),                         // 20: ctp.CThostFtdcExchangeField
	(*CThostFtdcProductField)(nil),                          // 21: ctp.CThostFtdcProductField
	(*CThostFtdcInstrumentField)(nil),                       // 22: ctp.CThostFtdcInstrumentField
	(*CThostFtdcBrokerField)(nil),                           // 23: ctp.CThostFtdcBrokerField
	(*CThostFtdcTraderField)(nil),                           // 24: ctp.CThostFtdcTraderField
	(*CThostFtdcInvestorField)(nil),                         // 25: ctp.CThostFtdcInvestorField
	(*CThostFtdcTradingCodeField)(nil),                      // 26: ctp.CThostFtdcTradingCodeField
	(*CThostFtdcPartBrokerField)(nil),                       // 27: ctp.CThostFtdcPartBrokerField
	(*CThostFtdcSuperUserField)(nil),                        // 28: ctp.CThostFtdcSuperUserField
	(*CThostFtdcSuperUserFunctionField)(nil),                // 29: ctp.CThostFtdcSuperUserFunctionField
	(*CThostFtdcInvestorGroupField)(nil),                    // 30: ctp.CThostFtdcInvestorGroupField
	(*CThostFtdcTradingAccountField)(nil),                   // 31: ctp.CThostFtdcTradingAccountField
	(*CThostFtdcInvestorPositionField)(nil),                 // 32: ctp.CThostFtdcInvestorPositionField
	(*CThostFtdcInstrumentMarginRateField)(nil),             // 33: ctp.CThostFtdcInstrumentMarginRateField
	(*CThostFtdcInstrumentCommissionRateField)(nil),         // 34: ctp.CThostFtdcInstrumentCommissionRateField
	(*CThostFtdcDepthMarketDataField)(nil),                  // 35: ctp.CThostFtdcDepthMarketDataField
	(*CThostFtdcInstrumentTradingRightField)(nil),           // 36: ctp.CThostFtdcInstrumentTradingRightField
	(*CThostFtdcBrokerUserField)(nil),                       // 37: ctp.CThostFtdcBrokerUserField
	(*CThostFtdcBrokerUserPasswordField)(nil),               // 38: ctp.CThostFtdcBrokerUserPasswordField
	(*CThostFtdcBrokerUserFunctionField)(nil),               // 39: ctp.CThostFtdcBrokerUserFunctionField
	(*CThostFtdcTraderOfferField)(nil),                      // 40: ctp.CThostFtdcTraderOfferField
	(*CThostFtdcSettlementInfoField)(nil),                   // 41: ctp.CThostFtdcSettlementInfoField
	(*CThostFtdcInstrumentMarginRateAdjustField)(nil),       // 42: ctp.CThostFtdcInstrumentMarginRateAdjustField
	(*CThostFtdcExchangeMarginRateField)(nil),               // 43: ctp.CThostFtdcExchangeMarginRateField
	(*CThostFtdcExchangeMarginRateAdjustField)(nil),         // 44: ctp.CThostFtdcExchangeMarginRateAdjustField
	(*CThostFtdcExchangeRateField)(nil),                     // 45: ctp.CThostFtdcExchangeRateField
	(*CThostFtdcSettlementRefField)(nil),                    // 46: ctp.CThostFtdcSettlementRefField
	(*CThostFtdcCurrentTimeField)(nil),                      // 47: ctp.CThostFtdcCurrentTimeField
	(*CThostFtdcCommPhaseField)(nil),                        // 48: ctp.CThostFtdcCommPhaseField
	(*CThostFtdcLoginInfoField)(nil),                        // 49: ctp.CThostFtdcLoginInfoField
	(*CThostFtdcLogoutAllField)(nil),                        // 50: ctp.CThostFtdcLogoutAllField
	(*CThostFtdcFrontStatusField)(nil),                      // 51: ctp.CThostFtdcFrontStatusField
	(*CThostFtdcUserPasswordUpdateField)(nil),               // 52: ctp.CThostFtdcUserPasswordUpdateField
	(*CThostFtdcInputOrderField)(nil),                       // 53: ctp.CThostFtdcInputOrderField
	(*CThostFtdcOrderField)(nil),                            // 54: ctp.CThostFtdcOrderField
	(*CThostFtdcExchangeOrderField)(nil),                    // 55: ctp.CThostFtdcExchangeOrderField
	(*CThostFtdcExchangeOrderInsertErrorField)(nil),         // 56: ctp.CThostFtdcExchangeOrderInsertErrorField
	(*CThostFtdcInputOrderActionField)(nil),                 // 57: ctp.CThostFtdcInputOrderActionField
	(*CThostFtdcOrderActionField)(nil),                      // 58: ctp.CThostFtdcOrderActionField
	(*CThostFtdcExchangeOrderActionField)(nil),              // 59: ctp.CThostFtdcExchangeOrderActionField
	(*CThostFtdcExchangeOrderActionErrorField)(nil),         // 60: ctp.CThostFtdcExchangeOrderActionErrorField
	(*CThostFtdcExchangeTradeField)(nil),                    // 61: ctp.CThostFtdcExchangeTradeField
	(*CThostFtdcTradeField)(nil),                            // 62: ctp.CThostFtdcTradeField
	(*CThostFtdcUserSessionField)(nil),                      // 63: ctp.CThostFtdcUserSessionField
	(*CThostFtdcQueryMaxOrderVolumeField)(nil),              // 64: ctp.CThostFtdcQueryMaxOrderVolumeField
	(*CThostFtdcSettlementInfoConfirmField)(nil),            // 65: ctp.CThostFtdcSettlementInfoConfirmField
	(*CThostFtdcSyncDepositField)(nil),                      // 66: ctp.CThostFtdcSyncDepositField
	(*CThostFtdcSyncFundMortgageField)(nil),                 // 67: ctp.CThostFtdcSyncFundMortgageField
	(*CThostFtdcBrokerSyncField)(nil),                       // 68: ctp.CThostFtdcBrokerSyncField
	(*CThostFtdcSyncingInvestorField)(nil),                  // 69: ctp.CThostFtdcSyncingInvestorField
	(*CThostFtdcSyncingTradingCodeField)(nil),               // 70: ctp.CThostFtdcSyncingTradingCodeField
	(*CThostFtdcSyncingInvestorGroupField)(nil),             // 71: ctp.CThostFtdcSyncingInvestorGroupField
	(*CThostFtdcSyncingTradingAccountField)(nil),            // 72: ctp.CThostFtdcSyncingTradingAccountField
	(*CThostFtdcSyncingInvestorPositionField)(nil),          // 73: ctp.CThostFtdcSyncingInvestorPositionField
	(*CThostFtdcSyncingInstrumentMarginRateField)(nil),      // 74: ctp.CThostFtdcSyncingInstrumentMarginRateField
	(*CThostFtdcSyncingInstrumentCommissionRateField)(nil),  // 75: ctp.CThostFtdcSyncingInstrumentCommissionRateField
	(*CThostFtdcSyncingInstrumentTradingRightField)(nil),    // 76: ctp.CThostFtdcSyncingInstrumentTradingRightField
	(*CThostFtdcQryOrderField)(nil),                         // 77: ctp.CThostFtdcQryOrderField
	(*CThostFtdcQryTradeField)(nil),                         // 78: ctp.CThostFtdcQryTradeField
	(*CThostFtdcQryInvestorPositionField)(nil),              // 79: ctp.CThostFtdcQryInvestorPositionField
	(*CThostFtdcQryTradingAccountField)(nil),                // 80: ctp.CThostFtdcQryTradingAccountField
	(*CThostFtdcQryInvestorField)(nil),                      // 81: ctp.CThostFtdcQryInvestorField
	(*CThostFtdcQryTradingCodeField)(nil),                   // 82: ctp.CThostFtdcQryTradingCodeField
	(*CThostFtdcQryInvestorGroupField)(nil),                 // 83: ctp.CThostFtdcQryInvestorGroupField
	(*CThostFtdcQryInstrumentMarginRateField)(nil),          // 84: ctp.CThostFtdcQryInstrumentMarginRateField
	(*CThostFtdcQryInstrumentCommissionRateField)(nil),      // 85: ctp.CThostFtdcQryInstrumentCommissionRateField
	(*CThostFtdcQryInstrumentTradingRightField)(nil),        // 86: ctp.CThostFtdcQryInstrumentTradingRightField
	(*CThostFtdcQryBrokerField)(nil),                        // 87: ctp.CThostFtdcQryBrokerField
	(*CThostFtdcQryTraderField)(nil),                        // 88: ctp.CThostFtdcQryTraderField
	(*CThostFtdcQrySuperUserFunctionField)(nil),             // 89: ctp.CThostFtdcQrySuperUserFunctionField
	(*CThostFtdcQryUserSessionField)(nil),                   // 90: ctp.CThostFtdcQryUserSessionField
	(*CThostFtdcQryPartBrokerField)(nil),                    // 91: ctp.CThostFtdcQryPartBrokerField
	(*CThostFtdcQryFrontStatusField)(nil),                   // 92: ctp.CThostFtdcQryFrontStatusField
	(*CThostFtdcQryExchangeOrderField)(nil),                 // 93: ctp.CThostFtdcQryExchangeOrderField
	(*CThostFtdcQryOrderActionField)(nil),                   // 94: ctp.CThostFtdcQryOrderActionField
	(*CThostFtdcQryExchangeOrderActionField)(nil),           // 95: ctp.CThostFtdcQryExchangeOrderActionField
	(*CThostFtdcQrySuperUserField)(nil),                     // 96: ctp.CThostFtdcQrySuperUserField
	(*CThostFtdcQryExchangeField)(nil),                      // 97: ctp.CThostFtdcQryExchangeField
	(*CThostFtdcQryProductField)(nil),                       // 98: ctp.CThostFtdcQryProductField
	(*CThostFtdcQryInstrumentField)(nil),                    // 99: ctp.CThostFtdcQryInstrumentField
	(*CThostFtdcQryDepthMarketDataField)(nil),               // 100: ctp.CThostFtdcQryDepthMarketDataField
	(*CThostFtdcQryBrokerUserField)(nil),                    // 101: ctp.CThostFtdcQryBrokerUserField
	(*CThostFtdcQryBrokerUserFunctionField)(nil),            // 102: ctp.CThostFtdcQryBrokerUserFunctionField
	(*CThostFtdcQryTraderOfferField)(nil),                   // 103: ctp.CThostFtdcQryTraderOfferField
	(*CThostFtdcQrySyncDepositField)(nil),                   // 104: ctp.CThostFtdcQrySyncDepositField
	(*CThostFtdcQrySettlementInfoField)(nil),                // 105: ctp.CThostFtdcQrySettlementInfoField
	(*CThostFtdcQryExchangeMarginRateField)(nil),            // 106: ctp.CThostFtdcQryExchangeMarginRateField
	(*CThostFtdcQryExchangeMarginRateAdjustField)(nil),      // 107: ctp.CThostFtdcQryExchangeMarginRateAdjustField
	(*CThostFtdcQryExchangeRateField)(nil),                  // 108: ctp.CThostFtdcQryExchangeRateField
	(*CThostFtdcQrySyncFundMortgageField)(nil),              // 109: ctp.CThostFtdcQrySyncFundMortgageField
	(*CThostFtdcQryHisOrderField)(nil),                      // 110: ctp.CThostFtdcQryHisOrderField
	(*CThostFtdcOptionInstrMiniMarginField)(nil),            // 111: ctp.CThostFtdcOptionInstrMiniMarginField
	(*CThostFtdcOptionInstrMarginAdjustField)(nil),          // 112: ctp.CThostFtdcOptionInstrMarginAdjustField
	(*CThostFtdcOptionInstrCommRateField)(nil),              // 113: ctp.CThostFtdcOptionInstrCommRateField
	(*CThostFtdcOptionInstrTradeCostField)(nil),             // 114: ctp.CThostFtdcOptionInstrTradeCostField
	(*CThostFtdcQryOptionInstrTradeCostField)(nil),          // 115: ctp.CThostFtdcQryOptionInstrTradeCostField
	(*CThostFtdcQryOptionInstrCommRateField)(nil),           // 116: ctp.CThostFtdcQryOptionInstrCommRateField
	(*CThostFtdcIndexPriceField)(nil),                       // 117: ctp.CThostFtdcIndexPriceField
	(*CThostFtdcInputExecOrderField)(nil),                   // 118: ctp.CThostFtdcInputExecOrderField
	(*CThostFtdcInputExecOrderActionField)(nil),             // 119: ctp.CThostFtdcInputExecOrderActionField
	(*CThostFtdcExecOrderField)(nil),                        // 120: ctp.CThostFtdcExecOrderField
	(*CThostFtdcExecOrderActionField)(nil),                  // 121: ctp.CThostFtdcExecOrderActionField
	(*CThostFtdcQryExecOrderField)(nil),                     // 122: ctp.CThostFtdcQryExecOrderField
	(*CThostFtdcExchangeExecOrderField)(nil),                // 123: ctp.CThostFtdcExchangeExecOrderField
	(*CThostFtdcQryExchangeExecOrderField)(nil),             // 124: ctp.CThostFtdcQryExchangeExecOrderField
	(*CThostFtdcQryExecOrderActionField)(nil),               // 125: ctp.CThostFtdcQryExecOrderActionField
	(*CThostFtdcExchangeExecOrderActionField)(nil),          // 126: ctp.CThostFtdcExchangeExecOrderActionField
	(*CThostFtdcQryExchangeExecOrderActionField)(nil),       // 127: ctp.CThostFtdcQryExchangeExecOrderActionField
	(*CThostFtdcErrExecOrderField)(nil),                     // 128: ctp.CThostFtdcErrExecOrderField
	(*CThostFtdcQryErrExecOrderField)(nil),                  // 129: ctp.CThostFtdcQryErrExecOrderField
	(*CThostFtdcErrExecOrderActionField)(nil),               // 130: ctp.CThostFtdcErrExecOrderActionField
	(*CThostFtdcQryErrExecOrderActionField)(nil),            // 131: ctp.CThostFtdcQryErrExecOrderActionField
	(*CThostFtdcOptionInstrTradingRightField)(nil),          // 132: ctp.CThostFtdcOptionInstrTradingRightField
	(*CThostFtdcQryOptionInstrTradingRightField)(nil),       // 133: ctp.CThostFtdcQryOptionInstrTradingRightField
	(*CThostFtdcInputForQuoteField)(nil),                    // 134: ctp.CThostFtdcInputForQuoteField
	(*CThostFtdcForQuoteField)(nil),                         // 135: ctp.CThostFtdcForQuoteField
	(*CThostFtdcQryForQuoteField)(nil),                      // 136: ctp.CThostFtdcQryForQuoteField
	(*CThostFtdcExchangeForQuoteField)(nil),                 // 137: ctp.CThostFtdcExchangeForQuoteField
	(*CThostFtdcQryExchangeForQuoteField)(nil),              // 138: ctp.CThostFtdcQryExchangeForQuoteField
	(*CThostFtdcInputQuoteField)(nil),                       // 139: ctp.CThostFtdcInputQuoteField
	(*CThostFtdcInputQuoteActionField)(nil),                 // 140: ctp.CThostFtdcInputQuoteActionField
	(*CThostFtdcQuoteField)(nil),                            // 141: ctp.CThostFtdcQuoteField
	(*CThostFtdcQuoteActionField)(nil),                      // 142: ctp.CThostFtdcQuoteActionField
	(*CThostFtdcQryQuoteField)(nil),                         // 143: ctp.CThostFtdcQryQuoteField
	(*CThostFtdcExchangeQuoteField)(nil),                    // 144: ctp.CThostFtdcExchangeQuoteField
	(*CThostFtdcQryExchangeQuoteField)(nil),                 // 145: ctp.CThostFtdcQryExchangeQuoteField
	(*CThostFtdcQryQuoteActionField)(nil),                   // 146: ctp.CThostFtdcQryQuoteActionField
	(*CThostFtdcExchangeQuoteActionField)(nil),              // 147: ctp.CThostFtdcExchangeQuoteActionField
	(*CThostFtdcQryExchangeQuoteActionField)(nil),           // 148: ctp.CThostFtdcQryExchangeQuoteActionField
	(*CThostFtdcOptionInstrDeltaField)(nil),                 // 149: ctp.CThostFtdcOptionInstrDeltaField
	(*CThostFtdcForQuoteRspField)(nil),                      // 150: ctp.CThostFtdcForQuoteRspField
	(*CThostFtdcStrikeOffsetField)(nil),                     // 151: ctp.CThostFtdcStrikeOffsetField
	(*CThostFtdcQryStrikeOffsetField)(nil),                  // 152: ctp.CThostFtdcQryStrikeOffsetField
	(*CThostFtdcInputBatchOrderActionField)(nil),            // 153: ctp.CThostFtdcInputBatchOrderActionField
	(*CThostFtdcBatchOrderActionField)(nil),                 // 154: ctp.CThostFtdcBatchOrderActionField
	(*CThostFtdcExchangeBatchOrderActionField)(nil),         // 155: ctp.CThostFtdcExchangeBatchOrderActionField
	(*CThostFtdcQryBatchOrderActionField)(nil),              // 156: ctp.CThostFtdcQryBatchOrderActionField
	(*CThostFtdcCombInstrumentGuardField)(nil),              // 157: ctp.CThostFtdcCombInstrumentGuardField
	(*CThostFtdcQryCombInstrumentGuardField)(nil),           // 158: ctp.CThostFtdcQryCombInstrumentGuardField
	(*CThostFtdcInputCombActionField)(nil),                  // 159: ctp.CThostFtdcInputCombActionField
	(*CThostFtdcCombActionField)(nil),                       // 160: ctp.CThostFtdcCombActionField
	(*CThostFtdcQryCombActionField)(nil),                    // 161: ctp.CThostFtdcQryCombActionField
	(*CThostFtdcExchangeCombActionField)(nil),               // 162: ctp.CThostFtdcExchangeCombActionField
	(*CThostFtdcQryExchangeCombActionField)(nil),            // 163: ctp.CThostFtdcQryExchangeCombActionField
	(*CThostFtdcProductExchRateField)(nil),                  // 164: ctp.CThostFtdcProductExchRateField
	(*CThostFtdcQryProductExchRateField)(nil),               // 165: ctp.CThostFtdcQryProductExchRateField
	(*CThostFtdcQryForQuoteParamField)(nil),                 // 166: ctp.CThostFtdcQryForQuoteParamField
	(*CThostFtdcForQuoteParamField)(nil),                    // 167: ctp.CThostFtdcForQuoteParamField
	(*CThostFtdcMMOptionInstrCommRateField)(nil),            // 168: ctp.CThostFtdcMMOptionInstrCommRateField
	(*CThostFtdcQryMMOptionInstrCommRateField)(nil),         // 169: ctp.CThostFtdcQryMMOptionInstrCommRateField
	(*CThostFtdcMMInstrumentCommissionRateField)(nil),       // 170: ctp.CThostFtdcMMInstrumentCommissionRateField
	(*CThostFtdcQryMMInstrumentCommissionRateField)(nil),    // 171: ctp.CThostFtdcQryMMInstrumentCommissionRateField
	(*CThostFtdcInstrumentOrderCommRateField)(nil),          // 172: ctp.CThostFtdcInstrumentOrderCommRateField
	(*CThostFtdcQryInstrumentOrderCommRateField)(nil),       // 173: ctp.CThostFtdcQryInstrumentOrderCommRateField
	(*CThostFtdcTradeParamField)(nil),                       // 174: ctp.CThostFtdcTradeParamField
	(*CThostFtdcInstrumentMarginRateULField)(nil),           // 175: ctp.CThostFtdcInstrumentMarginRateULField
	(*CThostFtdcFutureLimitPosiParamField)(nil),             // 176: ctp.CThostFtdcFutureLimitPosiParamField
	(*CThostFtdcLoginForbiddenIPField)(nil),                 // 177: ctp.CThostFtdcLoginForbiddenIPField
	(*CThostFtdcIPListField)(nil),                           // 178: ctp.CThostFtdcIPListField
	(*CThostFtdcInputOptionSelfCloseField)(nil),             // 179: ctp.CThostFtdcInputOptionSelfCloseField
	(*CThostFtdcInputOptionSelfCloseActionField)(nil),       // 180: ctp.CThostFtdcInputOptionSelfCloseActionField
	(*CThostFtdcOptionSelfCloseField)(nil),                  // 181: ctp.CThostFtdcOptionSelfCloseField
	(*CThostFtdcOptionSelfCloseActionField)(nil),            // 182: ctp.CThostFtdcOptionSelfCloseActionField
	(*CThostFtdcQryOptionSelfCloseField)(nil),               // 183: ctp.CThostFtdcQryOptionSelfCloseField
	(*CThostFtdcExchangeOptionSelfCloseField)(nil),          // 184: ctp.CThostFtdcExchangeOptionSelfCloseField
	(*CThostFtdcQryOptionSelfCloseActionField)(nil),         // 185: ctp.CThostFtdcQryOptionSelfCloseActionField
	(*CThostFtdcExchangeOptionSelfCloseActionField)(nil),    // 186: ctp.CThostFtdcExchangeOptionSelfCloseActionField
	(*CThostFtdcSyncDelaySwapField)(nil),                    // 187: ctp.CThostFtdcSyncDelaySwapField
	(*CThostFtdcQrySyncDelaySwapField)(nil),                 // 188: ctp.CThostFtdcQrySyncDelaySwapField
	(*CThostFtdcInvestUnitField)(nil),                       // 189: ctp.CThostFtdcInvestUnitField
	(*CThostFtdcQryInvestUnitField)(nil),                    // 190: ctp.CThostFtdcQryInvestUnitField
	(*CThostFtdcSecAgentCheckModeField)(nil),                // 191: ctp.CThostFtdcSecAgentCheckModeField
	(*CThostFtdcSecAgentTradeInfoField)(nil),                // 192: ctp.CThostFtdcSecAgentTradeInfoField
	(*CThostFtdcMarketDataField)(nil),                       // 193: ctp.CThostFtdcMarketDataField
	(*CThostFtdcMarketDataBaseField)(nil),                   // 194: ctp.CThostFtdcMarketDataBaseField
	(*CThostFtdcMarketDataStaticField)(nil),                 // 195: ctp.CThostFtdcMarketDataStaticField
	(*CThostFtdcMarketDataLastMatchField)(nil),              // 196: ctp.CThostFtdcMarketDataLastMatchField
	(*CThostFtdcMarketDataBestPriceField)(nil),              // 197: ctp.CThostFtdcMarketDataBestPriceField
	(*CThostFtdcMarketDataBid23Field)(nil),                  // 198: ctp.CThostFtdcMarketDataBid23Field
	(*CThostFtdcMarketDataAsk23Field)(nil),                  // 199: ctp.CThostFtdcMarketDataAsk23Field
	(*CThostFtdcMarketDataBid45Field)(nil),                  // 200: ctp.CThostFtdcMarketDataBid45Field
	(*CThostFtdcMarketDataAsk45Field)(nil),                  // 201: ctp.CThostFtdcMarketDataAsk45Field
	(*CThostFtdcMarketDataUpdateTimeField)(nil),             // 202: ctp.CThostFtdcMarketDataUpdateTimeField
	(*CThostFtdcMarketDataExchangeField)(nil),               // 203: ctp.CThostFtdcMarketDataExchangeField
	(*CThostFtdcSpecificInstrumentField)(nil),               // 204: ctp.CThostFtdcSpecificInstrumentField
	(*CThostFtdcInstrumentStatusField)(nil),                 // 205: ctp.CThostFtdcInstrumentStatusField
	(*CThostFtdcQryInstrumentStatusField)(nil),              // 206: ctp.CThostFtdcQryInstrumentStatusField
	(*CThostFtdcInvestorAccountField)(nil),                  // 207: ctp.CThostFtdcInvestorAccountField
	(*CThostFtdcPositionProfitAlgorithmField)(nil),          // 208: ctp.CThostFtdcPositionProfitAlgorithmField
	(*CThostFtdcDiscountField)(nil),                         // 209: ctp.CThostFtdcDiscountField
	(*CThostFtdcQryTransferBankField)(nil),                  // 210: ctp.CThostFtdcQryTransferBankField
	(*CThostFtdcTransferBankField)(nil),                     // 211: ctp.CThostFtdcTransferBankField
	(*CThostFtdcQryInvestorPositionDetailField)(nil),        // 212: ctp.CThostFtdcQryInvestorPositionDetailField
	(*CThostFtdcInvestorPositionDetailField)(nil),           // 213: ctp.CThostFtdcInvestorPositionDetailField
	(*CThostFtdcTradingAccountPasswordField)(nil),           // 214: ctp.CThostFtdcTradingAccountPasswordField
	(*CThostFtdcMDTraderOfferField)(nil),                    // 215: ctp.CThostFtdcMDTraderOfferField
	(*CThostFtdcQryMDTraderOfferField)(nil),                 // 216: ctp.CThostFtdcQryMDTraderOfferField
	(*CThostFtdcQryNoticeField)(nil),                        // 217: ctp.CThostFtdcQryNoticeField
	(*CThostFtdcNoticeField)(nil),                           // 218: ctp.CThostFtdcNoticeField
	(*CThostFtdcUserRightField)(nil),                        // 219: ctp.CThostFtdcUserRightField
	(*CThostFtdcQrySettlementInfoConfirmField)(nil),         // 220: ctp.CThostFtdcQrySettlementInfoConfirmField
	(*CThostFtdcLoadSettlementInfoField)(nil),               // 221: ctp.CThostFtdcLoadSettlementInfoField
	(*CThostFtdcBrokerWithdrawAlgorithmField)(nil),          // 222: ctp.CThostFtdcBrokerWithdrawAlgorithmField
	(*CThostFtdcTradingAccountPasswordUpdateV1Field)(nil),   // 223: ctp.CThostFtdcTradingAccountPasswordUpdateV1Field
	(*CThostFtdcTradingAccountPasswordUpdateField)(nil),     // 224: ctp.CThostFtdcTradingAccountPasswordUpdateField
	(*CThostFtdcQryCombinationLegField)(nil),                // 225: ctp.CThostFtdcQryCombinationLegField
	(*CThostFtdcQrySyncStatusField)(nil),                    // 226: ctp.CThostFtdcQrySyncStatusField
	(*CThostFtdcCombinationLegField)(nil),                   // 227: ctp.CThostFtdcCombinationLegField
	(*CThostFtdcSyncStatusField)(nil),                       // 228: ctp.CThostFtdcSyncStatusField
	(*CThostFtdcQryLinkManField)(nil),                       // 229: ctp.CThostFtdcQryLinkManField
	(*CThostFtdcLinkManField)(nil),                          // 230: ctp.CThostFtdcLinkManField
	(*CThostFtdcQryBrokerUserEventField)(nil),               // 231: ctp.CThostFtdcQryBrokerUserEventField
	(*CThostFtdcBrokerUserEventField)(nil),                  // 232: ctp.CThostFtdcBrokerUserEventField
	(*CThostFtdcQryContractBankField)(nil),                  // 233: ctp.CThostFtdcQryContractBankField
	(*CThostFtdcContractBankField)(nil),                     // 234: ctp.CThostFtdcContractBankField
	(*CThostFtdcInvestorPositionCombineDetailField)(nil),    // 235: ctp.CThostFtdcInvestorPositionCombineDetailField
	(*CThostFtdcParkedOrderField)(nil),                      // 236: ctp.CThostFtdcParkedOrderField
	(*CThostFtdcParkedOrderActionField)(nil),                // 237: ctp.CThostFtdcParkedOrderActionField
	(*CThostFtdcQryParkedOrderField)(nil),                   // 238: ctp.CThostFtdcQryParkedOrderField
	(*CThostFtdcQryParkedOrderActionField)(nil),             // 239: ctp.CThostFtdcQryParkedOrderActionField
	(*CThostFtdcRemoveParkedOrderField)(nil),                // 240: ctp.CThostFtdcRemoveParkedOrderField
	(*CThostFtdcRemoveParkedOrderActionField)(nil),          // 241: ctp.CThostFtdcRemoveParkedOrderActionField
	(*CThostFtdcInvestorWithdrawAlgorithmField)(nil),        // 242: ctp.CThostFtdcInvestorWithdrawAlgorithmField
	(*CThostFtdcQryInvestorPositionCombineDetailField)(nil), // 243: ctp.CThostFtdcQryInvestorPositionCombineDetailField
	(*CThostFtdcMarketDataAveragePriceField)(nil),           // 244: ctp.CThostFtdcMarketDataAveragePriceField
	(*CThostFtdcVerifyInvestorPasswordField)(nil),           // 245: ctp.CThostFtdcVerifyInvestorPasswordField
	(*CThostFtdcUserIPField)(nil),                           // 246: ctp.CThostFtdcUserIPField
	(*CThostFtdcTradingNoticeInfoField)(nil),                // 247: ctp.CThostFtdcTradingNoticeInfoField
	(*CThostFtdcTradingNoticeField)(nil),                    // 248: ctp.CThostFtdcTradingNoticeField
	(*CThostFtdcQryTradingNoticeField)(nil),                 // 249: ctp.CThostFtdcQryTradingNoticeField
	(*CThostFtdcQryErrOrderField)(nil),                      // 250: ctp.CThostFtdcQryErrOrderField
	(*CThostFtdcErrOrderField)(nil),                         // 251: ctp.CThostFtdcErrOrderField
	(*CThostFtdcErrorConditionalOrderField)(nil),            // 252: ctp.CThostFtdcErrorConditionalOrderField
	(*CThostFtdcQryErrOrderActionField)(nil),                // 253: ctp.CThostFtdcQryErrOrderActionField
	(*CThostFtdcErrOrderActionField)(nil),                   // 254: ctp.CThostFtdcErrOrderActionField
	(*CThostFtdcQryExchangeSequenceField)(nil),              // 255: ctp.CThostFtdcQryExchangeSequenceField
	(*CThostFtdcExchangeSequenceField)(nil),                 // 256: ctp.CThostFtdcExchangeSequenceField
	(*CThostFtdcQueryMaxOrderVolumeWithPriceField)(nil),     // 257: ctp.CThostFtdcQueryMaxOrderVolumeWithPriceField
	(*CThostFtdcQryBrokerTradingParamsField)(nil),           // 258: ctp.CThostFtdcQryBrokerTradingParamsField
	(*CThostFtdcBrokerTradingParamsField)(nil),              // 259: ctp.CThostFtdcBrokerTradingParamsField
	(*CThostFtdcQryBrokerTradingAlgosField)(nil),            // 260: ctp.CThostFtdcQryBrokerTradingAlgosField
	(*CThostFtdcBrokerTradingAlgosField)(nil),               // 261: ctp.CThostFtdcBrokerTradingAlgosField
	(*CThostFtdcQueryBrokerDepositField)(nil),               // 262: ctp.CThostFtdcQueryBrokerDepositField
	(*CThostFtdcBrokerDepositField)(nil),                    // 263: ctp.CThostFtdcBrokerDepositField
	(*CThostFtdcQryCFMMCBrokerKeyField)(nil),                // 264: ctp.CThostFtdcQryCFMMCBrokerKeyField
	(*CThostFtdcCFMMCBrokerKeyField)(nil),                   // 265: ctp.CThostFtdcCFMMCBrokerKeyField
	(*CThostFtdcCFMMCTradingAccountKeyField)(nil),           // 266: ctp.CThostFtdcCFMMCTradingAccountKeyField
	(*CThostFtdcQryCFMMCTradingAccountKeyField)(nil),        // 267: ctp.CThostFtdcQryCFMMCTradingAccountKeyField
	(*CThostFtdcBrokerUserOTPParamField)(nil),               // 268: ctp.CThostFtdcBrokerUserOTPParamField
	(*CThostFtdcManualSyncBrokerUserOTPField)(nil),          // 269: ctp.CThostFtdcManualSyncBrokerUserOTPField
	(*CThostFtdcCommRateModelField)(nil),                    // 270: ctp.CThostFtdcCommRateModelField
	(*CThostFtdcQryCommRateModelField)(nil),                 // 271: ctp.CThostFtdcQryCommRateModelField
	(*CThostFtdcMarginModelField)(nil),                      // 272: ctp.CThostFtdcMarginModelField
	(*CThostFtdcQryMarginModelField)(nil),                   // 273: ctp.CThostFtdcQryMarginModelField
	(*CThostFtdcEWarrantOffsetField)(nil),                   // 274: ctp.CThostFtdcEWarrantOffsetField
	(*CThostFtdcQryEWarrantOffsetField)(nil),                // 275: ctp.CThostFtdcQryEWarrantOffsetField
	(*CThostFtdcQryInvestorProductGroupMarginField)(nil),    // 276: ctp.CThostFtdcQryInvestorProductGroupMarginField
	(*CThostFtdcInvestorProductGroupMarginField)(nil),       // 277: ctp.CThostFtdcInvestorProductGroupMarginField
	(*CThostFtdcQueryCFMMCTradingAccountTokenField)(nil),    // 278: ctp.CThostFtdcQueryCFMMCTradingAccountTokenField
	(*CThostFtdcCFMMCTradingAccountTokenField)(nil),         // 279: ctp.CThostFtdcCFMMCTradingAccountTokenField
	(*CThostFtdcQryProductGroupField)(nil),                  // 280: ctp.CThostFtdcQryProductGroupField
	(*CThostFtdcProductGroupField)(nil),                     // 281: ctp.CThostFtdcProductGroupField
	(*CThostFtdcBulletinField)(nil),                         // 282: ctp.CThostFtdcBulletinField
	(*CThostFtdcQryBulletinField)(nil),                      // 283: ctp.CThostFtdcQryBulletinField
	(*CThostFtdcReqOpenAccountField)(nil),                   // 284: ctp.CThostFtdcReqOpenAccountField
	(*CThostFtdcReqCancelAccountField)(nil),                 // 285: ctp.CThostFtdcReqCancelAccountField
	(*CThostFtdcReqChangeAccountField)(nil),                 // 286: ctp.CThostFtdcReqChangeAccountField
	(*CThostFtdcReqTransferField)(nil),                      // 287: ctp.CThostFtdcReqTransferField
	(*CThostFtdcRspTransferField)(nil),                      // 288: ctp.CThostFtdcRspTransferField
	(*CThostFtdcReqRepealField)(nil),                        // 289: ctp.CThostFtdcReqRepealField
	(*CThostFtdcRspRepealField)(nil),                        // 290: ctp.CThostFtdcRspRepealField
	(*CThostFtdcReqQueryAccountField)(nil),                  // 291: ctp.CThostFtdcReqQueryAccountField
	(*CThostFtdcRspQueryAccountField)(nil),                  // 292: ctp.CThostFtdcRspQueryAccountField
	(*CThostFtdcFutureSignIOField)(nil),                     // 293: ctp.CThostFtdcFutureSignIOField
	(*CThostFtdcRspFutureSignInField)(nil),                  // 294: ctp.CThostFtdcRspFutureSignInField
	(*CThostFtdcReqFutureSignOutField)(nil),                 // 295: ctp.CThostFtdcReqFutureSignOutField
	(*CThostFtdcRspFutureSignOutField)(nil),                 // 296: ctp.CThostFtdcRspFutureSignOutField
	(*CThostFtdcReqQueryTradeResultBySerialField)(nil),      // 297: ctp.CThostFtdcReqQueryTradeResultBySerialField
	(*CThostFtdcRspQueryTradeResultBySerialField)(nil),      // 298: ctp.CThostFtdcRspQueryTradeResultBySerialField
	(*CThostFtdcReqDayEndFileReadyField)(nil),               // 299: ctp.CThostFtdcReqDayEndFileReadyField
	(*CThostFtdcReturnResultField)(nil),                     // 300: ctp.CThostFtdcReturnResultField
	(*CThostFtdcVerifyFuturePasswordField)(nil),             // 301: ctp.CThostFtdcVerifyFuturePasswordField
	(*CThostFtdcVerifyCustInfoField)(nil),                   // 302: ctp.CThostFtdcVerifyCustInfoField
	(*CThostFtdcVerifyFuturePasswordAndCustInfoField)(nil),  // 303: ctp.CThostFtdcVerifyFuturePasswordAndCustInfoField
	(*CThostFtdcDepositResultInformField)(nil),              // 304: ctp.CThostFtdcDepositResultInformField
	(*CThostFtdcReqSyncKeyField)(nil),                       // 305: ctp.CThostFtdcReqSyncKeyField
	(*CThostFtdcRspSyncKeyField)(nil),                       // 306: ctp.CThostFtdcRspSyncKeyField
	(*CThostFtdcNotifyQueryAccountField)(nil),               // 307: ctp.CThostFtdcNotifyQueryAccountField
	(*CThostFtdcTransferSerialField)(nil),                   // 308: ctp.CThostFtdcTransferSerialField
	(*CThostFtdcQryTransferSerialField)(nil),                // 309: ctp.CThostFtdcQryTransferSerialField
	(*CThostFtdcNotifyFutureSignInField)(nil),               // 310: ctp.CThostFtdcNotifyFutureSignInField
	(*CThostFtdcNotifyFutureSignOutField)(nil),              // 311: ctp.CThostFtdcNotifyFutureSignOutField
	(*CThostFtdcNotifySyncKeyField)(nil),                    // 312: ctp.CThostFtdcNotifySyncKeyField
	(*CThostFtdcQryAccountregisterField)(nil),               // 313: ctp.CThostFtdcQryAccountregisterField
	(*CThostFtdcAccountregisterField)(nil),                  // 314: ctp.CThostFtdcAccountregisterField
	(*CThostFtdcOpenAccountField)(nil),                      // 315: ctp.CThostFtdcOpenAccountField
	(*CThostFtdcCancelAccountField)(nil),                    // 316: ctp.CThostFtdcCancelAccountField
	(*CThostFtdcChangeAccountField)(nil),                    // 317: ctp.CThostFtdcChangeAccountField
	(*CThostFtdcSecAgentACIDMapField)(nil),                  // 318: ctp.CThostFtdcSecAgentACIDMapField
	(*CThostFtdcQrySecAgentACIDMapField)(nil),               // 319: ctp.CThostFtdcQrySecAgentACIDMapField
	(*CThostFtdcUserRightsAssignField)(nil),                 // 320: ctp.CThostFtdcUserRightsAssignField
	(*CThostFtdcBrokerUserRightAssignField)(nil),            // 321: ctp.CThostFtdcBrokerUserRightAssignField
	(*CThostFtdcDRTransferField)(nil),                       // 322: ctp.CThostFtdcDRTransferField
	(*CThostFtdcFensUserInfoField)(nil),                     // 323: ctp.CThostFtdcFensUserInfoField
	(*CThostFtdcCurrTransferIdentityField)(nil),             // 324: ctp.CThostFtdcCurrTransferIdentityField
	(*CThostFtdcLoginForbiddenUserField)(nil),               // 325: ctp.CThostFtdcLoginForbiddenUserField
	(*CThostFtdcQryLoginForbiddenUserField)(nil),            // 326: ctp.CThostFtdcQryLoginForbiddenUserField
	(*CThostFtdcMulticastGroupInfoField)(nil),               // 327: ctp.CThostFtdcMulticastGroupInfoField
	(*CThostFtdcTradingAccountReserveField)(nil),            // 328: ctp.CThostFtdcTradingAccountReserveField
	(*CThostFtdcQryLoginForbiddenIPField)(nil),              // 329: ctp.CThostFtdcQryLoginForbiddenIPField
	(*CThostFtdcQryIPListField)(nil),                        // 330: ctp.CThostFtdcQryIPListField
	(*CThostFtdcQryUserRightsAssignField)(nil),              // 331: ctp.CThostFtdcQryUserRightsAssignField
	(*CThostFtdcReserveOpenAccountConfirmField)(nil),        // 332: ctp.CThostFtdcReserveOpenAccountConfirmField
	(*CThostFtdcReserveOpenAccountField)(nil),               // 333: ctp.CThostFtdcReserveOpenAccountField
	(*CThostFtdcAccountPropertyField)(nil),                  // 334: ctp.CThostFtdcAccountPropertyField
	(*CThostFtdcQryCurrDRIdentityField)(nil),                // 335: ctp.CThostFtdcQryCurrDRIdentityField
	(*CThostFtdcCurrDRIdentityField)(nil),                   // 336: ctp.CThostFtdcCurrDRIdentityField
	(*CThostFtdcQrySecAgentCheckModeField)(nil),             // 337: ctp.CThostFtdcQrySecAgentCheckModeField
	(*CThostFtdcQrySecAgentTradeInfoField)(nil),             // 338: ctp.CThostFtdcQrySecAgentTradeInfoField
	(*CThostFtdcUserSystemInfoField)(nil),                   // 339: ctp.CThostFtdcUserSystemInfoField
	(*CThostFtdcReqUserAuthMethodField)(nil),                // 340: ctp.CThostFtdcReqUserAuthMethodField
	(*CThostFtdcRspUserAuthMethodField)(nil),                // 341: ctp.CThostFtdcRspUserAuthMethodField
	(*CThostFtdcReqGenUserCaptchaField)(nil),                // 342: ctp.CThostFtdcReqGenUserCaptchaField
	(*CThostFtdcRspGenUserCaptchaField)(nil),                // 343: ctp.CThostFtdcRspGenUserCaptchaField
	(*CThostFtdcReqGenUserTextField)(nil),                   // 344: ctp.CThostFtdcReqGenUserTextField
	(*CThostFtdcRspGenUserTextField)(nil),                   // 345: ctp.CThostFtdcRspGenUserTextField
	(*CThostFtdcReqUserLoginWithCaptchaField)(nil),          // 346: ctp.CThostFtdcReqUserLoginWithCaptchaField
	(*CThostFtdcReqUserLoginWithTextField)(nil),             // 347: ctp.CThostFtdcReqUserLoginWithTextField
	(*CThostFtdcReqUserLoginWithOTPField)(nil),              // 348: ctp.CThostFtdcReqUserLoginWithOTPField
	(*CThostFtdcReqApiHandshakeField)(nil),                  // 349: ctp.CThostFtdcReqApiHandshakeField
	(*CThostFtdcRspApiHandshakeField)(nil),                  // 350: ctp.CThostFtdcRspApiHandshakeField
	(*CThostFtdcReqVerifyApiKeyField)(nil),                  // 351: ctp.CThostFtdcReqVerifyApiKeyField
	(*CThostFtdcDepartmentUserField)(nil),                   // 352: ctp.CThostFtdcDepartmentUserField
	(*CThostFtdcQueryFreqField)(nil),                        // 353: ctp.CThostFtdcQueryFreqField
	(*CThostFtdcReqRegisterFrontField)(nil),                 // 354: ctp.CThostFtdcReqRegisterFrontField
	(*CThostFtdcReqSubscribeMarketData)(nil),                // 355: ctp.CThostFtdcReqSubscribeMarketData
	(*CThostFtdcReqUnSubscribeMarketData)(nil),              // 356: ctp.CThostFtdcReqUnSubscribeMarketData
	(*CThostFtdcReqSubscribeForQuoteRsp)(nil),               // 357: ctp.CThostFtdcReqSubscribeForQuoteRsp
	(*CThostFtdcReqUnSubscribeForQuoteRsp)(nil),             // 358: ctp.CThostFtdcReqUnSubscribeForQuoteRsp
}
var file_ctp_ctp_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ctp_ctp_proto_init() }
func file_ctp_ctp_proto_init() {
	if File_ctp_ctp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ctp_ctp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcDisseminationField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqUserLoginField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspUserLoginField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcUserLogoutField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcForceUserLogoutField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqAuthenticateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspAuthenticateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcAuthenticationInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspUserLogin2Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferHeaderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferBankToFutureReqField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferBankToFutureRspField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferFutureToBankReqField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferFutureToBankRspField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferQryBankReqField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferQryBankRspField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferQryDetailReqField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferQryDetailRspField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcProductField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTraderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingCodeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcPartBrokerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSuperUserField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSuperUserFunctionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorGroupField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorPositionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentMarginRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentCommissionRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcDepthMarketDataField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentTradingRightField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerUserField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerUserPasswordField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerUserFunctionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTraderOfferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSettlementInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentMarginRateAdjustField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeMarginRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeMarginRateAdjustField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSettlementRefField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCurrentTimeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCommPhaseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcLoginInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcLogoutAllField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcFrontStatusField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcUserPasswordUpdateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeOrderInsertErrorField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeOrderActionErrorField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeTradeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcUserSessionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQueryMaxOrderVolumeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSettlementInfoConfirmField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncDepositField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncFundMortgageField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerSyncField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingInvestorField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingTradingCodeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingInvestorGroupField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingTradingAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingInvestorPositionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingInstrumentMarginRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingInstrumentCommissionRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncingInstrumentTradingRightField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTradeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInvestorPositionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTradingAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInvestorField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTradingCodeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInvestorGroupField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInstrumentMarginRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInstrumentCommissionRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInstrumentTradingRightField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBrokerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTraderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySuperUserFunctionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryUserSessionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryPartBrokerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryFrontStatusField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySuperUserField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryProductField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInstrumentField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryDepthMarketDataField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBrokerUserField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBrokerUserFunctionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTraderOfferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySyncDepositField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySettlementInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeMarginRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeMarginRateAdjustField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySyncFundMortgageField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryHisOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionInstrMiniMarginField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionInstrMarginAdjustField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionInstrCommRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionInstrTradeCostField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryOptionInstrTradeCostField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryOptionInstrCommRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcIndexPriceField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputExecOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputExecOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExecOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExecOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExecOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeExecOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeExecOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExecOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeExecOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeExecOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcErrExecOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryErrExecOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcErrExecOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryErrExecOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionInstrTradingRightField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryOptionInstrTradingRightField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputForQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcForQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryForQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeForQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeForQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputQuoteActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQuoteActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeQuoteField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryQuoteActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeQuoteActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeQuoteActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionInstrDeltaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcForQuoteRspField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcStrikeOffsetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryStrikeOffsetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputBatchOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBatchOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeBatchOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBatchOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCombInstrumentGuardField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryCombInstrumentGuardField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputCombActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCombActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryCombActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeCombActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeCombActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcProductExchRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryProductExchRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryForQuoteParamField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcForQuoteParamField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMMOptionInstrCommRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryMMOptionInstrCommRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMMInstrumentCommissionRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryMMInstrumentCommissionRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentOrderCommRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInstrumentOrderCommRateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradeParamField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentMarginRateULField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcFutureLimitPosiParamField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcLoginForbiddenIPField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcIPListField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputOptionSelfCloseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInputOptionSelfCloseActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionSelfCloseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOptionSelfCloseActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryOptionSelfCloseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeOptionSelfCloseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryOptionSelfCloseActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeOptionSelfCloseActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncDelaySwapField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySyncDelaySwapField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestUnitField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInvestUnitField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSecAgentCheckModeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSecAgentTradeInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataBaseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataStaticField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataLastMatchField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataBestPriceField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataBid23Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataAsk23Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataBid45Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataAsk45Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataUpdateTimeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataExchangeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSpecificInstrumentField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInstrumentStatusField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInstrumentStatusField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcPositionProfitAlgorithmField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcDiscountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTransferBankField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferBankField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInvestorPositionDetailField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorPositionDetailField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingAccountPasswordField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMDTraderOfferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryMDTraderOfferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryNoticeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcNoticeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcUserRightField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySettlementInfoConfirmField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcLoadSettlementInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerWithdrawAlgorithmField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingAccountPasswordUpdateV1Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingAccountPasswordUpdateField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryCombinationLegField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySyncStatusField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCombinationLegField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSyncStatusField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryLinkManField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcLinkManField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBrokerUserEventField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerUserEventField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryContractBankField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcContractBankField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorPositionCombineDetailField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcParkedOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcParkedOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryParkedOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryParkedOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRemoveParkedOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRemoveParkedOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorWithdrawAlgorithmField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInvestorPositionCombineDetailField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarketDataAveragePriceField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcVerifyInvestorPasswordField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcUserIPField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingNoticeInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingNoticeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTradingNoticeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryErrOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcErrOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcErrorConditionalOrderField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryErrOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcErrOrderActionField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryExchangeSequenceField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcExchangeSequenceField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQueryMaxOrderVolumeWithPriceField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBrokerTradingParamsField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerTradingParamsField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBrokerTradingAlgosField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerTradingAlgosField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQueryBrokerDepositField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerDepositField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryCFMMCBrokerKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCFMMCBrokerKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCFMMCTradingAccountKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryCFMMCTradingAccountKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerUserOTPParamField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcManualSyncBrokerUserOTPField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCommRateModelField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryCommRateModelField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMarginModelField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryMarginModelField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcEWarrantOffsetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryEWarrantOffsetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryInvestorProductGroupMarginField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcInvestorProductGroupMarginField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQueryCFMMCTradingAccountTokenField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCFMMCTradingAccountTokenField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryProductGroupField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcProductGroupField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBulletinField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryBulletinField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqOpenAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqCancelAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqChangeAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqTransferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspTransferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqRepealField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspRepealField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqQueryAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspQueryAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcFutureSignIOField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspFutureSignInField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqFutureSignOutField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspFutureSignOutField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqQueryTradeResultBySerialField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspQueryTradeResultBySerialField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqDayEndFileReadyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReturnResultField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcVerifyFuturePasswordField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcVerifyCustInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcVerifyFuturePasswordAndCustInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcDepositResultInformField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqSyncKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspSyncKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcNotifyQueryAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTransferSerialField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryTransferSerialField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcNotifyFutureSignInField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcNotifyFutureSignOutField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcNotifySyncKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryAccountregisterField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcAccountregisterField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcOpenAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCancelAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcChangeAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcSecAgentACIDMapField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySecAgentACIDMapField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcUserRightsAssignField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcBrokerUserRightAssignField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcDRTransferField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcFensUserInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCurrTransferIdentityField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcLoginForbiddenUserField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryLoginForbiddenUserField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcMulticastGroupInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcTradingAccountReserveField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryLoginForbiddenIPField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryIPListField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryUserRightsAssignField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReserveOpenAccountConfirmField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReserveOpenAccountField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcAccountPropertyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQryCurrDRIdentityField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcCurrDRIdentityField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySecAgentCheckModeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQrySecAgentTradeInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcUserSystemInfoField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqUserAuthMethodField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspUserAuthMethodField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqGenUserCaptchaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspGenUserCaptchaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqGenUserTextField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspGenUserTextField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqUserLoginWithCaptchaField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqUserLoginWithTextField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqUserLoginWithOTPField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqApiHandshakeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcRspApiHandshakeField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqVerifyApiKeyField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcDepartmentUserField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcQueryFreqField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqRegisterFrontField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqSubscribeMarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqUnSubscribeMarketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqSubscribeForQuoteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctp_ctp_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CThostFtdcReqUnSubscribeForQuoteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ctp_ctp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   358,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ctp_ctp_proto_goTypes,
		DependencyIndexes: file_ctp_ctp_proto_depIdxs,
		EnumInfos:         file_ctp_ctp_proto_enumTypes,
		MessageInfos:      file_ctp_ctp_proto_msgTypes,
	}.Build()
	File_ctp_ctp_proto = out.File
	file_ctp_ctp_proto_rawDesc = nil
	file_ctp_ctp_proto_goTypes = nil
	file_ctp_ctp_proto_depIdxs = nil
}
